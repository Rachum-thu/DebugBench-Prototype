[
    {
        "slug": "prime-arrangements",
        "description": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer\u00a0is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\u00a0both smaller than it.)\nSince the answer may be large, return the answer modulo 10^9 + 7.",
        "examples": [
            "Input: n = 5\nOutput: 12\nExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.",
            "Input: n = 100\nOutput: 682289015"
        ],
        "constraints": "1 <= n <= 100",
        "release_time": 1674659389,
        "oracle_code": "class Solution {\npublic:\n    long long fact(int n)\n    {\n        if(n<=1)return 1;\n        return (n*fact(n-1)%1000000007)%1000000007;\n    }\n    int numPrimeArrangements(int n) {\n        if(n==1)return 1;\n        if(n<=3)return n-1;\n        int t=0,flag;\n        for(int i=2;i<=n;i++)\n        {\n            flag=0;\n            for(int j=2;j<=sqrt(i);j++)\n            {\n                if(i%j==0)\n                {\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0)\n            {\n                t++;\n            }\n        }\n        return (fact(t)*fact(n-t))%1000000007;\n\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long fact(int n)\\n    {\\n        if(n<=1)return 1;\\n        return (n*fact(n-1)%1000000007)%1000000007;\\n    }\\n    int numPrimeArrangements(int n) {\\n        if(n==1)return 1;\\n        if(n<=3)return n-1;\\n        int t=0,flag;\\n        for(int i=2;i<=n;i++)\\n        {\\n            flag=0;\\n            for(int j=2;j<=sqrt(i);j++)\\n            {\\n                if(i%j==0)\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n            {\\n                t++;\\n            }\\n        }\\n        return (fact(t)*fact(n-t))%1000000007;\\n\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    long long fact(int n)\n    {\n        if(n<=1)return 1;\n        return (n*fact(n-1)%1000000007)%1000000007;\n    }\n    int numPrimeArrangements(int n) {\n        if(n==1)return 1;\n        if(n<=3)return n-1;\n        int t=0,flag;\n        for(int i=2;i<=n;i++)\n        {\n            flag=0;\n            for(int j=2;j<sqrt(i);j++)\n            {\n                if(i%j==0)\n                {\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0)\n            {\n                t++;\n            }\n        }\n        return (fact(t)*fact(n-t))%1000000007;\n\n    }\n};\n",
        "explanations": "\nThe '<' in the inner for loop should be a '<=' to check all necessary factors.\n"
    },
    {
        "slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "description": "You are given an array of unique integers salary where salary[i] is the salary of the ith employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.",
        "examples": [
            "Input: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500",
            "Input: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000"
        ],
        "constraints": "3 <= salary.length <= 100\n1000 <= salary[i] <= 106\nAll the integers of salary are unique.",
        "release_time": 1682952594,
        "oracle_code": "class Solution {\npublic:\n    double average(vector<int>& salary) {\n        int n=salary.size(),sum=0,Min=INT_MAX,Max=INT_MIN;\n        for(int i:salary){\n            Max = Max < i ? i : Max ;\n            Min = Min > i ? i : Min ;\n            sum += i;\n        }\n        sum -= (Min + Max);\n        return sum/(n-2.0);\n    }\n};",
        "content": "# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double average(vector<int>& salary) {\\n        int n=salary.size(),sum=0,Min=INT_MAX,Max=INT_MIN;\\n        for(int i:salary){\\n            Max = Max < i ? i : Max ;\\n            Min = Min > i ? i : Min ;\\n            sum += i;\\n        }\\n        sum -= (Min + Max);\\n        return sum/(n-2.0);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    double average(vector<int>& salary) {\n        int n=salary.size(),sum=0,Min=INT_MAX,Max=INT_MIN;\n        for(int i:salary){\n            Max = Max < i ? i : Max \n            Min = Min > i ? i : Min ;\n            sum += i;\n        }\n        sum -= (Min + Max);\n        return sum/(n-2.0);\n    }\n};\n",
        "explanations": "\nThe missing semicolon after the Max value assignment leads to a syntax error.\n"
    },
    {
        "slug": "find-the-winner-of-the-circular-game",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n\nStart at the 1st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, n, and an integer k, return the winner of the game.",
        "examples": [
            "Input: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
            "Input: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
        ],
        "constraints": "1 <= k <= n <= 500",
        "release_time": 1682999813,
        "oracle_code": "class Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        queue<int> q;\n        for(int i=1;i<=n;i++){\n            q.push(i);\n        }\n        // 1 2 3 4 5 \n        while(q.size() != 1){\n            int i = 1;\n            while(i < k){\n                int f = q.front();\n                q.pop();\n                q.push(f);\n                i++;\n            }\n            q.pop();\n        }\n\n        return q.front();\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findTheWinner(int n, int k) {\\n        queue<int> q;\\n        for(int i=1;i<=n;i++){\\n            q.push(i);\\n        }\\n        // 1 2 3 4 5 \\n        while(q.size() != 1){\\n            int i = 1;\\n            while(i < k){\\n                int f = q.front();\\n                q.pop();\\n                q.push(f);\\n                i++;\\n            }\\n            q.pop();\\n        }\\n\\n        return q.front();\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        queue<int> q;\n        for(int i=1;i<=n;i++){\n            q.push(i);\n        }\n        // 1 2 3 4 5 \n        while(q.size() != 1){\n            int i = 1;\n            while(i k){\n                int f = q.front();\n                q.pop();\n                q.push(f);\n                i++;\n            }\n            q.pop();\n        }\n\n        return q.front();\n    }\n};\n",
        "explanations": "\nThe comparison operator was removed, resulting in a syntax error and unexpected behavior.\n"
    },
    {
        "slug": "divide-players-into-teams-of-equal-skill",
        "description": "You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.\nThe chemistry of a team is equal to the product of the skills of the players on that team.\nReturn the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.",
        "examples": [
            "Input: skill = [3,2,5,1,3,4]\nOutput: 22\nExplanation: \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.",
            "Input: skill = [3,4]\nOutput: 12\nExplanation: \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.",
            "Input: skill = [1,1,2,3]\nOutput: -1\nExplanation: \nThere is no way to divide the players into teams such that the total skill of each team is equal."
        ],
        "constraints": "2 <= skill.length <= 105\nskill.length is even.\n1 <= skill[i] <= 1000",
        "release_time": 1676557676,
        "oracle_code": "// // **************** Using sorting *****************\n// class Solution {\n// public:\n//     long long dividePlayers(vector<int>& skill) {\n//         int n=skill.size();\n//         sort(skill.begin(), skill.end());\n//         long long ans=0;\n//         int low=0, high=n-1;\n//         int skl=skill[low]+skill[high];\n\n//         while(low<=high){\n//             if( (skill[low]+skill[high])!=skl) return -1;\n//             ans+=skill[low]*skill[high];\n//             low++;\n//             high--;\n//         }\n\n//         return ans;\n//     }\n// };\n\n\n\n\n\n// **************** Using map *****************\nclass Solution {\npublic:\n    long long dividePlayers(vector<int>& skill) {\n        int n=skill.size();\n        long long sum=accumulate(skill.begin(), skill.end(), 0);\n        if(sum%(n/2)) return -1;\n        long long skillTeam=sum/(n/2);\n\n        unordered_map<int,int>mp;\n        for(auto it: skill){\n            mp[it]++;\n        }\n\n        long long ans=0;\n\n        for(auto it: skill){\n            if(mp.find(it)==mp.end()) continue;\n            mp[it]--;\n\n            int temp=skillTeam-it;\n            if(mp.find(temp)!=mp.end()){\n                mp[temp]--;\n                if(mp[temp]==0) mp.erase(temp);\n                ans+=it*temp;\n                if(mp[it]==0) mp.erase(it);\n            }\n        }\n\n        if(mp.size()>0) return -1;\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCan\\'t we just sort and check for the elements????\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\njust sort the array and check the sum of end elements.\\nIf the sum of the end elements are same then store their product in a variable \"ans\" and repeat the process till the mid.\\n\\nIf any pair don\\'t sum-up equal to its previous pair-sum then simply return \\'-1\\'.\\nOtherwise return \"ans\" in the end.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\n// // **************** Using sorting *****************\\n// class Solution {\\n// public:\\n//     long long dividePlayers(vector<int>& skill) {\\n//         int n=skill.size();\\n//         sort(skill.begin(), skill.end());\\n//         long long ans=0;\\n//         int low=0, high=n-1;\\n//         int skl=skill[low]+skill[high];\\n\\n//         while(low<=high){\\n//             if( (skill[low]+skill[high])!=skl) return -1;\\n//             ans+=skill[low]*skill[high];\\n//             low++;\\n//             high--;\\n//         }\\n\\n//         return ans;\\n//     }\\n// };\\n\\n\\n\\n\\n\\n// **************** Using map *****************\\nclass Solution {\\npublic:\\n    long long dividePlayers(vector<int>& skill) {\\n        int n=skill.size();\\n        long long sum=accumulate(skill.begin(), skill.end(), 0);\\n        if(sum%(n/2)) return -1;\\n        long long skillTeam=sum/(n/2);\\n\\n        unordered_map<int,int>mp;\\n        for(auto it: skill){\\n            mp[it]++;\\n        }\\n\\n        long long ans=0;\\n\\n        for(auto it: skill){\\n            if(mp.find(it)==mp.end()) continue;\\n            mp[it]--;\\n\\n            int temp=skillTeam-it;\\n            if(mp.find(temp)!=mp.end()){\\n                mp[temp]--;\\n                if(mp[temp]==0) mp.erase(temp);\\n                ans+=it*temp;\\n                if(mp[it]==0) mp.erase(it);\\n            }\\n        }\\n\\n        if(mp.size()>0) return -1;\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    long long dividePlayers(vector<int>& skill) {\n        int n=skill.size();\n        long long sum=accumulate(skill.begin(), skill.end(), 0);\n        if(sum%(n/2)) return -1;\n        long long skillTeam=sum/(n/2);\n\n        unordered_map<int,int>mp;\n        for(auto it: skill){\n            mp[it]++;\n        }\n\n        long long ans=0;\n\n        for(auto it: skill){\n            if(mp.find(it)==mp.end()) continue;\n            mp[it]--;\n\n            int temp=skillTeam-it\n            if(mp.find(temp)!=mp.end()){\n                mp[temp]--;\n                if(mp[temp]==0) mp.erase(temp);\n                ans+=it*temp;\n                if(mp[it]==0) mp.erase(it);\n            }\n        }\n\n        if(mp.size()>0) return -1;\n        return ans;\n    }\n};\n",
        "explanations": "\nMissing semicolon after the line \"int temp=skillTeam-it\", causing a compilation error.\n"
    },
    {
        "slug": "lru-cache",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.",
        "examples": [
            "Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
        ],
        "constraints": "1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.",
        "release_time": 1689644680,
        "oracle_code": "class LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,value));\n        mpp[_key] = head->next;\n    }\n};",
        "content": "# PLEASE DO UPVOTE!!!!!\\n\\n**CONNECT WITH ME ON LINKEDIN :  https://www.linkedin.com/in/md-kamran-55b98521a/**\\n\\n## INTUITION\\nTo Implement LRU(Least recently used), we need to have a track of the usage of the keys, in the order of there usage, as we have a limited capacity we cant extend our capacity beyond \"capacity\", so we always we will take out those values which has\\'nt been acccess in the recent time.So, we have to think of something that can kind of sort our keys according to usage on the go, the best Data Structure for this purpose is Doubly linked List.\\n                             A Doubly linked list will have a Head node as well as a tail node, and whenever a key is used we will place it just next to the head node,in this fashions, the one\\'s which are closer to head are the most recently used ones, and as we go closer to the tail node, those are the less recently used ones while the node just previous to tail is the \"LEAST RECENTLY USED\". \\nSo whenever we add a key or use a key(get()), we will move it right after the head node, and whenever we call the (put() function), if size if greater we have to delete the LRU node, if key is not present, (if present then too we will delete that node so as to update the value and still move it right after head node), and place new node right after head node.                        \\n\\n\\n**Ask Furthur Doubts in the Comment Section**\\n# Code\\n```\\nclass LRUCache {\\npublic:\\nclass node\\n{\\n  public:\\n  int key;\\n  int val;\\n  node* next;\\n  node* prev;\\n  node(int _key,int _val)\\n  {\\n    key = _key;\\n    val = _val;\\n  }\\n};\\nnode* head = new node(-1,-1);\\nnode* tail = new node(-1,-1);\\n\\nint size;\\nunordered_map<int,node*>mpp;\\n    LRUCache(int capacity) {\\n       size = capacity; \\n       head->next = tail;\\n       tail->prev = head;  \\n    }\\n\\n    void addNode(node* newNode){\\n       \\n       node* temp = head->next;\\n       newNode->next = temp;\\n       newNode->prev = head;\\n       head->next = newNode;\\n       temp->prev = newNode;\\n    }\\n\\n    void deleteNode(node* delNode){\\n         \\n       node* delprev = delNode->prev;\\n       node* delnext = delNode->next;\\n       delprev->next = delnext;\\n       delnext->prev = delprev;\\n    }\\n    \\n    int get(int _key) {\\n        \\n        if(mpp.count(_key))\\n        {\\n          node* nde = mpp[_key];\\n          int curr = nde->val;\\n          mpp.erase(_key);\\n          deleteNode(nde);\\n          addNode(nde);\\n          mpp[_key] = head->next;\\n          return curr;\\n        }\\n        return -1;\\n    }\\n    \\n    void put(int _key, int value) {\\n        \\n        if(mpp.count(_key))\\n        {\\n           node* nde = mpp[_key];\\n           mpp.erase(_key);\\n           deleteNode(nde);\\n        }\\n        if(mpp.size()==size)\\n        {\\n           mpp.erase(tail->prev->key);\\n           deleteNode(tail->prev);\\n        }\\n        addNode(new node(_key,value));\\n        mpp[_key] = head->next;\\n    }\\n};\\n\\n```\\n![b62ab1be-232a-438f-9524-7d8ca4dbd5fe_1675328166.1161866.png](https://assets.leetcode.com/users/images/8d5343b1-0eb4-4111-a914-40ce968fd034_1675389764.2273676.png)",
        "level": "medium",
        "buggy_code": "\nclass LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde)\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,value));\n        mpp[_key] = head->next;\n    }\n};\n",
        "explanations": "\nMissing semi-colon at the end of addNode() function call on line 45 in get() function.\n"
    },
    {
        "slug": "count-number-of-possible-root-nodes",
        "description": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n\nChooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\nHe tells Alice that u is the parent of v in the tree.\n\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.",
        "examples": [
            "Input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\nOutput: 3\nExplanation: \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.",
            "Input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\nOutput: 5\nExplanation: \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess."
        ],
        "constraints": "edges.length == n - 1\n2 <= n <= 105\n1 <= guesses.length <= 105\n0 <= ai, bi, uj, vj <= n - 1\nai != bi\nuj != vj\nedges represents a valid tree.\nguesses[j] is an edge of the tree.\nguesses is unique.\n0 <= k <= guesses.length",
        "release_time": 1677967205,
        "oracle_code": "class Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};",
        "content": "# Intuition\\nSuppose [a,b] is an edge and a is the root of the tree. Now suppose we want to evaluate b as the root of the tree. The only guess that were previously correct and now incorrect would be [a,b]. Similarly the only guess that was previously incorrect but now correct is [b,a].\\n\\n# Approach\\nCreate an adjacency list of the graph ->***tree***. Suppose 0 is the root of the tree. Apply bfs (I used bfs but dfs can be used as well) to evaluate all the guesses that are now correct ->***ans***. Create another array of size n -> ***possible*** that stores if the current node is capable of being the root of the tree. possible[0] = 1 if ans>=k, else possible[0]=0;\\n\\nNow try to evaluate the ans if one of the neighbours of 0 is the root. Suppose [0,b] is an edge in guesses. We will know that since b is now parent, [0,b] guess would now be false. So decrement ans by 1 in this case. Similarly suppose [b,0] was a guess. This guess is now correct. Increment ans by 1 in this case. Again see if ans>=k. If yes, possible[b]=1, else possible[b]=0;\\n\\nContinue this for all the edges in the tree in a dfs manner. Finally return the number of indexes where possible array entry is equal to 1. \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    map<pair<int,int>,int> mp;\\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\\n    {\\n        for(auto& a:tree[cur])\\n        {\\n            if(possible[a]==-1)\\n            {\\n                int new_ans=ans;\\n                bool a1=false,a2=false;\\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\\n                {\\n                    mp[{a,cur}]=1;\\n                    new_ans++;\\n                    a1=true;\\n                }\\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\\n                {\\n                    mp[{cur,a}]=0;\\n                    new_ans--;\\n                    a2=true;\\n                }\\n                possible[a]=0;\\n                if(new_ans>=k)\\n                {\\n                    possible[a]=1;\\n                }\\n                dfs(tree,possible,a,new_ans,k);\\n                if(a1)\\n                {\\n                    mp[{a,cur}]=0;\\n                }\\n                if(a2)\\n                {\\n                    mp[{cur,a}]=1;\\n                }\\n            }\\n        }\\n\\n    }\\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\\n        \\n        for(auto&e : guesses)\\n        {\\n            mp[ {e[0],e[1]}]=0;\\n        }\\n        int n=edges.size()+1;\\n        vector<vector<int>> tree(n);\\n        for(auto& e:edges)\\n        {\\n            tree[e[0]].push_back(e[1]);\\n            tree[e[1]].push_back(e[0]);\\n        }\\n        queue<int> q;\\n        q.push(0);\\n        vector<bool> visited(n,false);\\n        visited[0]=true;\\n        int ans=0;\\n        while(q.size()>0)\\n        {\\n            int a=q.front();\\n            q.pop();\\n            for(int i=0;i<tree[a].size();i++)\\n            {\\n                if(visited[tree[a][i]])\\n                    continue;\\n                visited[tree[a][i]]=true;\\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\\n                {\\n                    mp[{a,tree[a][i]}]=1;\\n                    ans++;\\n                }\\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\\n                {\\n                    mp[{tree[a][i],a}]=0;\\n                    ans--;\\n                }\\n                q.push(tree[a][i]);\\n            }\\n        }\\n        vector<int> possible(n,-1);\\n        possible[0]= (1?ans>=k:0);\\n        dfs(tree,possible,0,ans,k);\\n        int sum=accumulate(possible.begin(),possible.end(),0);\\n        return sum;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k);\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};\n",
        "explanations": "\nUnnecessary semicolon after the if condition creates an empty statement, leading to incorrect results.\n"
    },
    {
        "slug": "car-pooling",
        "description": "There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\nYou are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.\nReturn true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.",
        "examples": [
            "Input: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false",
            "Input: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true"
        ],
        "constraints": "1 <= trips.length <= 1000\ntrips[i].length == 3\n1 <= numPassengersi <= 100\n0 <= fromi < toi <= 1000\n1 <= capacity <= 105",
        "release_time": 1685821263,
        "oracle_code": "class Solution {\nprivate:\n    static bool comp(vector<int>& it1, vector<int>& it2){\n        if(it1[1] < it2[1] || (it1[1] == it2[1] && it1[2] < it2[2])) return true;\n        return false;\n    }\npublic:\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\n        sort(trips.begin(),trips.end(),comp);\n        int n = trips.size();\n        int current_capacity = 0;\n        priority_queue<pair<int,int>>pq;\n        for(int i=0; i<n; i++){\n            while(!pq.empty() && -1 * pq.top().first <= trips[i][1]){\n                current_capacity -= pq.top().second;\n                pq.pop();\n            }\n            current_capacity += trips[i][0];\n            if(current_capacity > capacity) return false;\n            pq.push({-trips[i][2],trips[i][0]});\n        }\n        return true;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    static bool comp(vector<int>& it1, vector<int>& it2){\\n        if(it1[1] < it2[1] || (it1[1] == it2[1] && it1[2] < it2[2])) return true;\\n        return false;\\n    }\\npublic:\\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\\n        sort(trips.begin(),trips.end(),comp);\\n        int n = trips.size();\\n        int current_capacity = 0;\\n        priority_queue<pair<int,int>>pq;\\n        for(int i=0; i<n; i++){\\n            while(!pq.empty() && -1 * pq.top().first <= trips[i][1]){\\n                current_capacity -= pq.top().second;\\n                pq.pop();\\n            }\\n            current_capacity += trips[i][0];\\n            if(current_capacity > capacity) return false;\\n            pq.push({-trips[i][2],trips[i][0]});\\n        }\\n        return true;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\nprivate:\n    static bool comp(vector<int>& it1, vector<int>& it2){\n        if(it1[1] < it2[1] || (it1[1] == it2[1] && it1[2] < it2[2])) return true\n        return false;\n    }\npublic:\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\n        sort(trips.begin(),trips.end(),comp);\n        int n = trips.size();\n        int current_capacity = 0;\n        priority_queue<pair<int,int>>pq;\n        for(int i=0; i<n; i++){\n            while(!pq.empty() && -1 * pq.top().first <= trips[i][1]){\n                current_capacity -= pq.top().second;\n                pq.pop();\n            }\n            current_capacity += trips[i][0];\n            if(current_capacity > capacity) return false;\n            pq.push({-trips[i][2],trips[i][0]});\n        }\n        return true;\n    }\n};\n",
        "explanations": "\nThe return statement within the comp() function is missing a semi-colon at the end.\n"
    },
    {
        "slug": "longest-increasing-subsequence",
        "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
        "examples": [
            "Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.",
            "Input: nums = [0,1,0,3,2,3]\nOutput: 4",
            "Input: nums = [7,7,7,7,7,7,7]\nOutput: 1"
        ],
        "constraints": "1 <= nums.length <= 2500\n-104 <= nums[i] <= 104",
        "release_time": 1686036144,
        "oracle_code": "class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        //array to store max length subsequence till that place\n        vector<int> dp(nums.size(),0);\n        int maxlength = 0;//to store maxlength of subsequence\n        dp[0] = 1;//length will be 1 at first index \n        for(int i = 0;i<nums.size();i++){\n            int currentMaxLen = 0; //to store maxlength at till this index\n            for(int j = 0;j<i;j++){\n                // only check when the subsequence is increasing\n                if(nums[i]>nums[j]){\n                    if(currentMaxLen<dp[j]){\n                        currentMaxLen = dp[j]; //update currentMaxLen accordingly\n                    }\n                }\n            }\n            dp[i] = currentMaxLen + 1; //set the maxLength till ith index, which will be maxlenth so far + 1\n            maxlength = max(maxlength,dp[i]); //update maxlength\n        }\n        \n        return maxlength;\n    }\n};",
        "content": "# Intuition\\nThe problem asks us to find the length of the longest strictly increasing subsequence in the given array. To solve this problem efficiently, we can use dynamic programming.\\n\\n# Approach\\n1. Create a vector dp of size nums.size(), where dp[i] will store the length of the longest increasing subsequence ending at index i.\\n2. Initialize a variable maxlength to store the maximum length of the subsequence.\\n3. Set dp[0] to 1, as the length of the subsequence ending at the first index is always 1.\\n4. Iterate through each element in nums using the outer loop. For each element at index i, iterate through all the previous elements using the inner loop (from 0 to i-1).\\n5. Check if nums[i] is greater than nums[j], indicating that we can extend the increasing subsequence.\\n    - If the condition is satisfied, update the currentMaxLen variable with the maximum length of the subsequence so far at index j.\\n6. After the inner loop, update dp[i] with currentMaxLen + 1, which represents the maximum length of the subsequence ending at index i.\\nUpdate maxlength by taking the maximum value between maxlength and dp[i].\\n7. After the loop, maxlength will contain the length of the longest increasing subsequence.\\n8. Return maxlength.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(n^2), where n is the size of the input array nums. The outer loop runs for n iterations, and the inner loop also runs for a maximum of n iterations.\\n\\n- Space complexity:\\nThe space complexity is O(n) since we are using an additional vector dp of size n to store the lengths of subsequences.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLIS(vector<int>& nums) {\\n        //array to store max length subsequence till that place\\n        vector<int> dp(nums.size(),0);\\n        int maxlength = 0;//to store maxlength of subsequence\\n        dp[0] = 1;//length will be 1 at first index \\n        for(int i = 0;i<nums.size();i++){\\n            int currentMaxLen = 0; //to store maxlength at till this index\\n            for(int j = 0;j<i;j++){\\n                // only check when the subsequence is increasing\\n                if(nums[i]>nums[j]){\\n                    if(currentMaxLen<dp[j]){\\n                        currentMaxLen = dp[j]; //update currentMaxLen accordingly\\n                    }\\n                }\\n            }\\n            dp[i] = currentMaxLen + 1; //set the maxLength till ith index, which will be maxlenth so far + 1\\n            maxlength = max(maxlength,dp[i]); //update maxlength\\n        }\\n        \\n        return maxlength;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        //array to store max length subsequence till that place\n        vector<int> dp(nums.size(),0);\n        int maxlength = 0;//to store maxlength of subsequence\n        dp[0] = 1;//length will be 1 at first index \n        for(int i = 0;i<nums.size() i++){\n            int currentMaxLen = 0; //to store maxlength at till this index\n            for(int j = 0;j<i;j++){\n                // only check when the subsequence is increasing\n                if(nums[i]>nums[j]){\n                    if(currentMaxLen<dp[j]){\n                        currentMaxLen = dp[j]; //update currentMaxLen accordingly\n                    }\n                }\n            }\n            dp[i] = currentMaxLen + 1; //set the maxLength till ith index, which will be maxlenth so far + 1\n            maxlength = max(maxlength,dp[i]); //update maxlength\n        }\n        \n        return maxlength;\n    }\n};\n",
        "explanations": "\nIn the for loop \"for(int i = 0;i<nums.size() i++)\", the semicolon (;) is missing.\n"
    },
    {
        "slug": "largest-rectangle-in-histogram",
        "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
        "examples": [
            "Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.",
            "Input: heights = [2,4]\nOutput: 4"
        ],
        "constraints": "1 <= heights.length <= 105\n0 <= heights[i] <= 104",
        "release_time": 1691746356,
        "oracle_code": "#include<stack>\n \nclass Solution {\npublic:\n    //function to find the index of next smallerNumber\n    vector<int> nextSmallNumberIndex(vector<int>& v){\n        int n=v.size(),num=0;\n        vector<int> ans(n);\n        stack<int> s;\n        s.push(-1);\n        for(int i=n-1;i>=0;i--){\n            num=v[i];\n            while(s.top()!=-1 && v[s.top()]>=num){\n                s.pop();\n            }\n            ans[i]=s.top();\n            s.push(i);\n        }\n        return ans;\n\n    }\n    //function to find the index of prev smallerNumber\n    vector<int> prevSmallNumberIndex(vector<int>& v){\n        int n=v.size(),num=0;\n        vector<int> ans(n);\n        stack<int> s;\n        s.push(-1);\n        for(int i=0;i<n;i++){\n            num=v[i];\n            while(s.top()!=-1 && v[s.top()]>=num){\n                s.pop();\n            }\n            ans[i]=s.top();\n            s.push(i);\n        }\n        return ans;\n\n    }\n    int largestRectangleArea(vector<int>& heights) {\n        int size=heights.size(),h,l,area=0,curArea;\n        vector<int> next=nextSmallNumberIndex(heights);\n         vector<int> prev=prevSmallNumberIndex(heights);\n         for(int i=0;i<size;i++){\n            h=heights[i];\n            //if index of next smaller number is -1 we change its value to size \n            if(next[i]==-1)next[i]=size;\n            l=next[i]-prev[i]-1;\n            curArea=l*h;\n             area=max(area,curArea);\n\n        }\n        return area;\n        \n    }\n};",
        "content": "\\n\\n# Code\\n```\\n#include<stack>\\n \\nclass Solution {\\npublic:\\n    //function to find the index of next smallerNumber\\n    vector<int> nextSmallNumberIndex(vector<int>& v){\\n        int n=v.size(),num=0;\\n        vector<int> ans(n);\\n        stack<int> s;\\n        s.push(-1);\\n        for(int i=n-1;i>=0;i--){\\n            num=v[i];\\n            while(s.top()!=-1 && v[s.top()]>=num){\\n                s.pop();\\n            }\\n            ans[i]=s.top();\\n            s.push(i);\\n        }\\n        return ans;\\n\\n    }\\n    //function to find the index of prev smallerNumber\\n    vector<int> prevSmallNumberIndex(vector<int>& v){\\n        int n=v.size(),num=0;\\n        vector<int> ans(n);\\n        stack<int> s;\\n        s.push(-1);\\n        for(int i=0;i<n;i++){\\n            num=v[i];\\n            while(s.top()!=-1 && v[s.top()]>=num){\\n                s.pop();\\n            }\\n            ans[i]=s.top();\\n            s.push(i);\\n        }\\n        return ans;\\n\\n    }\\n    int largestRectangleArea(vector<int>& heights) {\\n        int size=heights.size(),h,l,area=0,curArea;\\n        vector<int> next=nextSmallNumberIndex(heights);\\n         vector<int> prev=prevSmallNumberIndex(heights);\\n         for(int i=0;i<size;i++){\\n            h=heights[i];\\n            //if index of next smaller number is -1 we change its value to size \\n            if(next[i]==-1)next[i]=size;\\n            l=next[i]-prev[i]-1;\\n            curArea=l*h;\\n             area=max(area,curArea);\\n\\n        }\\n        return area;\\n        \\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\n#include<stack>\n\nclass Solution {\npublic:\n    //function to find the index of next smallerNumber\n    vector<int> nextSmallNumberIndex(vector<int>& v){\n        int n=v.size(),num=0;\n        vector<int> ans(n);\n        stack<int> s;\n        s.push(-1);\n        for(int i=n-1;i>=0;i--){\n            num=v[i];\n            while(s.top()!=-1 && v[s.top()]>=num){\n                s.pop();\n            }\n            ans[i]=s.top());\n            s.push(i);\n        }\n        return ans;\n\n    }\n    //function to find the index of prev smallerNumber\n    vector<int> prevSmallNumberIndex(vector<int>& v){\n        int n=v.size(),num=0;\n        vector<int> ans(n);\n        stack<int> s;\n        s.push(-1);\n        for(int i=0;i<n;i++){\n            num=v[i];\n            while(s.top()!=-1 && v[s.top()]>=num){\n                s.pop();\n            }\n            ans[i]=s.top();\n            s.push(i);\n        }\n        return ans;\n\n    }\n    int largestRectangleArea(vector<int>& heights) {\n        int size=heights.size(),h,l,area=0,curArea;\n        vector<int> next=nextSmallNumberIndex(heights);\n         vector<int> prev=prevSmallNumberIndex(heights);\n         for(int i=0;i<size;i++){\n            h=heights[i];\n            //if index of next smaller number is -1 we change its value to size \n            if(next[i]==-1)next[i]=size;\n            l=next[i]-prev[i]-1;\n            curArea=l*h;\n             area=max(area,curArea);\n\n        }\n        return area;\n        \n    }\n};\n",
        "explanations": "\nThe closing parenthesis on line 14, ans[i]=s.top()), is misplaced causing syntax error.\n"
    },
    {
        "slug": "count-pairs-with-xor-in-a-range",
        "description": "Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\nA nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.",
        "examples": [
            "Input: nums = [1,4,2,7], low = 2, high = 6\r\nOutput: 6\r\nExplanation: All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5",
            "Input: nums = [9,8,4,2,1], low = 5, high = 14\r\nOutput: 8\r\nExplanation: All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n\u00a0   - (0, 3): nums[0] XOR nums[3] = 11\r\n\u00a0   - (0, 4): nums[0] XOR nums[4] = 8\r\n\u00a0   - (1, 2): nums[1] XOR nums[2] = 12\r\n\u00a0   - (1, 3): nums[1] XOR nums[3] = 10\r\n\u00a0   - (1, 4): nums[1] XOR nums[4] = 9\r\n\u00a0   - (2, 3): nums[2] XOR nums[3] = 6\r\n\u00a0   - (2, 4): nums[2] XOR nums[4] = 5"
        ],
        "constraints": "1 <= nums.length <= 2 * 104\n1 <= nums[i] <= 2 * 104\n1 <= low <= high <= 2 * 104",
        "release_time": 1682942883,
        "oracle_code": "class Solution {\npublic:\nstruct Node{\n    Node* links[2];\n    int cnt=0;\n    void put(int ind,Node* node)\n    {\n        links[ind]=node;\n    }\n    bool isContains(int ind)\n    {\n        return links[ind]!=NULL;\n    }\n    Node* get(int ind)\n    {\n        return links[ind];\n    }\n    void incCount()\n    {\n        cnt++;\n    }\n    int count()\n    {\n        return cnt;\n    }\n};\nclass Trie\n{\n    public:\n    Node * root;\n      Trie()\n      {\n       root=new Node();\n      }\n      void insert(int num)\n      {\n          Node* node=root;\n          for (int i=14;i>=0;i--)\n          {\n              int bit=((num>>i)&1);\n              if (!node->isContains(bit))\n              {\n                 node->put(bit,new Node());\n              }\n              node=node->get(bit);\n              node->incCount();\n          }\n      }\n      int getCount(Node* root)\n      {\n          if (root==NULL) return 0;\n          return root->count();\n      }\n      int rec(Node* root,int index,int high,int val)\n      {\n          if (root==NULL) return 0;\n           if (index<0) return root->count();\n          int valBit=((val>>index)&1);\n          int highBit=((high>>index)&1);\n          if(valBit==1)\n          {\n            if (highBit==1) return rec(root->get(0),index-1,high,val) + getCount(root->get(1));\n            else return rec(root->get(1),index-1,high,val);\n          }\n          else\n          {\n             if (highBit==1) return rec(root->get(1),index-1,high,val)+getCount(root->get(0));\n             else return rec(root->get(0),index-1,high,val);\n          }\n      }\n\n};\n    int countPairs(vector<int>& nums, int low, int high) {\n        int ans=0;\n        Trie * trie=new Trie();\n        for (auto & it:nums)\n        {\n           ans+=trie->rec(trie->root,14,high,it);\n           ans-=trie->rec(trie->root,14,low-1,it);\n           trie->insert(it);\n        } \n        return ans;\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\nstruct Node{\\n    Node* links[2];\\n    int cnt=0;\\n    void put(int ind,Node* node)\\n    {\\n        links[ind]=node;\\n    }\\n    bool isContains(int ind)\\n    {\\n        return links[ind]!=NULL;\\n    }\\n    Node* get(int ind)\\n    {\\n        return links[ind];\\n    }\\n    void incCount()\\n    {\\n        cnt++;\\n    }\\n    int count()\\n    {\\n        return cnt;\\n    }\\n};\\nclass Trie\\n{\\n    public:\\n    Node * root;\\n      Trie()\\n      {\\n       root=new Node();\\n      }\\n      void insert(int num)\\n      {\\n          Node* node=root;\\n          for (int i=14;i>=0;i--)\\n          {\\n              int bit=((num>>i)&1);\\n              if (!node->isContains(bit))\\n              {\\n                 node->put(bit,new Node());\\n              }\\n              node=node->get(bit);\\n              node->incCount();\\n          }\\n      }\\n      int getCount(Node* root)\\n      {\\n          if (root==NULL) return 0;\\n          return root->count();\\n      }\\n      int rec(Node* root,int index,int high,int val)\\n      {\\n          if (root==NULL) return 0;\\n           if (index<0) return root->count();\\n          int valBit=((val>>index)&1);\\n          int highBit=((high>>index)&1);\\n          if(valBit==1)\\n          {\\n            if (highBit==1) return rec(root->get(0),index-1,high,val) + getCount(root->get(1));\\n            else return rec(root->get(1),index-1,high,val);\\n          }\\n          else\\n          {\\n             if (highBit==1) return rec(root->get(1),index-1,high,val)+getCount(root->get(0));\\n             else return rec(root->get(0),index-1,high,val);\\n          }\\n      }\\n\\n};\\n    int countPairs(vector<int>& nums, int low, int high) {\\n        int ans=0;\\n        Trie * trie=new Trie();\\n        for (auto & it:nums)\\n        {\\n           ans+=trie->rec(trie->root,14,high,it);\\n           ans-=trie->rec(trie->root,14,low-1,it);\\n           trie->insert(it);\\n        } \\n        return ans;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\nstruct Node{\n    Node* links[2];\n    int cnt=0;\n    void put(int ind,Node* node)\n    {\n        links[ind]=node;\n    }\n    bool isContains(int ind)\n    {\n        return links[ind]!=NULL;\n    }\n    Node* get(int ind)\n    {\n        return links[ind] ;\n    }\n    void incCount()\n    {\n        cnt++;\n    }\n    int count()\n    {\n        return cnt;\n    }\n};\nclass Trie\n{\n    public:\n    Node * root;\n      Trie()\n      {\n       root=new Node();\n      }\n      void insert(int num)\n      {\n          Node* node=root;\n          for (int i=14;i>0;i--)\n          {\n              int bit=((num>>i)&1);\n              if (!node->isContains(bit))\n              {\n                 node->put(bit,new Node());\n              }\n              node=node->get(bit);\n              node->incCount();\n          }\n      }\n      int getCount(Node* root)\n      {\n          if (root==NULL) return 0;\n          return root->count();\n      }\n      int rec(Node* root,int index,int high,int val)\n      {\n          if (root==NULL) return 0;\n           if (index<0) return root->count();\n          int valBit=((val>>index)&1);\n          int highBit=((high>>index)&1);\n          if(valBit==1)\n          {\n            if (highBit==1) return rec(root->get(0),index-1,high,val) + getCount(root->get(1));\n            else return rec(root->get(1),index-1,high,val);\n          }\n          else\n          {\n             if (highBit==1) return rec(root->get(1),index-1,high,val)+getCount(root->get(0));\n             else return rec(root->get(0),index-1,high,val);\n          }\n      }\n\n};\nint countPairs(vector<int>& nums, int low, int high) {\n        int ans=0;\n        Trie * trie=new Trie();\n        for (auto & it:nums)\n        {\n           ans+=trie->rec(trie->root,14,high,it);\n           ans-=trie->rec(trie->root,14,low-1,it);\n           trie->insert(it);\n        } \n        return ans;\n    }\n};\n",
        "explanations": "\nIn the insert function, for loop condition is incorrect causing an off-by-one error.\n"
    },
    {
        "slug": "valid-anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "examples": [
            "Input: s = \"anagram\", t = \"nagaram\"\nOutput: true",
            "Input: s = \"rat\", t = \"car\"\nOutput: false"
        ],
        "constraints": "1 <= s.length, t.length <= 5 * 104\ns and t consist of lowercase English letters.",
        "release_time": 1679637788,
        "oracle_code": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.length()!=t.length())\n            return false;\n        vector<int> freq(26, 0);\n        for(int i =0; i<s.length(); i++){\n            freq[s[i]-'a']++;\n            freq[t[i]-'a']--;\n        }\n        for(int i =0; i<freq.size(); i++){\n            if(freq[i]!=0)\n                return false;\n        }\n        return true;\n    }\n};",
        "content": "# Intuition\\nTo solve this problem we will count occurence of each character in both strings and if they are same then both strings are anagram of each other.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nWe can use vector of length 26 to track the occurences of character. \\nIf the size of both string is different then they can\\'t be anagram of each other, so we are checking this first.We loop through each character in both strings and increment the frequency of the corresponding letter in s and decrement the frequency of the corresponding letter in t.\\nThen we loop through freq array if all the elements are 0, if all the elements are 0 this means the two strings are anagram and if not then these things are not anagram of each othe.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n), n is the size of s or t string.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isAnagram(string s, string t) {\\n        if(s.length()!=t.length())\\n            return false;\\n        vector<int> freq(26, 0);\\n        for(int i =0; i<s.length(); i++){\\n            freq[s[i]-\\'a\\']++;\\n            freq[t[i]-\\'a\\']--;\\n        }\\n        for(int i =0; i<freq.size(); i++){\\n            if(freq[i]!=0)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.length()!=t.length())\n            return false\n        vector<int> freq(26, 0);\n        for(int i =0; i<s.length(); i++){\n            freq[s[i]-'a']++;\n            freq[t[i]-'a']--;\n        }\n        for(int i =0; i<freq.size(); i++){\n            if(freq[i]!=0)\n                return false;\n        }\n        return true;\n    }\n};\n",
        "explanations": "\nThe semicolon is missing after return statement in the if condition checking string lengths.\n"
    },
    {
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",
        "examples": [
            "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
            "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 107\nroot is a binary search tree.\n1 <= val <= 107",
        "release_time": 1687509988,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* searchBST(TreeNode* root, int val) {\\n       if(root==NULL) \\n       return NULL;\\n       if(root->val==val)\\n       {\\n           return root;\\n       }\\n       if(root->val>val){\\n          return  searchBST(root->left,val);\\n       }\\n        return searchBST(root->right,val);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root=NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};\n",
        "explanations": "\nThe code mistakenly assigns root to NULL rather than comparing root to NULL.\n"
    },
    {
        "slug": "factorial-trailing-zeroes",
        "description": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.",
        "examples": [
            "Input: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.",
            "Input: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.",
            "Input: n = 0\nOutput: 0"
        ],
        "constraints": "0 <= n <= 104",
        "release_time": 1682961619,
        "oracle_code": "class Solution {\npublic:\n    unordered_map<long long int,long long int>mp;\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--)\n         fun(i);\n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    unordered_map<long long int,long long int>mp;\\n    int trailingZeroes(int n) {\\n        for(int i=n;i>=1;i--)\\n         fun(i);\\n         \\n\\t\\t return min(mp[2],mp[5]); \\n    }\\n     void fun(int n)\\n    {\\n         for(int i=2;i*i<=n;i++)\\n         {\\n         \\twhile((n%i) == 0)\\n         \\t{\\n         \\t    mp[i]++;\\n\\t\\t\\t\\tn = n / i;\\t\\n\\t\\t\\t}\\n\\t\\t }\\n\\t\\t if(n > 1)\\n\\t\\t mp[n]++;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    unordered_map<long long int,long long int>mp\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--)\n         fun(i);\n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};\n",
        "explanations": "\nForgot to add a semicolon after declaring unordered_map, causing a syntax error.\n"
    },
    {
        "slug": "find-peak-element",
        "description": "A peak element is an element that is strictly greater than its neighbors.\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -\u221e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\nYou must write an algorithm that runs in O(log n) time.",
        "examples": [
            "Input: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.",
            "Input: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
        ],
        "constraints": "1 <= nums.length <= 1000\n-231 <= nums[i] <= 231 - 1\nnums[i] != nums[i + 1] for all valid i.",
        "release_time": 1692100702,
        "oracle_code": "class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n    int n=nums.size();\n    if(n==1)\n    {\n      return 0;\n    } \n    if(nums[0]>nums[1])\n    {\n      return 0;\n    }\n    if(nums[n-1]>nums[n-2])\n    {\n      return n-1;\n    }\n    int left=1;\n    int right=n-2;\n    while(left<=right)\n    {\n      int mid=(left+right)/2;\n      if(nums[mid]>nums[mid-1]&& nums[mid]>nums[mid+1])\n      {\n        return mid;\n      }\n      else if(nums[mid]>nums[mid-1])\n      {\n        left=mid+1;\n      }\n      else{\n        right=mid-1;\n      }\n    }\nreturn -1;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPeakElement(vector<int>& nums) {\\n    int n=nums.size();\\n    if(n==1)\\n    {\\n      return 0;\\n    } \\n    if(nums[0]>nums[1])\\n    {\\n      return 0;\\n    }\\n    if(nums[n-1]>nums[n-2])\\n    {\\n      return n-1;\\n    }\\n    int left=1;\\n    int right=n-2;\\n    while(left<=right)\\n    {\\n      int mid=(left+right)/2;\\n      if(nums[mid]>nums[mid-1]&& nums[mid]>nums[mid+1])\\n      {\\n        return mid;\\n      }\\n      else if(nums[mid]>nums[mid-1])\\n      {\\n        left=mid+1;\\n      }\\n      else{\\n        right=mid-1;\\n      }\\n    }\\nreturn -1;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n    int n nums.size();\n    if(n==1)\n    {\n      return 0;\n    } \n    if(nums[0]>nums[1])\n    {\n      return 0;\n    }\n    if(nums[n-1]>nums[n-2])\n    {\n      return n-1;\n    }\n    int left=1;\n    int right=n-2;\n    while(left<=right)\n    {\n      int mid=(left+right)/2;\n      if(nums[mid]>nums[mid-1]&& nums[mid]>nums[mid+1])\n      {\n        return mid;\n      }\n      else if(nums[mid]>nums[mid-1])\n      {\n        left=mid+1;\n      }\n      else{\n        right=mid-1;\n      }\n    }\nreturn -1;\n    }\n};\n",
        "explanations": "\nMissed the colon for the assignment operation in the variable declaration of \"n\".\n"
    },
    {
        "slug": "distance-between-bus-stops",
        "description": "A bus\u00a0has n stops numbered from 0 to n - 1 that form\u00a0a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number\u00a0i and (i + 1) % n.\nThe bus goes along both directions\u00a0i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given\u00a0start\u00a0and destination\u00a0stops.",
        "examples": [
            "Input: distance = [1,2,3,4], start = 0, destination = 1\r\nOutput: 1\r\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.",
            "Input: distance = [1,2,3,4], start = 0, destination = 2\r\nOutput: 3\r\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.",
            "Input: distance = [1,2,3,4], start = 0, destination = 3\r\nOutput: 4\r\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4."
        ],
        "constraints": "1 <= n\u00a0<= 10^4\ndistance.length == n\n0 <= start, destination < n\n0 <= distance[i] <= 10^4",
        "release_time": 1682917175,
        "oracle_code": "class Solution {\npublic:\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\n        int i, dis1=0, dis2=0, j, temp;\n\n        // Swapping the values of start and destination, if destination is smaller than start\n        if(start>destination)\n        {\n            temp = start;\n            start = destination;\n            destination = temp;\n        }\n\n        //Checking Forward distance\n        for(i=start ; i<destination ; i++)\n        {\n            dis1 += distance[i];\n        }\n\n        //Checking Backward distance\n        i = start-1;\n        j = distance.size()-destination+start;\n        while(j>0)\n        {\n            if(i<0)\n            {\n                dis2 += distance[distance.size()+i];\n            }\n            else\n                dis2 += distance[i];\n            i--;\n            j--;\n        }\n\n        // Result\n        if(dis1<dis2)\n            return dis1;\n        return dis2;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\\n        int i, dis1=0, dis2=0, j, temp;\\n\\n        // Swapping the values of start and destination, if destination is smaller than start\\n        if(start>destination)\\n        {\\n            temp = start;\\n            start = destination;\\n            destination = temp;\\n        }\\n\\n        //Checking Forward distance\\n        for(i=start ; i<destination ; i++)\\n        {\\n            dis1 += distance[i];\\n        }\\n\\n        //Checking Backward distance\\n        i = start-1;\\n        j = distance.size()-destination+start;\\n        while(j>0)\\n        {\\n            if(i<0)\\n            {\\n                dis2 += distance[distance.size()+i];\\n            }\\n            else\\n                dis2 += distance[i];\\n            i--;\\n            j--;\\n        }\\n\\n        // Result\\n        if(dis1<dis2)\\n            return dis1;\\n        return dis2;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/07016b53-8ada-4070-aab3-3dbdab28415c_1682917170.9058347.jpeg)\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\n        int i, dis1=0, dis2=0, j, temp;\n\n        // Swapping the values of start and destination, if destination is smaller than start\n        if(start>destination)\n        {\n            temp = start;\n            start = destination;\n            destination = temp;\n        }\n\n        //Checking Forward distance\n        for(i=start ; i<destination ; i++)\n        {\n            dis1 += distance[i];\n        }\n\n        //Checking Backward distance\n        i = start-1;\n        j = distance.size()-destination+start;\n        while(j>0)\n        {\n            if(i<0)\n            {\n                dis2 += distance[distance.size()+i];\n            }\n            else\n                dis2 += distance[i]\n            i--;\n            j--;\n        }\n\n        // Result\n        if(dis1<dis2)\n            return dis1;\n        return dis2;\n    }\n};\n",
        "explanations": "\nThe missing semicolon after \"dis2 += distance[i]\" induces syntax error.\n"
    },
    {
        "slug": "merge-two-binary-trees",
        "description": "You are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.",
        "examples": [
            "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]",
            "Input: root1 = [1], root2 = [1,2]\nOutput: [2,2]"
        ],
        "constraints": "The number of nodes in both trees is in the range [0, 2000].\n-104 <= Node.val <= 104",
        "release_time": 1673784101,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if ( t1 && t2 ) {\n            TreeNode * root = new TreeNode(t1->val + t2->val);\n            root->left = mergeTrees(t1->left, t2->left);\n            root->right = mergeTrees(t1->right, t2->right);\n            return root;\n        } else {\n            return t1 ? t1 : t2;\n        }\n    }\n};",
        "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
        "level": "easy",
        "buggy_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if ( t1 && t2 ) {\n            TreeNode * root = new TreeNode(t1->val + t2->val);\n            root->left = mergeTrees(t1->left, t2->left)\n            root->right = mergeTrees(t1->right, t2->right);\n            return root;\n        } else {\n            return t1 ? t1 : t2;\n        }\n    }\n};\n",
        "explanations": "\nThe missing semicolon after mergeTrees(t1->left, t2->left) causes a compilation error.\n"
    },
    {
        "slug": "minimum-cost-for-tickets",
        "description": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:\n\na 1-day pass is sold for costs[0] dollars,\na 7-day pass is sold for costs[1] dollars, and\na 30-day pass is sold for costs[2] dollars.\n\nThe passes allow that many days of consecutive travel.\n\nFor example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of days.",
        "examples": [
            "Input: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.",
            "Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel."
        ],
        "constraints": "1 <= days.length <= 365\n1 <= days[i] <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i] <= 1000",
        "release_time": 1680003063,
        "oracle_code": "class Solution {\npublic:\n    int helper(vector<int>&costs,vector<int>&days,int ind,vector<int>&dp){\n        if(ind<0){return 0;}\n        if(dp[days[ind]]!=-1){return dp[days[ind]];}\n        int daypoint=costs[0]+helper(costs,days,ind-1,dp);\n        int indweek=upper_bound(days.begin(),days.end(),days[ind]-7)-days.begin();\n        indweek--;\n        int weekpoint=costs[1]+helper(costs,days,indweek,dp);\n        int indmonth=upper_bound(days.begin(),days.end(),days[ind]-30)-days.begin();\n        indmonth--;\n        int monthpoint=costs[2]+helper(costs,days,indmonth,dp);\n        return dp[days[ind]]=min({daypoint,weekpoint,monthpoint});\n    }\n\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        int n=days.size();\n        vector<int>dp(366,-1);\n        return helper(costs,days,n-1,dp);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> apply dp on 365 days..similar to striver soln\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int helper(vector<int>&costs,vector<int>&days,int ind,vector<int>&dp){\\n        if(ind<0){return 0;}\\n        if(dp[days[ind]]!=-1){return dp[days[ind]];}\\n        int daypoint=costs[0]+helper(costs,days,ind-1,dp);\\n        int indweek=upper_bound(days.begin(),days.end(),days[ind]-7)-days.begin();\\n        indweek--;\\n        int weekpoint=costs[1]+helper(costs,days,indweek,dp);\\n        int indmonth=upper_bound(days.begin(),days.end(),days[ind]-30)-days.begin();\\n        indmonth--;\\n        int monthpoint=costs[2]+helper(costs,days,indmonth,dp);\\n        return dp[days[ind]]=min({daypoint,weekpoint,monthpoint});\\n    }\\n\\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\\n        int n=days.size();\\n        vector<int>dp(366,-1);\\n        return helper(costs,days,n-1,dp);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int helper(vector<int>&costs,vector<int>&days,int ind,vector<int>&dp){\n        if(ind<0){return 0;}\n        if(dp[days[ind]]!=-1){return dp[days[ind]];}\n        int daypoint=costs[0]+helper(costs,days,ind-1,dp)\n        int indweek=upper_bound(days.begin(),days.end(),days[ind]-7)-days.begin();\n        indweek--;\n        int weekpoint=costs[1]+helper(costs,days,indweek,dp);\n        int indmonth=upper_bound(days.begin(),days.end(),days[ind]-30)-days.begin();\n        indmonth--;\n        int monthpoint=costs[2]+helper(costs,days,indmonth,dp);\n        return dp[days[ind]]=min({daypoint,weekpoint,monthpoint});\n    }\n\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        int n=days.size();\n        vector<int>dp(366,-1);\n        return helper(costs,days,n-1,dp);\n    }\n};\n",
        "explanations": "\nMissing semicolon at the end of the line calculating daypoint results in a syntax error.\n"
    },
    {
        "slug": "longest-common-prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
        "examples": [
            "Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"",
            "Input: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings."
        ],
        "constraints": "1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
        "release_time": 1692119515,
        "oracle_code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& str) \n    {\n        sort(str.begin(), str.end()); //sorting the array\n        string ans=\"\"; //creating a new empty string to store the common prefixes\n        for(int i=0;i<str[0].length();i++) // max iterations = length of the first string\n        {\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\n                break;\n            ans+=str[0][i]; // concatinate if the characters are matching\n        }\n        return ans;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhen you sort an array, it is enough to check for the common characters of the the first & last string of the sorted vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string longestCommonPrefix(vector<string>& str) \\n    {\\n        sort(str.begin(), str.end()); //sorting the array\\n        string ans=\"\"; //creating a new empty string to store the common prefixes\\n        for(int i=0;i<str[0].length();i++) // max iterations = length of the first string\\n        {\\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\\n                break;\\n            ans+=str[0][i]; // concatinate if the characters are matching\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& str) \n    {\n        sort(str.begin(), str.end()); //sorting the array\n        string ans=\"\"; //creating a new empty string to store the common prefixes\n        for(int i=0;i<str[0].length();i) \n        {\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\n                break;\n            ans+=str[0][i]; // concatinate if the characters are matching\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe for loop syntax is incorrect due to missing increment operator i++, causing infinite loop.\n"
    },
    {
        "slug": "neighboring-bitwise-xor",
        "description": "A 0-indexed array derived with length n is derived by computing the bitwise XOR\u00a0(\u2295) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\n\nIf i = n - 1, then derived[i] = original[i] \u2295 original[0].\nOtherwise, derived[i] = original[i] \u2295 original[i + 1].\n\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\n\nA binary array is an array containing only 0's and 1's",
        "examples": [
            "Input: derived = [1,1,0]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] \u2295 original[1] = 0 \u2295 1 = 1 \nderived[1] = original[1] \u2295 original[2] = 1 \u2295 0 = 1\nderived[2] = original[2] \u2295 original[0] = 0 \u2295 0 = 0",
            "Input: derived = [1,1]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1].\nderived[0] = original[0] \u2295 original[1] = 1\nderived[1] = original[1] \u2295 original[0] = 1",
            "Input: derived = [1,0]\nOutput: false\nExplanation: There is no valid original array that gives derived."
        ],
        "constraints": "n == derived.length\n1 <= n\u00a0<= 105\nThe values in derived\u00a0are either 0's or 1's",
        "release_time": 1687118835,
        "oracle_code": "class Solution {\npublic:\n    bool doesValidArrayExist(vector<int>& derived) {\n        int xoor = 0;\n        for (auto i: derived) xoor ^= i;\n        return !xoor;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    bool doesValidArrayExist(vector<int>& derived) {\\n        int xoor = 0;\\n        for (auto i: derived) xoor ^= i;\\n        return !xoor;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    bool doesValidArrayExist(vector<int>& derived) {\n        int xoor = 0\n        for (auto i: derived) xoor ^= i;\n        return !xoor;\n    }\n};\n",
        "explanations": "\nMissing a semicolon after declaring and initializing the \"xoor\" variable.\n"
    },
    {
        "slug": "find-all-numbers-disappeared-in-an-array",
        "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
        "examples": [
            "Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]",
            "Input: nums = [1,1]\nOutput: [2]"
        ],
        "constraints": "n == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n",
        "release_time": 1687767620,
        "oracle_code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        int i = 0;\n        while (i<n) {\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\n                swap(nums[i], nums[nums[i]-1]);\n            else i++;\n        }\n        \n        vector<int> res;\n        for (int i=0; i<n; i++) {\n            if (nums[i] != i+1) res.push_back(i+1);\n        }\n\n        return res;\n    }\n};",
        "content": "**Swap Sort** can be used in various problems where we have to find the **missing or duplicates values** in array and the array must contain **values in range [1..n]**.\\n```\\nclass Solution {\\npublic:\\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0;\\n        while (i<n) {\\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\\n                swap(nums[i], nums[nums[i]-1]);\\n            else i++;\\n        }\\n        \\n        vector<int> res;\\n        for (int i=0; i<n; i++) {\\n            if (nums[i] != i+1) res.push_back(i+1);\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        int i = 0\n        while (i<n) {\n            if (nums[i] != nums[nums[i]-1] && i != nums[i]-1)\n                swap(nums[i], nums[nums[i]-1]);\n            else i++;\n        }\n        \n        vector<int> res;\n        for (int i=0; i<n; i++) {\n            if (nums[i] != i+1) res.push_back(i+1);\n        }\n\n        return res;\n    }\n};\n",
        "explanations": "\nThe bug is the missing semicolon after int i = 0. This leads to a compile error.\n"
    },
    {
        "slug": "bitwise-and-of-numbers-range",
        "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",
        "examples": [
            "Input: left = 5, right = 7\nOutput: 4",
            "Input: left = 0, right = 0\nOutput: 0",
            "Input: left = 1, right = 2147483647\nOutput: 0"
        ],
        "constraints": "0 <= left <= right <= 231 - 1",
        "release_time": 1689346823,
        "oracle_code": "class Solution {\npublic:\n    int solve(int left , int right){\n        if(left == 0)return 0;\n        int bit1 = log2(left);\n        int bit2 = log2(right);\n        if(bit1 < bit2)return 0;\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \n    }\n    int rangeBitwiseAnd(int left, int right) {\n         return solve(left , right);\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int left , int right){\\n        if(left == 0)return 0;\\n        int bit1 = log2(left);\\n        int bit2 = log2(right);\\n        if(bit1 < bit2)return 0;\\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \\n    }\\n    int rangeBitwiseAnd(int left, int right) {\\n         return solve(left , right);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int solve(int left , int right){\n        if(left == 0) return 0;\n        int bit1 = log2(left);\n        int bit2 log2(right);    \n        if(bit1 < bit2) return 0;\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \n    }\n    int rangeBitwiseAnd(int left, int right) {\n        return solve(left , right);\n    }\n};\n",
        "explanations": "\nIn the solve function, there is no assignment operator for bit2 resulting in a compile error.\n"
    },
    {
        "slug": "arranging-coins",
        "description": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.",
        "examples": [
            "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.",
            "Input: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3."
        ],
        "constraints": "1 <= n <= 231 - 1",
        "release_time": 1670925544,
        "oracle_code": "class Solution {\npublic:\n    int arrangeCoins(int n) {\n        int c=n;\n        long long i=1;\n        if(n==0) return 0;\n        else if(n==1) return 1;\n        while(c>0){\n            i++;\n            c-=i;\n\n        }\n    return i-1;}\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int arrangeCoins(int n) {\\n        int c=n;\\n        long long i=1;\\n        if(n==0) return 0;\\n        else if(n==1) return 1;\\n        while(c>0){\\n            i++;\\n            c-=i;\\n\\n        }\\n    return i-1;}\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int arrangeCoins(int n) {\n        int c=n;\n        long long i=1;\n        if(n==0) return 0;\n        else if(n==1) return 1\n        while(c>0){\n            i++;\n            c-=i;\n\n        }\n    return i-1;}\n};\n",
        "explanations": "\nThe line \"else if(n==1) return 1\" is missing a semicolon at the end.\n"
    },
    {
        "slug": "product-of-array-except-self",
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time and without using the division operation.",
        "examples": [
            "Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]",
            "Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]"
        ],
        "constraints": "2 <= nums.length <= 105\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
        "release_time": 1691071622,
        "oracle_code": "class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int>prefVector(nums.size(),1);\n        vector<int>suffVector(nums.size(),1);\n        int prefPro=1;\n        for(int i=0;i<nums.size();i++){\n            prefVector[i]=prefPro;\n            prefPro*=nums[i];\n        }\n        int suffPro=1;\n        for(int i=nums.size()-1;i>=0;i--){\n            suffVector[i]=suffPro;\n            suffPro*=nums[i];\n        }\n        vector<int>ans(nums.size());\n        for(int i=0;i<nums.size();i++){\n            ans[i]=prefVector[i]*suffVector[i];\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition:\\nwe use two different vectors to store the product of all left elements to that element and another vector to store the product of all right values to that value.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> productExceptSelf(vector<int>& nums) {\\n        vector<int>prefVector(nums.size(),1);\\n        vector<int>suffVector(nums.size(),1);\\n        int prefPro=1;\\n        for(int i=0;i<nums.size();i++){\\n            prefVector[i]=prefPro;\\n            prefPro*=nums[i];\\n        }\\n        int suffPro=1;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            suffVector[i]=suffPro;\\n            suffPro*=nums[i];\\n        }\\n        vector<int>ans(nums.size());\\n        for(int i=0;i<nums.size();i++){\\n            ans[i]=prefVector[i]*suffVector[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int>prefVector(nums.size(),1);\n        vector<int>suffVector(nums.size(),1);\n        int prefPro=1;\n        for(int i=0;i<nums.size();i++)\n            prefVector[i]=prefPro;\n            prefPro*=nums[i];\n        }\n        int suffPro=1;\n        for(int i=nums.size()-1;i>=0;i--){\n            suffVector[i]=suffPro;\n            suffPro*=nums[i];\n        }\n        vector<int>ans(nums.size());\n        for(int i=0;i<nums.size();i++){\n            ans[i]=prefVector[i]*suffVector[i];\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe missing colon bug after the for loop causes prefPro to always multiply by the last element.\n"
    },
    {
        "slug": "frequency-tracker",
        "description": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.\nImplement the FrequencyTracker class.\n\nFrequencyTracker(): Initializes the FrequencyTracker object with an empty array initially.\nvoid add(int number): Adds number to the data structure.\nvoid deleteOne(int number): Deletes one occurrence of number from the data structure. The data structure may not contain number, and in this case nothing is deleted.\nbool hasFrequency(int frequency): Returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.",
        "examples": [
            "Input\n[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]\nOutput\n[null, null, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice",
            "Input\n[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]\nOutput\n[null, null, null, false]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty",
            "Input\n[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]\nOutput\n[null, false, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once"
        ],
        "constraints": "1 <= number <= 105\n1 <= frequency <= 105\nAt most, 2 *\u00a0105\u00a0calls will be made to add, deleteOne, and hasFrequency\u00a0in total.",
        "release_time": 1683432600,
        "oracle_code": "class FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    void add(int number) {\n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    }\n    void deleteOne(int number) {\n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    }\n    bool hasFrequency(int frequency) {\n        if(y[frequency]!=0) return true;\n        return false;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass FrequencyTracker {\\npublic:\\n    unordered_map<int,int> x,y;\\n    void add(int number) {\\n        x[number]++;\\n        if(x[number]!=1) y[x[number]-1]--;\\n        y[x[number]]++;\\n    }\\n    void deleteOne(int number) {\\n        if(x[number]!=0){\\n            x[number]--;\\n            y[x[number]+1]--;\\n            y[x[number]]++;\\n        }\\n    }\\n    bool hasFrequency(int frequency) {\\n        if(y[frequency]!=0) return true;\\n        return false;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    void add(int number) \n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    }\n    void deleteOne(int number) {\n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    }\n    bool hasFrequency(int frequency) {\n        if(y[frequency]!=0) return true;\n        return false;\n    }\n};\n\n",
        "explanations": "\nThe opening brace after the add function declaration is missing, causing a syntax error.\n"
    },
    {
        "slug": "score-after-flipping-matrix",
        "description": "You are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).",
        "examples": [
            "Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39",
            "Input: grid = [[0]]\nOutput: 1"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 20\ngrid[i][j] is either 0 or 1.",
        "release_time": 1688626701,
        "oracle_code": "class Solution {\npublic:\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\n    {\n        for(int i=0; i<grid[0].size(); i++){\n            grid[r][i]=1-grid[r][i];\n        }\n    }\n\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\n        for(int j=0; j<grid.size(); j++){\n            grid[j][c]=1-grid[j][c];\n        }\n    }\n\n    int matrixScore(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\n        for(int i=0; i<n; i++){\n            if(grid[i][0]==0){    \n                fliprow(i,grid);\n            }\n        }\n//traversing and checking which colums have more zeroes than 1, toggling them too\n        for(int j=0; j<m; j++){\n            int cnt0=0;\n            int cnt1=0;\n            for(int i=0; i<n; i++){\n                if(grid[i][j]==0) cnt0++;\n                else cnt1++;\n            }\n            if(cnt0>cnt1){\n                flipcol(j,grid);\n            }\n        }\n//finally calculating the ans\n        int sum=0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j]==1){\n                    sum+= (1<<(m-j-1));\n                }\n            }\n        }\n        return sum;\n        \n\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\\n    {\\n        for(int i=0; i<grid[0].size(); i++){\\n            grid[r][i]=1-grid[r][i];\\n        }\\n    }\\n\\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\\n        for(int j=0; j<grid.size(); j++){\\n            grid[j][c]=1-grid[j][c];\\n        }\\n    }\\n\\n    int matrixScore(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\\n        for(int i=0; i<n; i++){\\n            if(grid[i][0]==0){    \\n                fliprow(i,grid);\\n            }\\n        }\\n//traversing and checking which colums have more zeroes than 1, toggling them too\\n        for(int j=0; j<m; j++){\\n            int cnt0=0;\\n            int cnt1=0;\\n            for(int i=0; i<n; i++){\\n                if(grid[i][j]==0) cnt0++;\\n                else cnt1++;\\n            }\\n            if(cnt0>cnt1){\\n                flipcol(j,grid);\\n            }\\n        }\\n//finally calculating the ans\\n        int sum=0;\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                if(grid[i][j]==1){\\n                    sum+= (1<<(m-j-1));\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\n    {\n        for(int i=0; i<grid[0].size(); i++){\n            grid[r][i]=1-grid[r][i];\n        }\n    }\n\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\n        for(int j=0; j<grid.size(); j++){\n            grid[j][c]=1-grid[j][c];\n        }\n    }\n\n    int matrixScore(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n        for(int i=0; i<n; i++){\n            if(grid[i][0]==0){    \n                fliprow(i,grid);\n            }\n        }\n        for(int j=0; j<m; j++){\n            int cnt0=0;\n            int cnt1=0;\n            for(int i=0; i<n; i++){\n                if(grid[i][j]==0) cnt0++;\n                else cnt1++;\n            }\n            if(cnt0>cnt1){\n                flipcol(j,grid)\n            }\n        }\n        int sum=0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j]==1){\n                    sum+= (1<<(m-j-1));\n                }\n            }\n        }\n        return sum;\n    }\n};\n",
        "explanations": "\nMissing semicolon after the flipcol function call in the matrixScore function.\n"
    },
    {
        "slug": "sort-an-array",
        "description": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.",
        "examples": [
            "Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).",
            "Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessairly unique."
        ],
        "constraints": "1 <= nums.length <= 5 * 104\n-5 * 104 <= nums[i] <= 5 * 104",
        "release_time": 1677690796,
        "oracle_code": "class Solution {\npublic:\n    void merge(int low, int mid, int high, vector<int> &nums) {\n        if (low >= high) \n        return;\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\n        vector<int> sorted(size, 0);\n        while (l <= mid and r <= high)\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];\n        while (l <= mid) \n            sorted[k++] = nums[l++];\n        while (r <= high) \n            sorted[k++] = nums[r++];\n        for (k = 0; k < size; k++)\n            nums[k + low] = sorted[k];\n    }\n\n    void mergeSort(vector<int>& nums, int start, int end){\n        if(start < end){\n            int mid = start + (end - start) / 2;\n            mergeSort(nums, start, mid);\n            mergeSort(nums, mid + 1, end);\n            merge(start, mid, end, nums);\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};",
        "content": "# Approach\\nThis is an implementation of the merge sort algorithm in C++. The merge sort algorithm uses a divide-and-conquer approach to sort a given array by recursively dividing the input array into two halves, sorting them separately, and then merging them back together in the correct order.\\n\\nThe merge function takes in four parameters: low, mid, high, and nums. low and high represent the indices of the start and end of the subarray that needs to be merged, respectively. mid represents the index of the middle element of the subarray. nums is a reference to the vector of integers that needs to be sorted.\\n\\nIn the merge function, a new vector sorted of size high - low + 1 is created to store the sorted subarray. The two halves of the subarray are then compared and merged into sorted using a while loop. Finally, the sorted subarray is copied back into the original array nums using a for loop.\\n\\nThe mergeSort function takes in three parameters: nums, start, and end. nums is a reference to the vector of integers that needs to be sorted. start and end represent the indices of the start and end of the subarray that needs to be sorted, respectively. In the mergeSort function, the input subarray is recursively divided into two halves using mid, and each half is sorted using the mergeSort function. The merge function is then called to merge the two sorted halves back together in the correct order.\\n\\nFinally, the sortArray function takes in a reference to the vector of integers that needs to be sorted and calls the mergeSort function to sort the entire array. It then returns the sorted array.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void merge(int low, int mid, int high, vector<int> &nums) {\\n        if (low >= high) \\n        return;\\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\\n        vector<int> sorted(size, 0);\\n        while (l <= mid and r <= high)\\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];\\n        while (l <= mid) \\n            sorted[k++] = nums[l++];\\n        while (r <= high) \\n            sorted[k++] = nums[r++];\\n        for (k = 0; k < size; k++)\\n            nums[k + low] = sorted[k];\\n    }\\n\\n    void mergeSort(vector<int>& nums, int start, int end){\\n        if(start < end){\\n            int mid = start + (end - start) / 2;\\n            mergeSort(nums, start, mid);\\n            mergeSort(nums, mid + 1, end);\\n            merge(start, mid, end, nums);\\n        }\\n    }\\n\\n    vector<int> sortArray(vector<int>& nums) {\\n        mergeSort(nums, 0, nums.size()-1);\\n        return nums;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void merge(int low, int mid, int high, vector<int> &nums) {\n        if (low >= high) \n        return;\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\n        vector<int> sorted(size, 0);\n        while (l <= mid and r <= high)\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] nums[r++];\n        while (l <= mid) \n            sorted[k++] = nums[l++];\n        while (r <= high) \n            sorted[k++] = nums[r++];\n        for (k = 0; k < size; k++)\n            nums[k + low] = sorted[k];\n    }\n\n    void mergeSort(vector<int>& nums, int start, int end){\n        if(start < end){\n            int mid = start + (end - start) / 2;\n            mergeSort(nums, start, mid);\n            mergeSort(nums, mid + 1, end);\n            merge(start, mid, end, nums);\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};\n",
        "explanations": "\nSyntax error due to missing colon in ternary (?:) operator, breaking compilation.\n"
    },
    {
        "slug": "array-partition",
        "description": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.",
        "examples": [
            "Input: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.",
            "Input: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
        ],
        "constraints": "1 <= n <= 104\nnums.length == 2 * n\n-104 <= nums[i] <= 104",
        "release_time": 1683568397,
        "oracle_code": "class Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int sum=0;\n        for(int i=0;i<nums.size();i+=2)\n            sum+=nums[i];\n        return sum;\n    }\n};",
        "content": "# Intuition\\n  To maximise sum, ***try to group larger number together***-the only way   to do so is by sorting.\\n# Approach\\n 1. Sort the given vector.\\n\\n 2. Sum first number i.e min from a pair - to do so *increment counter by 2*, by doing so you will always lend into smallest number of a pair \\n# Complexity\\n- Time complexity: O(NlogN)\\n\\n- Space complexity: O(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int arrayPairSum(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        int sum=0;\\n        for(int i=0;i<nums.size();i+=2)\\n            sum+=nums[i];\\n        return sum;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic\n    int arrayPairSum(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int sum=0;\n        for(int i=0;i<nums.size();i+=2)\n            sum+=nums[i];\n        return sum;\n    }\n};\n",
        "explanations": "\nMissing a colon after 'public' - it should be 'public:' not 'public'\n"
    },
    {
        "slug": "final-value-of-variable-after-performing-operations",
        "description": "There is a programming language with only four operations and one variable X:\n\n++X and X++ increments the value of the variable X by 1.\n--X and X-- decrements the value of the variable X by 1.\n\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.",
        "examples": [
            "Input: operations = [\"--X\",\"X++\",\"X++\"]\nOutput: 1\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.",
            "Input: operations = [\"++X\",\"++X\",\"X++\"]\nOutput: 3\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.",
            "Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\nOutput: 0\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."
        ],
        "constraints": "1 <= operations.length <= 100\noperations[i] will be either \"++X\", \"X++\", \"--X\", or \"X--\".",
        "release_time": 1690653502,
        "oracle_code": "class Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int x = 0;\n        for (auto& operation : operations) {\n            if (operation[1] == '+') x++;\n            else x--;\n        }\n        return x;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int finalValueAfterOperations(vector<string>& operations) {\\n        int x = 0;\\n        for (auto& operation : operations) {\\n            if (operation[1] == \\'+\\') x++;\\n            else x--;\\n        }\\n        return x;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int x = 0;\n        for (auto& operation operations) {\n            if (operation[1] == '+') x++;\n            else x--;\n        }\n        return x;\n    }\n};\n",
        "explanations": "\nThe colon (\" : \") is missing in the range based for loop causing a compile error.\n"
    },
    {
        "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "description": "A critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any\u00a0two distinct critical points and maxDistance is the maximum distance between any\u00a0two distinct critical points. If there are fewer than two critical points, return [-1, -1].",
        "examples": [
            "Input: head = [3,1]\nOutput: [-1,-1]\nExplanation: There are no critical points in [3,1].",
            "Input: head = [5,3,1,2,5,1,2]\nOutput: [1,3]\nExplanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.",
            "Input: head = [1,3,2,2,3,2,2,2,7]\nOutput: [3,3]\nExplanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."
        ],
        "constraints": "The number of nodes in the list is in the range [2, 105].\n1 <= Node.val <= 105",
        "release_time": 1680722545,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n        ios_base::sync_with_stdio(false);\n if(head==NULL || head->next==NULL ||head->next->next==NULL){\n     return {-1,-1};\n }\n        ListNode* temp2=head->next;\n        ListNode* temp3=head->next->next;\n      vector<int>v;\n      int i=2;\n      while(temp3){\n          if((head->val<temp2->val)&&(temp3->val<temp2->val)){\n              v.push_back(i);\n          }\n          else if((head->val>temp2->val)&&(temp3->val>temp2->val)){\n              v.push_back(i);\n          }\n          i++;\n          head=head->next;\n          temp2=temp2->next;\n          temp3=temp3->next;\n      }\n      if(v.size()<2){\n           return {-1,-1};\n      }\n      int mini=INT_MAX;\n      for(int i=1;i<v.size();i++){\n          mini=min(mini,(v[i]-v[i-1]));\n      }\n        return {mini,(v[v.size()-1]-v[0])};\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhen faced with a problem involving linked lists, the first intuition should be to think about how to traverse the list efficiently to extract the required information.\\n\\nIn the case of this problem, the required information is the minimum and maximum distance between any two critical points in the list. A critical point is defined as a node where the value is either the maximum or minimum among its adjacent nodes.\\n\\nTo solve this problem, we need to traverse the list and identify the critical points. Once we have the critical points, we can calculate the distances between them and find the minimum and maximum distances.\\n\\nTherefore, the first intuition for this problem should be to think about how to traverse the list and identify critical points efficiently. We can then use this information to calculate the minimum and maximum distances between critical points.\\n\\n\\n\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code first checks if the list has at least three nodes, as it is not possible to have a critical point with less than two adjacent nodes. If the list does not meet this condition, the function returns {-1,-1}.\\n\\nThen, the code initializes three pointers, head, temp2, and temp3. The head pointer is used to traverse the list, while temp2 and temp3 are used to check if the current node is a critical point. The i variable is also initialized to 2, as the first two nodes are not considered critical points.\\n\\nNext, the code enters a loop that traverses the list using the temp3 pointer. For each node, the code checks if it is a critical point by comparing its value to the values of its adjacent nodes. If it is a critical point, the current value of i is pushed to a vector v.\\n\\nAfter the loop finishes, the code checks if there are at least two critical points in the list. If there are less than two, the function returns {-1,-1}.\\n\\nIf there are at least two critical points, the code calculates the minimum and maximum distances between adjacent critical points. The minimum distance is the minimum difference between the indices of adjacent critical points in the v vector, and the maximum distance is the difference between the indices of the first and last elements in the v vector.\\n\\nFinally, the function returns a vector containing the minimum and maximum distances as its two elements.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this code is O(n), where n is the length of the input singly-linked list. This is because the code only traverses the list once in the while loop, and performs constant time operations (comparisons, pointer assignments, and vector operations) for each node. The vector operations inside the loop take constant time on average, as the vector is not resized during the loop. Therefore, the overall time complexity of the code is O(n).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this code is O(1) if we ignore the space used by the input linked list. The code only uses a constant amount of extra space to store three pointers (head, temp2, temp3) and a vector v to store the indices of critical points. The size of v is proportional to the number of critical points in the list, which is at most n-2 (where n is the length of the list), as there can be at most one critical point per node except for the first and last nodes. Therefore, the size of v is bounded by O(n), but since the space used by v is not a function of the input size, we consider it as a constant space usage. Therefore, the overall space complexity of the code is O(1).\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\\n        ios_base::sync_with_stdio(false);\\n if(head==NULL || head->next==NULL ||head->next->next==NULL){\\n     return {-1,-1};\\n }\\n        ListNode* temp2=head->next;\\n        ListNode* temp3=head->next->next;\\n      vector<int>v;\\n      int i=2;\\n      while(temp3){\\n          if((head->val<temp2->val)&&(temp3->val<temp2->val)){\\n              v.push_back(i);\\n          }\\n          else if((head->val>temp2->val)&&(temp3->val>temp2->val)){\\n              v.push_back(i);\\n          }\\n          i++;\\n          head=head->next;\\n          temp2=temp2->next;\\n          temp3=temp3->next;\\n      }\\n      if(v.size()<2){\\n           return {-1,-1};\\n      }\\n      int mini=INT_MAX;\\n      for(int i=1;i<v.size();i++){\\n          mini=min(mini,(v[i]-v[i-1]));\\n      }\\n        return {mini,(v[v.size()-1]-v[0])};\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n        ios_base::sync_with_stdio(false);\n if(head==NULL || head->next==NULL ||head->next->next==NULL){\n     return {-1,-1};\n }\n        ListNode* temp2=head->next;\n        ListNode* temp3=head->next-next;\n      vector<int>v;\n      int i=2;\n      while(temp3){\n          if((head->val<temp2->val)&&(temp3->val<temp2->val)){\n              v.push_back(i);\n          }\n          else if((head->val>temp2->val)&&(temp3->val>temp2->val)){\n              v.push_back(i);\n          }\n          i++;\n          head=head;\n          temp2=temp2.next;\n          temp3=temp3.next;\n      }\n      if(v.size()<2){\n           return {-1,-1};\n      }\n      int mini=INT_MAX;\n      for(int i=1;i<v.size();i++){\n          mini=min(mini,(v[i]-v[i-1]));\n      }\n        return {mini,(v[v.size()-1]-v[0])};\n    }\n};\n",
        "explanations": "\nThe bug is caused by the incorrect reference to \"next\" pointer in line \"ListNode* temp3=head->next-next;\" where a colon is missing.\n"
    },
    {
        "slug": "is-graph-bipartite",
        "description": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n\nThere are no self-edges (graph[u] does not contain u).\nThere are no parallel edges (graph[u] does not contain duplicate values).\nIf v is in graph[u], then u is in graph[v] (the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.",
        "examples": [
            "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.",
            "Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}."
        ],
        "constraints": "graph.length == n\n1 <= n <= 100\n0 <= graph[u].length < n\n0 <= graph[u][i] <= n - 1\ngraph[u]\u00a0does not contain\u00a0u.\nAll the values of graph[u] are unique.\nIf graph[u] contains v, then graph[v] contains u.",
        "release_time": 1684525813,
        "oracle_code": "class Solution {\npublic:\n    //graph coloring\n\n    //flag variable, to be turned on when an error of two neighbouring nodes having same colour is detected\n    bool flag = false;\n\n    //dfs traversal\n    void dfs(int ind, vector<vector<int>>& graph, vector<int>& color, int currcolor)\n    {\n\n        //color the current node\n        color[ind]=currcolor;\n\n\n        for(auto it: graph[ind])\n        {\n\n            //if a neighbour node is not coloured yet then color it with opposite color \n            if(color[it] == 0) dfs(it, graph, color, currcolor*(-1));\n\n            //if a neighbour node is already coloured then it should have opposite colour what current node is having right now\n            //else if a neighbour have same colour then making this graph a bipartite is not possible\n            else if(color[it] == currcolor)\n            {\n                flag=true;\n                return;\n            }\n        }\n    }\n    bool isBipartite(vector<vector<int>>& graph) {\n        \n        //no of nodes in graph\n        int n = graph.size();\n        \n        //coloring array\n        vector<int> color(n, 0);\n\n        for(int i=0; i<graph.size(); i++)\n        {\n            //if a uncolored node in encountered then color it and it's corresponding uncoloured neighbouring node\n            if(color[i]==0) dfs(i, graph, color, 1);\n\n            //if flag got turned on then making this graph bipartite is not possible\n            if(flag) return false;\n        }\n\n        return true;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor making a graph bipartite any two of it\\'s adjacent node should come under two different sections.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Denoting two different section as two different colors (here, 1 & -1).\\n- Implementing dfs and start coloring the graph.\\n- Coloring every adjacent node of current node with opposite color of current node.\\n- If two adjacent nodes are encountered with same colour then return false, because in this case making this graph bipartite is not possible.\\n- If whole graph is coloured, then this graph can be bipartite, so return true.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    //graph coloring\\n\\n    //flag variable, to be turned on when an error of two neighbouring nodes having same colour is detected\\n    bool flag = false;\\n\\n    //dfs traversal\\n    void dfs(int ind, vector<vector<int>>& graph, vector<int>& color, int currcolor)\\n    {\\n\\n        //color the current node\\n        color[ind]=currcolor;\\n\\n\\n        for(auto it: graph[ind])\\n        {\\n\\n            //if a neighbour node is not coloured yet then color it with opposite color \\n            if(color[it] == 0) dfs(it, graph, color, currcolor*(-1));\\n\\n            //if a neighbour node is already coloured then it should have opposite colour what current node is having right now\\n            //else if a neighbour have same colour then making this graph a bipartite is not possible\\n            else if(color[it] == currcolor)\\n            {\\n                flag=true;\\n                return;\\n            }\\n        }\\n    }\\n    bool isBipartite(vector<vector<int>>& graph) {\\n        \\n        //no of nodes in graph\\n        int n = graph.size();\\n        \\n        //coloring array\\n        vector<int> color(n, 0);\\n\\n        for(int i=0; i<graph.size(); i++)\\n        {\\n            //if a uncolored node in encountered then color it and it\\'s corresponding uncoloured neighbouring node\\n            if(color[i]==0) dfs(i, graph, color, 1);\\n\\n            //if flag got turned on then making this graph bipartite is not possible\\n            if(flag) return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    //graph coloring\n\n    bool flag = false;\n\n    void dfs(int ind, vector<vector<int>>& graph, vector<int>& color, int currcolor)\n    {\n        color[ind]=currcolor;\n        for(auto it: graph[ind])\n        {\n            if(color[it] == 0) dfs(it, graph, color, currcolor*(-1));\n            else if(color[it] = currcolor) \n            {\n                flag=true;\n                return;\n            }\n        }\n    }\n    bool isBipartite(vector<vector<int>>& graph) {\n        \n        int n = graph.size();\n        vector<int> color(n, 0);\n\n        for(int i=0; i<graph.size(); i++)\n        {\n            if(color[i]==0) dfs(i, graph, color, 1);\n            if(flag) return false;\n        }\n\n        return true;\n    }\n};\n",
        "explanations": "\nIn the dfs function, the equality check (==) is replaced by an assignment (=).\n"
    },
    {
        "slug": "count-stepping-numbers-in-range",
        "description": "Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high].\nA stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\nReturn an integer denoting the count of stepping numbers in the inclusive range [low, high]. \nSince the answer may be very large, return it modulo 109 + 7.\nNote: A stepping number should not have a leading zero.",
        "examples": [
            "Input: low = \"1\", high = \"11\"\nOutput: 10\nExplanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.",
            "Input: low = \"90\", high = \"101\"\nOutput: 2\nExplanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2."
        ],
        "constraints": "1 <= int(low) <= int(high) < 10100\n1 <= low.length, high.length <= 100\nlow and high consist of only digits.\nlow and high don't have any leading zeros.",
        "release_time": 1692204094,
        "oracle_code": "class Solution {\npublic:\n    #define mod 1000000007\n    long long dp[102][10][2][2];\n    long long f(string &r,int n,int pre,int leadingZero,int tight){\n        if(n==0) return 1;\n        \n        if(dp[n][pre][leadingZero][tight]!=-1) return dp[n][pre][leadingZero][tight];\n        long long up = tight ? (r[r.size()-n]-'0'):9,ans=0;\n        \n        if(leadingZero){\n            for(int i=0;i<=up;i++){\n                ans = (ans + f(r,n-1,i,(i==0),tight&(i==up)))%mod; \n            }\n        } else {\n            if(pre-1>=0 && pre-1<=up) ans = (ans + f(r,n-1,pre-1,0,tight&(pre-1==up)))%mod;\n            if(pre+1<=up) ans = (ans + f(r,n-1,pre+1,0,tight&(pre+1==up)))%mod;\n        }\n        \n        \n        return dp[n][pre][leadingZero][tight]=ans;\n    }\n    int countSteppingNumbers(string low, string high) {\n        int n=high.size();\n        memset(dp,-1,sizeof(dp));\n        long long r= f(high,high.size(),0,1,1);\n        memset(dp,-1,sizeof(dp));\n        for(int i=low.size()-1;i>=0;i--){\n            if((low[i]-'0')>0){\n                low[i]--;break;\n            } else {\n                low[i]='9';\n            }\n        }\n        \n        // cout<<low<<endl;\n        long long l= f(low,low.size(),0,1,1);\n        cout<<l<<\" \"<<r<<endl;\n        return (r-l+mod)%mod;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    #define mod 1000000007\\n    long long dp[102][10][2][2];\\n    long long f(string &r,int n,int pre,int leadingZero,int tight){\\n        if(n==0) return 1;\\n        \\n        if(dp[n][pre][leadingZero][tight]!=-1) return dp[n][pre][leadingZero][tight];\\n        long long up = tight ? (r[r.size()-n]-\\'0\\'):9,ans=0;\\n        \\n        if(leadingZero){\\n            for(int i=0;i<=up;i++){\\n                ans = (ans + f(r,n-1,i,(i==0),tight&(i==up)))%mod; \\n            }\\n        } else {\\n            if(pre-1>=0 && pre-1<=up) ans = (ans + f(r,n-1,pre-1,0,tight&(pre-1==up)))%mod;\\n            if(pre+1<=up) ans = (ans + f(r,n-1,pre+1,0,tight&(pre+1==up)))%mod;\\n        }\\n        \\n        \\n        return dp[n][pre][leadingZero][tight]=ans;\\n    }\\n    int countSteppingNumbers(string low, string high) {\\n        int n=high.size();\\n        memset(dp,-1,sizeof(dp));\\n        long long r= f(high,high.size(),0,1,1);\\n        memset(dp,-1,sizeof(dp));\\n        for(int i=low.size()-1;i>=0;i--){\\n            if((low[i]-\\'0\\')>0){\\n                low[i]--;break;\\n            } else {\\n                low[i]=\\'9\\';\\n            }\\n        }\\n        \\n        // cout<<low<<endl;\\n        long long l= f(low,low.size(),0,1,1);\\n        cout<<l<<\" \"<<r<<endl;\\n        return (r-l+mod)%mod;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n#define mod 1000000007\nlong long dp[102][10][2][2];\nlong long f(string &r,int n,int pre,int leadingZero,int tight){\n    if(n==0) return 1;\n    \n    if(dp[n][pre][leadingZero][tight]!=-1) return dp[n][pre][leadingZero][tight];\n    long long up = tight ? (r[r.size()-n]-'0')9,ans=0;\n    \n    if(leadingZero){\n        for(int i=0;i<=up;i++){\n            ans = (ans + f(r,n-1,i,(i==0),tight&(i==up)))%mod; \n        }\n    } else {\n        if(pre-1>=0 && pre-1<=up) ans = (ans + f(r,n-1,pre-1,0,tight&(pre-1==up)))%mod;\n        if(pre+1<=up) ans = (ans + f(r,n-1,pre+1,0,tight&(pre+1==up)))%mod;\n    }\n    \n    \n    return dp[n][pre][leadingZero][tight]=ans;\n}\nint countSteppingNumbers(string low, string high) {\n    int n=high.size();\n    memset(dp,-1,sizeof(dp));\n    long long r= f(high,high.size(),0,1,1);\n    memset(dp,-1,sizeof(dp));\n    for(int i=low.size()-1;i>=0;i--){\n        if((low[i]-'0')>0){\n            low[i]--;break;\n        } else {\n            low[i]='9';\n        }\n    }\n    \n    \n    long long l= f(low,low.size(),0,1,1);\n    cout<<l<<\" \"<<r<<endl;\n    return (r-l+mod)%mod;\n}\n};\n",
        "explanations": "\nMissed a colon after '0' in the ternary operation leading to unexpected behaviors and compiler errors.\n"
    },
    {
        "slug": "shortest-path-to-get-all-keys",
        "description": "You are given an m x n grid grid where:\n\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.",
        "examples": [
            "Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.",
            "Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6",
            "Input: grid = [\"@Aa\"]\nOutput: -1"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either an English letter, '.', '#', or '@'.\u00a0\nThere is exactly one\u00a0'@'\u00a0in the grid.\nThe number of keys in the grid is in the range [1, 6].\nEach key in the grid is unique.\nEach key in the grid has a matching lock.",
        "release_time": 1688006204,
        "oracle_code": "class Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1 << (grid[i][j] - 'a');\n                    continue;\n                }\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            }\n        }\n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1 << (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                    int newi = i + dir[d][0];\n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1 << (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\\n\\n    int shortestPathAllKeys(vector<string>& grid) {\\n        \\n        int m = grid.size();\\n        int n = grid[0].size();\\n        queue<pair<pair<int, int>, int>> que;\\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\\n        int target = 0;\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    target |= 1 << (grid[i][j] - \\'a\\');\\n                    continue;\\n                }\\n\\n                if (grid[i][j] == \\'@\\') {\\n                    que.emplace(pair<int, int>(i, j), 0);\\n                    mapKey[i][j] = 1;\\n                }\\n            }\\n        }\\n\\n\\n        int step = 0;\\n        while (!que.empty()) {\\n            int size = que.size();\\n            for (int s = 0; s < size; s++) {\\n                int i = que.front().first.first;\\n                int j = que.front().first.second;\\n                int key = que.front().second;\\n                que.pop();\\n                \\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    key |= 1 << (grid[i][j] - \\'a\\');\\n                    if (key == target)\\n                        return step;\\n\\n                    mapKey[i][j] |= 1l << key;\\n                }\\n\\n                for (int d = 0; d < 4; d++) {\\n                    int newi = i + dir[d][0];\\n                    int newj = j + dir[d][1];\\n                    \\n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\\n                        continue;\\n                        \\n                    int val = grid[newi][newj];\\n                    if (val == \\'#\\')\\n                        continue;\\n                        \\n                    if (\\'A\\' <= val && val <= \\'F\\' && (key & (1 << (val - \\'A\\'))) == 0)\\n                        continue;\\n                        \\n                    if (mapKey[newi][newj] & (1l << key))\\n                        continue;\\n                        \\n                     mapKey[newi][newj] |= 1l << key;\\n                     que.emplace(pair<int, int>(newi, newj), key);\\n                }\\n            }\\n            step++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1  (grid[i][j] - 'a');\n                    continue;\n                }\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            }\n        }\n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1  (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                    int newi = i + dir[d][0];\n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1  (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};\n",
        "explanations": "\nThe bug is caused by missing logical shift left operators (<<). This will result in a compiler error.\n"
    },
    {
        "slug": "detect-cycles-in-2d-grid",
        "description": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.",
        "examples": [
            "Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:",
            "Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:",
            "Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 500\ngrid consists only of lowercase English letters.",
        "release_time": 1665809409,
        "oracle_code": "class Solution {\npublic:\n   vector<int> dir = { 0, 1, 0, -1, 0 }; \n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\n    {\n        visited[i][j] = true;\n        for(int d = 0; d < 4; ++d)\n        {\n            int a = i+dir[d];\n            int b = j+dir[d+1];\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\n                    return true;\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        for(int i = 0; i < n; ++i)\n            for(int j = 0; j < m; ++j)\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\n                    return true;\n        return false;\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   vector<int> dir = { 0, 1, 0, -1, 0 }; \\n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\\n    {\\n        visited[i][j] = true;\\n        for(int d = 0; d < 4; ++d)\\n        {\\n            int a = i+dir[d];\\n            int b = j+dir[d+1];\\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\\n                    return true;\\n        }\\n        return false;\\n    }\\n    bool containsCycle(vector<vector<char>>& grid) {\\n        int n = grid.size(), m = grid[0].size();\\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\\n        for(int i = 0; i < n; ++i)\\n            for(int j = 0; j < m; ++j)\\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\\n                    return true;\\n        return false;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n   vector<int> dir = { 0, 1, 0, -1, 0 } \n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\n    {\n        visited[i][j] = true;\n        for(int d = 0; d < 4; ++d)\n        {\n            int a = i+dir[d];\n            int b = j+dir[d+1];\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\n                    return true;\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        for(int i = 0; i < n; ++i)\n            for(int j = 0; j < m; ++j)\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\n                    return true;\n        return false;\n    }\n};\n",
        "explanations": "\nI removed the semicolon at the end of the vector initialization. This leads to a compile error.\n"
    },
    {
        "slug": "rotate-array",
        "description": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.",
        "examples": [
            "Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]",
            "Input: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
        ],
        "constraints": "1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n0 <= k <= 105",
        "release_time": 1681732437,
        "oracle_code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<int> temp(nums.size());\n        for(int i=0;i<n;i++){\n            temp[(i+k)%n]=nums[i];\n        }\n        nums=temp;\n    }\n};",
        "content": "# Approach\\nhere i is of loop which starts form (0,1,2...) k is the value how many times you want to rotate and n is the size of first vector ,and after that new indexes will be generated in our temp vector and we have to put values of nums vector at new indexes . . . \\nlike for first  arr[1,2,3,4,5,6,7]  and k=3     so ,\\ntemp[0 + 3 % 7]=nums[i]\\ntemp[3 % 7]=nums[i]\\ntemp[3] = nums[i]\\n[_ , _ , _ , 1 , _ ,_ , _ ]\\nfor next ,\\ntemp[1 + 3 % 7]=nums[i]\\ntemp[4 % 7]=nums[i]\\ntemp[4] = nums[i]\\n[_ , _ , _ , 1 , 2 ,_ , _ ]   and so on \\ni hope you understand ..\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void rotate(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int> temp(nums.size());\\n        for(int i=0;i<n;i++){\\n            temp[(i+k)%n]=nums[i];\\n        }\\n        nums=temp;\\n    }\\n};\\n```\\n![upvote 1.jpeg](https://assets.leetcode.com/users/images/565d5fa5-1370-44d9-a6b6-0cf06d575aae_1681731352.2608747.jpeg)\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<int> temp(nums.size());\n        for(int i=0;i<n;i++);\n        {\n            temp[(i+k)%n]=nums[i];\n        }\n        nums=temp;\n    }\n};\n",
        "explanations": "\nThe semicolon after for loop causes the loop to do nothing, causing incorrect rotation.\n"
    },
    {
        "slug": "brace-expansion-ii",
        "description": "Under the grammar given below, strings can represent a set of lowercase words. Let\u00a0R(expr)\u00a0denote the set of words the expression represents.\nThe grammar can best be understood through simple examples:\n\nSingle letters represent a singleton set containing that word.\n\t\nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\n\nWhen we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\t\nR(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}\nR(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"} (notice the final set only contains each word at most once)\n\n\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t\nR(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}\nR(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}\n\n\n\nFormally, the three rules for our grammar:\n\nFor every lowercase letter x, we have R(x) = {x}.\nFor expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...\nFor expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) \u00d7 R(e2)}, where + denotes concatenation, and \u00d7 denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.",
        "examples": [
            "Input: expression = \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
            "Input: expression = \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer."
        ],
        "constraints": "1 <= expression.length <= 60\nexpression[i] consists of '{', '}', ','or lowercase English letters.\nThe given\u00a0expression\u00a0represents a set of words based on the grammar given in the description.",
        "release_time": 1677655008,
        "oracle_code": "class Solution {\npublic:\n    \n    vector<string> multiply(vector<string>& a, vector<string>& b){\n        if(a.empty()) return b;\n        if(b.empty()) return a;\n        vector<string> ans;\n        for(auto&i:a){\n            for(auto&j:b) ans.push_back(i+j);\n        }\n        return ans;\n    }\n    \n    vector<string> braceExpansionII(string expression) {\n        vector<string>  res, curr;\n        stack<vector<string>> st;\n        for(auto&x:expression){\n            if(x >= 'a' and x <= 'z'){\n                if(curr.size()) for(auto&i:curr) i += x;\n                else curr.push_back(string(1, x));\n            }\n            else if(x == '{'){\n                st.push(res); st.push(curr);\n                res.clear(), curr.clear();\n            }\n            else if(x == '}'){\n                vector<string> preCurr = st.top(); st.pop();\n                vector<string> preRes = st.top(); st.pop();\n                for(auto&i:curr) res.push_back(i);\n                curr = multiply(preCurr, res);\n                res = preRes;\n            }\n            else if(x == ','){\n                for(auto&i:curr) res.push_back(i);\n                curr.clear();\n            }\n        }\n        for(auto&i:curr) res.push_back(i);\n        sort(res.begin(), res.end());\n        return vector<string>(res.begin(), unique(res.begin(), res.end()));\n    }\n};",
        "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nUse stack to keep track of previous two lists\\n<!-- Describe your approach to solving the problem. -->\\n<!-- \\n# Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    vector<string> multiply(vector<string>& a, vector<string>& b){\\n        if(a.empty()) return b;\\n        if(b.empty()) return a;\\n        vector<string> ans;\\n        for(auto&i:a){\\n            for(auto&j:b) ans.push_back(i+j);\\n        }\\n        return ans;\\n    }\\n    \\n    vector<string> braceExpansionII(string expression) {\\n        vector<string>  res, curr;\\n        stack<vector<string>> st;\\n        for(auto&x:expression){\\n            if(x >= \\'a\\' and x <= \\'z\\'){\\n                if(curr.size()) for(auto&i:curr) i += x;\\n                else curr.push_back(string(1, x));\\n            }\\n            else if(x == \\'{\\'){\\n                st.push(res); st.push(curr);\\n                res.clear(), curr.clear();\\n            }\\n            else if(x == \\'}\\'){\\n                vector<string> preCurr = st.top(); st.pop();\\n                vector<string> preRes = st.top(); st.pop();\\n                for(auto&i:curr) res.push_back(i);\\n                curr = multiply(preCurr, res);\\n                res = preRes;\\n            }\\n            else if(x == \\',\\'){\\n                for(auto&i:curr) res.push_back(i);\\n                curr.clear();\\n            }\\n        }\\n        for(auto&i:curr) res.push_back(i);\\n        sort(res.begin(), res.end());\\n        return vector<string>(res.begin(), unique(res.begin(), res.end()));\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    \n    vector<string> multiply(vector<string>& a, vector<string>& b){\n        if(a.empty()) return b;\n        if(b.empty()) return a;\n        vector<string> ans;\n        for(auto&i:a){\n            for(auto&j:b) ans.push_back(i+j);\n        }\n        return ans\n    }\n    \n    vector<string> braceExpansionII(string expression) {\n        vector<string>  res, curr;\n        stack<vector<string>> st;\n        for(auto&x:expression){\n            if(x >= 'a' and x <= 'z'){\n                if(curr.size()) for(auto&i:curr) i += x;\n                else curr.push_back(string(1, x));\n            }\n            else if(x == '{'){\n                st.push(res); st.push(curr);\n                res.clear(), curr.clear();\n            }\n            else if(x == '}'){\n                vector<string> preCurr = st.top(); st.pop();\n                vector<string> preRes = st.top(); st.pop();\n                for(auto&i:curr) res.push_back(i);\n                curr = multiply(preCurr, res);\n                res = preRes;\n            }\n            else if(x == ','){\n                for(auto&i:curr) res.push_back(i);\n                curr.clear();\n            }\n        }\n        for(auto&i:curr) res.push_back(i);\n        sort(res.begin(), res.end());\n        return vector<string>(res.begin(), unique(res.begin(), res.end()));\n    }\n};\n",
        "explanations": "\nThe function multiply is missing a semi-colon at the end of the return statement.\n"
    },
    {
        "slug": "maximize-grid-happiness",
        "description": "You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.\nThe happiness of each person is calculated as follows:\n\nIntroverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).\nExtroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).\n\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\nThe grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.",
        "examples": [
            "Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\nOutput: 240\nExplanation: Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.",
            "Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\nOutput: 260\nExplanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.",
            "Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\nOutput: 240"
        ],
        "constraints": "1 <= m, n <= 5\n0 <= introvertsCount, extrovertsCount <= min(m * n, 6)",
        "release_time": 1669119358,
        "oracle_code": "//from votrubac\nclass Solution {\npublic:\n   int dp[25][7][7][64][64] = {};\nint nCost(int m, int n, int i, int j, int mask_in, int mask_ex, int d) {\n    int diff = 0, up = (1 << (n - 1));\n    if (j > 0 && (mask_in & 1))\n        diff += d - 30;\n    if (i > 0 && (mask_in & up))\n        diff += d - 30;\n    if (j > 0 && (mask_ex & 1))\n        diff += d + 20;\n    if (i > 0 && (mask_ex & up))\n        diff += d + 20;\n    return diff;\n}\nint dfs(int m, int n, int p, int in, int ex, int mask_in, int mask_ex) {\n    int i = p / n, j = p % n;\n    if (i >= m)\n        return 0;\n    if (dp[p][in][ex][mask_in][mask_ex])\n        return dp[p][in][ex][mask_in][mask_ex] - 1;\n    int n_mask_in = (mask_in << 1) & 63, n_mask_ex = (mask_ex << 1) & 63;\n    int res = dfs(m, n, p + 1, in, ex, n_mask_in, n_mask_ex);\n    if (in > 0) {\n        int diff = 120 + nCost(m, n, i, j, mask_in, mask_ex, -30);\n        res = max(res, diff + dfs(m, n, p + 1, in - 1, ex, n_mask_in + 1, n_mask_ex));\n    }\n    if (ex > 0) {\n        int diff = 40 + nCost(m, n, i, j, mask_in, mask_ex, 20);\n        res = max(res, diff + dfs(m, n, p + 1, in, ex - 1, n_mask_in, n_mask_ex + 1));\n    }\n    dp[p][in][ex][mask_in][mask_ex] = res + 1;\n    return res;\n}\nint getMaxGridHappiness(int m, int n, int introvertsCount, int extrovertsCount) {\n    return dfs(m, n, 0, introvertsCount, extrovertsCount, 0, 0);\n}\n};",
        "content": "\\n\\n# Code\\n```\\n//from votrubac\\nclass Solution {\\npublic:\\n   int dp[25][7][7][64][64] = {};\\nint nCost(int m, int n, int i, int j, int mask_in, int mask_ex, int d) {\\n    int diff = 0, up = (1 << (n - 1));\\n    if (j > 0 && (mask_in & 1))\\n        diff += d - 30;\\n    if (i > 0 && (mask_in & up))\\n        diff += d - 30;\\n    if (j > 0 && (mask_ex & 1))\\n        diff += d + 20;\\n    if (i > 0 && (mask_ex & up))\\n        diff += d + 20;\\n    return diff;\\n}\\nint dfs(int m, int n, int p, int in, int ex, int mask_in, int mask_ex) {\\n    int i = p / n, j = p % n;\\n    if (i >= m)\\n        return 0;\\n    if (dp[p][in][ex][mask_in][mask_ex])\\n        return dp[p][in][ex][mask_in][mask_ex] - 1;\\n    int n_mask_in = (mask_in << 1) & 63, n_mask_ex = (mask_ex << 1) & 63;\\n    int res = dfs(m, n, p + 1, in, ex, n_mask_in, n_mask_ex);\\n    if (in > 0) {\\n        int diff = 120 + nCost(m, n, i, j, mask_in, mask_ex, -30);\\n        res = max(res, diff + dfs(m, n, p + 1, in - 1, ex, n_mask_in + 1, n_mask_ex));\\n    }\\n    if (ex > 0) {\\n        int diff = 40 + nCost(m, n, i, j, mask_in, mask_ex, 20);\\n        res = max(res, diff + dfs(m, n, p + 1, in, ex - 1, n_mask_in, n_mask_ex + 1));\\n    }\\n    dp[p][in][ex][mask_in][mask_ex] = res + 1;\\n    return res;\\n}\\nint getMaxGridHappiness(int m, int n, int introvertsCount, int extrovertsCount) {\\n    return dfs(m, n, 0, introvertsCount, extrovertsCount, 0, 0);\\n}\\n};\\n```",
        "level": "hard",
        "buggy_code": "\n//from votrubac\nclass Solution {\npublic:\n   int dp[25][7][7][64][64] = {};\nint nCost(int m, int n, int i, int j, int mask_in, int mask_ex, int d) {\n    int diff = 0, up = (1 << (n - 1));\n    if (j > 0 && (mask_in & 1))\n        diff += d - 30;\n    if (i > 0 && (mask_in & up))\n        diff += d - 30;\n    if (j > 0 && (mask_ex & 1))\n        diff += d + 20;\n    if (i > 0 && (mask_ex & up))\n        diff += d + 20;\n    return diff\n}\nint dfs(int m, int n, int p, int in, int ex, int mask_in, int mask_ex) {\n    int i = p / n, j = p % n;\n    if (i >= m)\n        return 0;\n    if (dp[p][in][ex][mask_in][mask_ex])\n        return dp[p][in][ex][mask_in][mask_ex] - 1;\n    int n_mask_in = (mask_in << 1) & 63, n_mask_ex = (mask_ex << 1) & 63;\n    int res = dfs(m, n, p + 1, in, ex, n_mask_in, n_mask_ex);\n    if (in > 0) {\n        int diff = 120 + nCost(m, n, i, j, mask_in, mask_ex, -30);\n        res = max(res, diff + dfs(m, n, p + 1, in - 1, ex, n_mask_in + 1, n_mask_ex));\n    }\n    if (ex > 0) {\n        int diff = 40 + nCost(m, n, i, j, mask_in, mask_ex, 20);\n        res = max(res, diff + dfs(m, n, p + 1, in, ex - 1, n_mask_in, n_mask_ex + 1));\n    }\n    dp[p][in][ex][mask_in][mask_ex] = res + 1;\n    return res;\n}\nint getMaxGridHappiness(int m, int n, int introvertsCount, int extrovertsCount) {\n    return dfs(m, n, 0, introvertsCount, extrovertsCount, 0, 0);\n}\n};\n",
        "explanations": "\nMissing semicolon at the end of the return statement in nCost function causes syntax error.\n"
    },
    {
        "slug": "maximum-number-of-removable-characters",
        "description": "You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.",
        "examples": [
            "Input: s = \"abcacb\", p = \"ab\", removable = [3,1,0]\nOutput: 2\nExplanation: After removing the characters at indices 3 and 1, \"abcacb\" becomes \"accb\".\n\"ab\" is a subsequence of \"accb\".\nIf we remove the characters at indices 3, 1, and 0, \"abcacb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2.",
            "Input: s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]\nOutput: 1\nExplanation: After removing the character at index 3, \"abcbddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"abcddddd\".",
            "Input: s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]\nOutput: 0\nExplanation: If you remove the first index in the array removable, \"abc\" is no longer a subsequence."
        ],
        "constraints": "1 <= p.length <= s.length <= 105\n0 <= removable.length < s.length\n0 <= removable[i] < s.length\np is a subsequence of s.\ns and p both consist of lowercase English letters.\nThe elements in removable are distinct.",
        "release_time": 1667447295,
        "oracle_code": "class Solution {\n int rm[100001] = {};\n    bool valid(string &s, string &p, vector<int> &A, int k) {\n        memset(rm, 0, sizeof(rm));\n        for (int i = 0; i < k; ++i) rm[A[i]] = 1; \n        int N = s.size(), M = p.size(), j = 0; \n        for (int i = 0; i < N && j < M; ++i) {\n            if (rm[i] == 1) continue; \n            if (s[i] == p[j]) ++j; \n        }\n        return j == M; \n    }\npublic:\n    int maximumRemovals(string s, string p, vector<int>& A) {\n        int L = 0, R = A.size();\n        while (L <= R) {\n            int M = (L + R) / 2;\n            if (valid(s, p, A, M)) L = M + 1;\n            else R = M - 1;\n        }\n        return R;\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\n int rm[100001] = {};\\n    bool valid(string &s, string &p, vector<int> &A, int k) {\\n        memset(rm, 0, sizeof(rm));\\n        for (int i = 0; i < k; ++i) rm[A[i]] = 1; \\n        int N = s.size(), M = p.size(), j = 0; \\n        for (int i = 0; i < N && j < M; ++i) {\\n            if (rm[i] == 1) continue; \\n            if (s[i] == p[j]) ++j; \\n        }\\n        return j == M; \\n    }\\npublic:\\n    int maximumRemovals(string s, string p, vector<int>& A) {\\n        int L = 0, R = A.size();\\n        while (L <= R) {\\n            int M = (L + R) / 2;\\n            if (valid(s, p, A, M)) L = M + 1;\\n            else R = M - 1;\\n        }\\n        return R;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n int rm[100001] = {};\n    bool valid(string &s, string &p, vector<int> &A, int k) {\n        memset(rm, 0, sizeof(rm));\n        for int i = 0; i < k; ++i) rm[A[i]] = 1; \n        int N = s.size(), M = p.size(), j = 0; \n        for (int i = 0; i < N && j < M; ++i) {\n            if (rm[i] == 1) continue; \n            if (s[i] == p[j]) ++j; \n        }\n        return j == M; \n    }\npublic:\n    int maximumRemovals(string s, string p, vector<int>& A) {\n        int L = 0, R = A.size();\n        while (L <= R) {\n            int M = (L + R) / 2;\n            if (valid(s, p, A, M)) L = M + 1;\n            else R = M - 1;\n        }\n        return R;\n    }\n};\n",
        "explanations": "\nI omitted a parenthesis after \"for\" in the valid function which will not allow the program to compile.\n"
    },
    {
        "slug": "count-good-numbers",
        "description": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\n\nFor example, \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, \"3245\" is not good because 3 is at an even index but is not even.\n\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.",
        "examples": [
            "Input: n = 1\nOutput: 5\nExplanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".",
            "Input: n = 4\nOutput: 400",
            "Input: n = 50\nOutput: 564908303"
        ],
        "constraints": "1 <= n <= 1015",
        "release_time": 1690970857,
        "oracle_code": "class Solution {\npublic:\n    int mod=1e9+7;\n    int binExpo(long long x,long long n){\n        int ans=1;\n        while(n){\n            if(n&1){\n                ans=(ans*x)%mod;\n            }\n            x=(x*x)%mod;\n            n>>=1;\n        }\n        return ans;\n    }\n    int countGoodNumbers(long long n) {\n        long long even=n/2+n%2,odd=n/2;\n        int even_val=binExpo(5,even);\n        int odd_val=binExpo(4,odd);\n        return (1ll*even_val*odd_val)%mod;\n\n        \n    }\n};",
        "content": "Here we can use the concept of binary exponentiation.\\nAs 2^7==2^(0111) in binary.\\nso 2^7=(2^4)*(2^2)*(2^1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mod=1e9+7;\\n    int binExpo(long long x,long long n){\\n        int ans=1;\\n        while(n){\\n            if(n&1){\\n                ans=(ans*x)%mod;\\n            }\\n            x=(x*x)%mod;\\n            n>>=1;\\n        }\\n        return ans;\\n    }\\n    int countGoodNumbers(long long n) {\\n        long long even=n/2+n%2,odd=n/2;\\n        int even_val=binExpo(5,even);\\n        int odd_val=binExpo(4,odd);\\n        return (1ll*even_val*odd_val)%mod;\\n\\n        \\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int mod=1e9+7\n    int binExpo(long long x,long long n){\n        int ans=1;\n        while(n){\n            if(n&1){\n                ans=(ans*x)%mod;\n            }\n            x=(x*x)%mod;\n            n>>=1;\n        }\n        return ans;\n    }\n    int countGoodNumbers(long long n) {\n        long long even=n/2+n%2,odd=n/2;\n        int even_val=binExpo(5,even);\n        int odd_val=binExpo(4,odd);\n        return (1ll*even_val*odd_val)%mod;\n    }\n};\n",
        "explanations": "\nA colon is missing after 'mod=1e9+7', causing a syntax error.\n"
    },
    {
        "slug": "remove-outermost-parentheses",
        "description": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\n\nFor example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.\n\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.",
        "examples": [
            "Input: s = \"(()())(())\"\nOutput: \"()()()\"\nExplanation: \nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".",
            "Input: s = \"(()())(())(()(()))\"\nOutput: \"()()()()(())\"\nExplanation: \nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".",
            "Input: s = \"()()\"\nOutput: \"\"\nExplanation: \nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\"."
        ],
        "constraints": "1 <= s.length <= 105\ns[i] is either '(' or ')'.\ns is a valid parentheses string.",
        "release_time": 1687925926,
        "oracle_code": "class Solution {\npublic:\n    string removeOuterParentheses(string s) {\n        stack<char> st;\n        string res=\"\";\n        for(int i=0;i<s.size();i++){\n            if(s[i]=='(' && st.empty()){\n                st.push(s[i]);\n            }\n            else if(s[i]=='('){\n                st.push(s[i]);\n                res+=s[i];\n            }\n            else{\n                st.pop();\n                if(st.size()){\n                    res+=s[i];\n                }\n            }\n        }\n        return res;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string removeOuterParentheses(string s) {\\n        stack<char> st;\\n        string res=\"\";\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'(\\' && st.empty()){\\n                st.push(s[i]);\\n            }\\n            else if(s[i]==\\'(\\'){\\n                st.push(s[i]);\\n                res+=s[i];\\n            }\\n            else{\\n                st.pop();\\n                if(st.size()){\\n                    res+=s[i];\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string removeOuterParentheses(string s) {\n        stack<char> st;\n        string res=\"\";\n        for(int i=0;i<s.size();i++)\n            if(s[i]=='(' && st.empty())\n                st.push(s[i]);\n            else if(s[i]=='(')\n                st.push(s[i]);\n                res+=s[i];\n            else{\n                st.pop();\n                if(st.size())\n                    res+=s[i];\n                }\n        }\n        return res;\n    }\n};\n",
        "explanations": "\nThe colon is missing after the second 'if' condition, causing the line 'res+=s[i];' to always execute.\n"
    },
    {
        "slug": "most-frequent-even-element",
        "description": "Given an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.",
        "examples": [
            "Input: nums = [0,1,2,2,4,4,1]\nOutput: 2\nExplanation:\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.",
            "Input: nums = [4,4,4,9,2,4]\nOutput: 4\nExplanation: 4 is the even element appears the most.",
            "Input: nums = [29,47,21,41,13,37,25,7]\nOutput: -1\nExplanation: There is no even element."
        ],
        "constraints": "1 <= nums.length <= 2000\n0 <= nums[i] <= 105",
        "release_time": 1673020570,
        "oracle_code": "class Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        int n = nums.size(),i;\n        map<int , int> freq;\n        for(auto x:nums){\n            freq[x]++;\n        }\n        int evefreq=0,ans=-1;\n        for(auto y:freq){\n            if(y.first%2==0 && y.second> evefreq){\n                ans=y.first;\n                evefreq=y.second;\n            }\n        }\n        return ans;\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostFrequentEven(vector<int>& nums) {\\n        int n = nums.size(),i;\\n        map<int , int> freq;\\n        for(auto x:nums){\\n            freq[x]++;\\n        }\\n        int evefreq=0,ans=-1;\\n        for(auto y:freq){\\n            if(y.first%2==0 && y.second> evefreq){\\n                ans=y.first;\\n                evefreq=y.second;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        int n = nums.size(),i;\n        map<int , int> freq;\n        for(auto x:nums)\n            freq[x]++;\n        }\n        int evefreq=0,ans=-1;\n        for(auto y:freq){\n            if(y.first%2==0 && y.second> evefreq){\n                ans=y.first;\n                evefreq=y.second;\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe 'for' loop is not properly terminated with a colon, causing a syntax error.\n"
    },
    {
        "slug": "shortest-path-visiting-all-nodes",
        "description": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.",
        "examples": [
            "Input: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]",
            "Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]"
        ],
        "constraints": "n == graph.length\n1 <= n <= 12\n0 <= graph[i].length <\u00a0n\ngraph[i] does not contain i.\nIf graph[a] contains b, then graph[b] contains a.\nThe input graph is always connected.",
        "release_time": 1684853737,
        "oracle_code": "class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        int n=graph.size();\n        if(n==1) return 0;\n        set<pair<int,int>>vis;\n        queue<pair<int,pair<int,int>>>q;\n        int all=(1<<n)-1;\n        for(int i=0;i<n;i++){\n            int mask=1<<i;\n            q.push({i,{0,mask}});\n            vis.insert({i,mask});\n        }\n        while(!q.empty()){\n            int node=q.front().first;\n            int dist=q.front().second.first;\n            int mask=q.front().second.second;\n            q.pop();\n            for(auto it:graph[node]){\n                int newMask=(mask|(1<<it));\n                if(newMask==all)\n                    return dist+1;\n                else if(vis.count({it,newMask}))\n                    continue;\n                q.push({it,{dist+1,newMask}});\n                vis.insert({it,newMask});\n            }\n        }\n        return 0;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    int shortestPathLength(vector<vector<int>>& graph) {\\n        int n=graph.size();\\n        if(n==1) return 0;\\n        set<pair<int,int>>vis;\\n        queue<pair<int,pair<int,int>>>q;\\n        int all=(1<<n)-1;\\n        for(int i=0;i<n;i++){\\n            int mask=1<<i;\\n            q.push({i,{0,mask}});\\n            vis.insert({i,mask});\\n        }\\n        while(!q.empty()){\\n            int node=q.front().first;\\n            int dist=q.front().second.first;\\n            int mask=q.front().second.second;\\n            q.pop();\\n            for(auto it:graph[node]){\\n                int newMask=(mask|(1<<it));\\n                if(newMask==all)\\n                    return dist+1;\\n                else if(vis.count({it,newMask}))\\n                    continue;\\n                q.push({it,{dist+1,newMask}});\\n                vis.insert({it,newMask});\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph)\n        int n=graph.size();\n        if(n==1) return 0;\n        set<pair<int,int>>vis;\n        queue<pair<int,pair<int,int>>>q;\n        int all=(1<<n)-1;\n        for(int i=0;i<n;i++){\n            int mask=1<<i;\n            q.push({i,{0,mask}});\n            vis.insert({i,mask});\n        }\n        while(!q.empty()){\n            int node=q.front().first;\n            int dist=q.front().second.first;\n            int mask=q.front().second.second;\n            q.pop();\n            for(auto it:graph[node]){\n                int newMask=(mask|(1<<it));\n                if(newMask==all)\n                    return dist+1;\n                else if(vis.count({it,newMask}))\n                    continue;\n                q.push({it,{dist+1,newMask}});\n                vis.insert({it,newMask});\n            }\n        }\n        return 0;\n    }\n};\n",
        "explanations": "\nThe bug is that a colon is missing at the end of function declaration shortestPathLength()\n"
    },
    {
        "slug": "flip-string-to-monotone-increasing",
        "description": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.",
        "examples": [
            "Input: s = \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.",
            "Input: s = \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.",
            "Input: s = \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000."
        ],
        "constraints": "1 <= s.length <= 105\ns[i] is either '0' or '1'.",
        "release_time": 1673915632,
        "oracle_code": "//Memoisation\nclass Solution {\npublic:\n    int solve(int idx,int prev,string &s,vector<vector<int>>& dp){\n        if(idx==s.size()){\n            return 0;\n        }\n        if(dp[idx][prev]!=-1) return dp[idx][prev];\n        if(prev){\n            return dp[idx][prev]=(s[idx]=='0')+solve(idx+1,prev,s,dp);\n        }\n        else{\n            return dp[idx][prev]=min((s[idx]=='1')+solve(idx+1,0,s,dp),(s[idx]=='0')+solve(idx+1,1,s,dp));\n        }\n    }\n    int minFlipsMonoIncr(string s) {\n        vector<vector<int>> dp(s.size(),vector<int>(2,-1));\n        return solve(0,0,s,dp);\n    }\n};",
        "content": "```\\n//Memoisation\\nclass Solution {\\npublic:\\n    int solve(int idx,int prev,string &s,vector<vector<int>>& dp){\\n        if(idx==s.size()){\\n            return 0;\\n        }\\n        if(dp[idx][prev]!=-1) return dp[idx][prev];\\n        if(prev){\\n            return dp[idx][prev]=(s[idx]==\\'0\\')+solve(idx+1,prev,s,dp);\\n        }\\n        else{\\n            return dp[idx][prev]=min((s[idx]==\\'1\\')+solve(idx+1,0,s,dp),(s[idx]==\\'0\\')+solve(idx+1,1,s,dp));\\n        }\\n    }\\n    int minFlipsMonoIncr(string s) {\\n        vector<vector<int>> dp(s.size(),vector<int>(2,-1));\\n        return solve(0,0,s,dp);\\n    }\\n};\\n\\n```\\n```\\n//Tabulation\\nclass Solution {\\npublic:\\n    int minFlipsMonoIncr(string s) {\\n        int n=s.size();\\n        vector<vector<int>> dp(n+1,vector<int>(2,0));\\n        for(int idx=n-1;idx>=0;idx--){\\n            for(int prev=1;prev>=0;prev--){\\n                if(prev){\\n                    dp[idx][prev]=(s[idx]==\\'0\\')+dp[idx+1][prev];\\n                }\\n                else{\\n                    dp[idx][prev]=min((s[idx]==\\'1\\')+dp[idx+1][0],(s[idx]==\\'0\\')+dp[idx+1][1]);\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n};\\n```\\n```\\n//Space Optimization\\nclass Solution {\\npublic:\\n    int minFlipsMonoIncr(string s) {\\n        int n=s.size();\\n        vector<int> dp(2,0);\\n        for(int idx=n-1;idx>=0;idx--){\\n            vector<int> curr(2,0);\\n            for(int prev=1;prev>=0;prev--){\\n                if(prev){\\n                    curr[prev]=(s[idx]==\\'0\\')+dp[prev];\\n                }\\n                else{\\n                    curr[prev]=min((s[idx]==\\'1\\')+dp[0],(s[idx]==\\'0\\')+dp[1]);\\n                }\\n            }\\n            dp=curr;\\n        }\\n        return dp[0];\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\n//Memoisation\nclass Solution {\npublic:\n    int solve(int idx,int prev,string &s,vector<vector<int>>& dp){\n        if(idx-s.size()){\n            return 0;\n        }\n        if(dp[idx][prev]!=-1) return dp[idx][prev];\n        if(prev){\n            return dp[idx][prev]=(s[idx]=='0')+solve(idx+1,prev,s,dp);\n        }\n        else{\n            return dp[idx][prev]=min((s[idx]=='1')+solve(idx+1,0,s,dp),(s[idx]=='0')+solve(idx+1,1,s,dp));\n        }\n    }\n    int minFlipsMonoIncr(string s) {\n        vector<vector<int>> dp(s.size(),vector<int>(2,-1));\n        return solve(0,0,s,dp);\n    }\n};\n",
        "explanations": "\nUsed minus instead of equality operator in comparison \"if(idx-s.size())\", which changes the program's logic.\n"
    },
    {
        "slug": "find-the-longest-valid-obstacle-course-at-each-position",
        "description": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:\n\nYou choose any number of obstacles between 0 and i inclusive.\nYou must include the ith obstacle in the course.\nYou must put the chosen obstacles in the same order as they appear in obstacles.\nEvery obstacle (except the first) is taller than or the same height as the obstacle immediately before it.\n\nReturn an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.",
        "examples": [
            "Input: obstacles = [1,2,3,2]\nOutput: [1,2,3,3]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3.",
            "Input: obstacles = [2,2,1]\nOutput: [1,2,1]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1.",
            "Input: obstacles = [3,1,5,6,4,2]\nOutput: [1,1,2,3,2,2]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2."
        ],
        "constraints": "n == obstacles.length\n1 <= n <= 105\n1 <= obstacles[i] <= 107",
        "release_time": 1683425182,
        "oracle_code": "class Solution {\npublic:\n    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {\n        \n        int n = nums.size();\n        \n        // lis store elements of longest increasing subsequence till ith\n        \n        vector<int> lis;\n        \n        // ans[i] store, no of elements satisfying the condition including ith\n        \n        vector<int> ans;\n\n        for(int i = 0; i < n; i++)\n        {\n            int idx = upper_bound(lis.begin(), lis.end(), nums[i]) - lis.begin();\n                \n            ans.push_back(idx + 1);\n            \n            if(idx == lis.size())\n                lis.push_back(nums[i]);\n            \n            else\n            {\n                lis[idx] = nums[i];\n            }\n        }\n        \n        return ans;\n    }\n};",
        "content": "* ***Binary Search***\\n\\n* ***Time Complexity :- O(NlogN)***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // lis store elements of longest increasing subsequence till ith\\n        \\n        vector<int> lis;\\n        \\n        // ans[i] store, no of elements satisfying the condition including ith\\n        \\n        vector<int> ans;\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            int idx = upper_bound(lis.begin(), lis.end(), nums[i]) - lis.begin();\\n                \\n            ans.push_back(idx + 1);\\n            \\n            if(idx == lis.size())\\n                lis.push_back(nums[i]);\\n            \\n            else\\n            {\\n                lis[idx] = nums[i];\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {\n        \n        int n = nums.size();\n        \n        // lis store elements of longest increasing subsequence till ith\n        \n        vector<int> lis;\n        \n        // ans[i] store, no of elements satisfying the condition including ith\n        \n        vector<int> ans;\n\n        for(int i = 0; i < n; i++)\n        {\n            int idx = upper_bound(lis.begin(), lis.end(), nums[i]) - lis.begin();\n                \n            ans.push_back(idx + 1);\n            \n            if(idx = lis.size())\n                lis.push_back(nums[i]);\n            \n            else\n            {\n                lis[idx] = nums[i];\n            }\n        }\n        \n        return ans;\n    }\n};\n",
        "explanations": "\nIn the if condition, '==' should be used. Using '=' assigns value instead of comparing.\n"
    },
    {
        "slug": "extra-characters-in-a-string",
        "description": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.",
        "examples": [
            "Input: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\nOutput: 1\nExplanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.",
            "Input: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\nOutput: 3\nExplanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3."
        ],
        "constraints": "1 <= s.length <= 50\n1 <= dictionary.length <= 50\n1 <= dictionary[i].length <= 50\ndictionary[i]\u00a0and s consists of only lowercase English letters\ndictionary contains distinct words",
        "release_time": 1690885964,
        "oracle_code": "class Solution {\npublic:\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\n    {\n        if (ind==s.size()) return 0;\n        if (dp[ind]!=-1) return dp[ind];\n        int ans=s.size()-ind;\n        for (int i=ind;i<s.size();i++)\n        {\n           string temp=s.substr(ind,i-ind+1);\n           if (st.find(temp)!=st.end())\n           {\n              ans=min(ans,rec(i+1,s,st,dp));\n           }\n        }\n        ans=min(ans,1+rec(ind+1,s,st,dp));\n        return dp[ind]=ans;\n    }\n    int minExtraChar(string s, vector<string>& dictionary) \n    {\n        set<string>st;\n        int n=s.size();\n        vector<int>dp(n,-1);\n        for (auto it:dictionary)\n        {\n            st.insert(it);\n        }\n        return rec(0,s,st,dp);\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\\n    {\\n        if (ind==s.size()) return 0;\\n        if (dp[ind]!=-1) return dp[ind];\\n        int ans=s.size()-ind;\\n        for (int i=ind;i<s.size();i++)\\n        {\\n           string temp=s.substr(ind,i-ind+1);\\n           if (st.find(temp)!=st.end())\\n           {\\n              ans=min(ans,rec(i+1,s,st,dp));\\n           }\\n        }\\n        ans=min(ans,1+rec(ind+1,s,st,dp));\\n        return dp[ind]=ans;\\n    }\\n    int minExtraChar(string s, vector<string>& dictionary) \\n    {\\n        set<string>st;\\n        int n=s.size();\\n        vector<int>dp(n,-1);\\n        for (auto it:dictionary)\\n        {\\n            st.insert(it);\\n        }\\n        return rec(0,s,st,dp);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\n    {\n        if (ind==s.size()) return 0;\n        if (dp[ind]!=-1) return dp[ind];\n        int ans=s.size()-ind;\n        for (int i=ind;i<s.size();i++)\n        {\n           string temp=s.substr(ind,i-ind+1);\n           if (st.find(temp)!=st.end())\n           {\n              ans min(ans,rec(i+1,s,st,dp));\n           }\n        }\n        ans=min(ans,1+rec(ind+1,s,st,dp));\n        return dp[ind]=ans;\n    }\n    int minExtraChar(string s, vector<string>& dictionary) \n    {\n        set<string>st;\n        int n=s.size();\n        vector<int>dp(n,-1);\n        for (auto it:dictionary)\n        {\n            st.insert(it);\n        }\n        return rec(0,s,st,dp);\n    }\n};\n",
        "explanations": "\nThere's a missing \"=\" sign after \"ans\" inside the for loop causing a syntax error.\n"
    }
]