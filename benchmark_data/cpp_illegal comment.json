[
    {
        "slug": "middle-of-the-linked-list",
        "description": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.",
        "examples": [
            "Input: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.",
            "Input: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one."
        ],
        "constraints": "The number of nodes in the list is in the range [1, 100].\n1 <= Node.val <= 100",
        "release_time": 1687519093,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* temp = head;\n        ListNode* mid = head;\n        while(temp != NULL && temp -> next != NULL){\n            mid = mid -> next;\n            temp = temp->next-> next;\n        }\n        return mid;\n    }\n};",
        "content": "## INITIALIZE BOTH POINTS FROM HEAD AND THEN TRAVERSE\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# FIRST POINT SHOULD TRAVERSE AT A NORMAL PACE\\n# BUT THE OTHER POINTER (ie. FAST) SHOULD SKIP ONE NODE AND THUS YOU WILL REACH THE SOLUTION IN O(n) TIME COMPLEXITY.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* middleNode(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* mid = head;\\n        while(temp != NULL && temp -> next != NULL){\\n            mid = mid -> next;\\n            temp = temp->next-> next;\\n        }\\n        return mid;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* temp = head;\n        ListNode* mid = head;\n        while(temp != NULL && temp -> next != NULL){\n            mid = mid /*-> next;\n            temp = temp->next-> next;\n        }\n        return mid;\n    }\n};\n",
        "explanations": "\nThe bug I added is wrong comment mark used, which commented out necessary lines of code.\n"
    },
    {
        "slug": "find-the-smallest-divisor-given-a-threshold",
        "description": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\nThe test cases are generated so\u00a0that there will be an answer.",
        "examples": [
            "Input: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).",
            "Input: nums = [44,22,33,11,1], threshold = 5\nOutput: 44"
        ],
        "constraints": "1 <= nums.length <= 5 * 104\n1 <= nums[i] <= 106\nnums.length <= threshold <= 106",
        "release_time": 1691733662,
        "oracle_code": "class Solution {\npublic:\n\n    int SumOfDivisor(vector<int>& nums, int Day){\n        int sum = 0;\n        for(int i = 0;i<nums.size();i++){\n            sum += ceil((double)nums[i]/(double)(Day));\n        }\n        return sum;\n    }\n    int smallestDivisor(vector<int>& nums, int threshold) {\n        int maxi = INT_MIN;\n        for(int i = 0;i<nums.size();i++){\n            maxi = max(maxi,nums[i]);\n        }\n        int low = 1,high = maxi,ans = -1;\n        while(low <= high){\n            int mid = (low + high)/2;\n            if(SumOfDivisor(nums,mid) <= threshold){\n                ans = mid;\n                high = mid - 1;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int SumOfDivisor(vector<int>& nums, int Day){\\n        int sum = 0;\\n        for(int i = 0;i<nums.size();i++){\\n            sum += ceil((double)nums[i]/(double)(Day));\\n        }\\n        return sum;\\n    }\\n    int smallestDivisor(vector<int>& nums, int threshold) {\\n        int maxi = INT_MIN;\\n        for(int i = 0;i<nums.size();i++){\\n            maxi = max(maxi,nums[i]);\\n        }\\n        int low = 1,high = maxi,ans = -1;\\n        while(low <= high){\\n            int mid = (low + high)/2;\\n            if(SumOfDivisor(nums,mid) <= threshold){\\n                ans = mid;\\n                high = mid - 1;\\n            }\\n            else{\\n                low = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\n    \n        int sum = 0;\n        for(int i = 0;i<nums.size();i++){\n            sum += ceil((double)nums[i]/(double)(Day));\n        }\n        return sum;\n    }\n    int smallestDivisor(vector<int>& nums, int threshold) {\n        int maxi = INT_MIN;\n        for(int i = 0;i<nums.size();i++){\n            maxi = max(maxi,nums[i]);\n        }\n        int low = 1,high = maxi,ans = -1;\n        while(low <= high){\n            int mid = (low + high)/2;\n            if(SumOfDivisor(nums,mid) <= threshold){\n                ans = mid;\n                high = mid - 1;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe function SumOfDivisor is commented out which makes its function implementation unavailable.\n"
    },
    {
        "slug": "the-number-of-good-subsets",
        "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\n\nFor example, if nums = [1, 2, 3, 4]:\n\n\t\n[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.\n[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n\n\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.",
        "examples": [
            "Input: nums = [1,2,3,4]\nOutput: 6\nExplanation: The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.",
            "Input: nums = [4,2,3,15]\nOutput: 5\nExplanation: The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5."
        ],
        "constraints": "1 <= nums.length <= 105\n1 <= nums[i] <= 30",
        "release_time": 1673615811,
        "oracle_code": "class Solution {\npublic:\n    int mod=1e9+7;\n    vector<int>prime;\n    int mp[45];\n    long long dp[31][1<<12];\n    int find(int n)\n    {\n        for(int i=2;i<=sqrt(n);i++)\n        {\n            if(n%i==0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    long long find(int value,int mask)\n    {\n        if(value>30)\n        {\n            return (mask>0);\n        }\n        if(dp[value][mask]!=-1)\n        {\n            return dp[value][mask]%mod;\n        }\n        int new_mask=0;\n        long long product=1;\n        for(int i=0;i<prime.size();i++)\n        {\n            if((value%prime[i])==0)\n            {\n                product*=prime[i];\n                new_mask|=(1<<i);\n            }\n        }\n        long long ans=find(value+1,mask);\n        if(product==value&&mp[value]&&((mask&new_mask)==0))\n        {\n            ans+=(find(value+1,mask|new_mask)*mp[value]);\n        }\n        return dp[value][mask]=ans%mod;\n    }\n    int numberOfGoodSubsets(vector<int>& nums) \n    {\n        memset(dp,-1,sizeof(dp));\n        for(int i=2;i<=30;i++)\n        {\n            if(find(i))\n            {\n                prime.push_back(i);\n            }\n        }\n        for(auto it:nums)\n        {\n            mp[it]++;\n        }\n        long long val=find(2,0)%mod;\n        long one=1;\n        for(int i=0;i<mp[1];i++)\n        {\n            one=(one*2)%mod;\n        }\n        val=(val*one)%mod;\n        return val;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    int mod=1e9+7;\\n    vector<int>prime;\\n    int mp[45];\\n    long long dp[31][1<<12];\\n    int find(int n)\\n    {\\n        for(int i=2;i<=sqrt(n);i++)\\n        {\\n            if(n%i==0)\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    long long find(int value,int mask)\\n    {\\n        if(value>30)\\n        {\\n            return (mask>0);\\n        }\\n        if(dp[value][mask]!=-1)\\n        {\\n            return dp[value][mask]%mod;\\n        }\\n        int new_mask=0;\\n        long long product=1;\\n        for(int i=0;i<prime.size();i++)\\n        {\\n            if((value%prime[i])==0)\\n            {\\n                product*=prime[i];\\n                new_mask|=(1<<i);\\n            }\\n        }\\n        long long ans=find(value+1,mask);\\n        if(product==value&&mp[value]&&((mask&new_mask)==0))\\n        {\\n            ans+=(find(value+1,mask|new_mask)*mp[value]);\\n        }\\n        return dp[value][mask]=ans%mod;\\n    }\\n    int numberOfGoodSubsets(vector<int>& nums) \\n    {\\n        memset(dp,-1,sizeof(dp));\\n        for(int i=2;i<=30;i++)\\n        {\\n            if(find(i))\\n            {\\n                prime.push_back(i);\\n            }\\n        }\\n        for(auto it:nums)\\n        {\\n            mp[it]++;\\n        }\\n        long long val=find(2,0)%mod;\\n        long one=1;\\n        for(int i=0;i<mp[1];i++)\\n        {\\n            one=(one*2)%mod;\\n        }\\n        val=(val*one)%mod;\\n        return val;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int mod=1e9+7;\n    vector<int>prime;\n    \n    long long dp[31][1<<12];\n    int find(int n)\n    {\n        for(int i=2;i<=sqrt(n);i++)\n        {\n            if(n%i==0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    long long find(int value,int mask)\n    {\n        if(value>30)\n        {\n            return (mask>0);\n        }\n        if(dp[value][mask]!=-1)\n        {\n            return dp[value][mask]%mod;\n        }\n        int new_mask=0;\n        long long product=1;\n        for(int i=0;i<prime.size();i++)\n        {\n            if((value%prime[i])==0)\n            {\n                product*=prime[i];\n                new_mask|=(1<<i);\n            }\n        }\n        long long ans=find(value+1,mask);\n        if(product==value&&(mask&new_mask)==0)\n        {\n            ans+=(find(value+1,mask|new_mask));\n        }\n        return dp[value][mask]=ans%mod;\n    }\n    int numberOfGoodSubsets(vector<int>& nums) \n    {\n        memset(dp,-1,sizeof(dp));\n        for(int i=2;i<=30;i++)\n        {\n            if(find(i))\n            {\n                prime.push_back(i);\n            }\n        }\n        for(auto it:nums)\n        {\n            \n        }\n        long long val=find(2,0)%mod;\n        long one=1;\n        for(int i=0;i<mp[1];i++)\n        {\n            one=(one*2)%mod;\n        }\n        val=(val*one)%mod;\n        return val;\n    }\n};\n",
        "explanations": "\nThe count array 'mp' has been accidentally commented, causing errors in the implementation.\n"
    },
    {
        "slug": "array-with-elements-not-equal-to-average-of-neighbors",
        "description": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.\nMore formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].\nReturn any rearrangement of nums that meets the requirements.",
        "examples": [
            "Input: nums = [1,2,3,4,5]\nOutput: [1,2,4,5,3]\nExplanation:\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.",
            "Input: nums = [6,2,0,9,7]\nOutput: [9,7,6,2,0]\nExplanation:\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3."
        ],
        "constraints": "3 <= nums.length <= 105\n0 <= nums[i] <= 105",
        "release_time": 1664849911,
        "oracle_code": "class Solution {\npublic:\n    vector<int> rearrangeArray(vector<int>& nums) {\n        int size=nums.size();\n        for(int i=1;i<size-1;i++){\n            if((nums[i-1]<nums[i] && nums[i]<nums[i+1])||(nums[i-1]>nums[i] && nums[i]>nums[i+1]))   //If the array is strictly increasing or decreasing then swap the vlaue at current index  with value at index+1\n                swap(nums[i],nums[i+1]);\n        }\n        return nums;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> rearrangeArray(vector<int>& nums) {\\n        int size=nums.size();\\n        for(int i=1;i<size-1;i++){\\n            if((nums[i-1]<nums[i] && nums[i]<nums[i+1])||(nums[i-1]>nums[i] && nums[i]>nums[i+1]))   //If the array is strictly increasing or decreasing then swap the vlaue at current index  with value at index+1\\n                swap(nums[i],nums[i+1]);\\n        }\\n        return nums;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> rearrangeArray(vector<int>& nums) {\n        int size=nums.size();\n        for(int i=1;i<size-1;i++){\n            if((nums[i-1]<nums[i] && nums[i]<nums[i+1])\\(nums[i-1]>nums[i] && nums[i]>nums[i+1]))   \n                swap(nums[i],nums[i+1]);\n        }\n        return nums;\n    }\n};\n",
        "explanations": "\nThe logical OR \"||\" is mistakenly written as \"\\(\" which would cause a compilation error.\n"
    },
    {
        "slug": "number-of-matching-subsequences",
        "description": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".",
        "examples": [
            "Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".",
            "Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\nOutput: 2"
        ],
        "constraints": "1 <= s.length <= 5 * 104\n1 <= words.length <= 5000\n1 <= words[i].length <= 50\ns and words[i] consist of only lowercase English letters.",
        "release_time": 1675105253,
        "oracle_code": "class Solution {\npublic:\nmap<char,vector<int>> count;\n    int numMatchingSubseq(string s, vector<string>& words) {\n        for(int i=0;i<s.size();i++){\n            count[s[i]].push_back(i);//add each position of each char\n        }\n        int z=0;\n        for(auto& x:words){\n            int p=-1;//find element greater thn this index\n            int r=0;//flag bit\n            for(int j=0;j<x.size();j++){\n                if(count.find(x[j])==count.end()){r=1;break;}\n                if(upper_bound(count[x[j]].begin(),count[x[j]].end(),p)==count[x[j]].end()){r=1;break;}//if grtr position not found\n                p=count[x[j]][upper_bound(count[x[j]].begin(),count[x[j]].end(),p)-count[x[j]].begin()];//updating search index\n                }\n            if(r==0)z+=1;\n        }\n        return z;\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\nmap<char,vector<int>> count;\\n    int numMatchingSubseq(string s, vector<string>& words) {\\n        for(int i=0;i<s.size();i++){\\n            count[s[i]].push_back(i);//add each position of each char\\n        }\\n        int z=0;\\n        for(auto& x:words){\\n            int p=-1;//find element greater thn this index\\n            int r=0;//flag bit\\n            for(int j=0;j<x.size();j++){\\n                if(count.find(x[j])==count.end()){r=1;break;}\\n                if(upper_bound(count[x[j]].begin(),count[x[j]].end(),p)==count[x[j]].end()){r=1;break;}//if grtr position not found\\n                p=count[x[j]][upper_bound(count[x[j]].begin(),count[x[j]].end(),p)-count[x[j]].begin()];//updating search index\\n                }\\n            if(r==0)z+=1;\\n        }\\n        return z;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\nmap<char,vector<int>> count;\n    int numMatchingSubseq(string s, vector<string>/& words) {\n        for(int i=0;i<s.size();i++){\n            count[s[i]].push_back(i);//add each position of each char\n        }\n        int z=0;\n        for(auto& x:words){\n            int p=-1;//find element greater thn this index\n            int r=0;//flag bit\n            for(int j=0;j<x.size();j++){\n                if(count.find(x[j])==count.end()){r=1;break;}\n                if(upper_bound(count[x[j]].begin(),count[x[j]].end(),p)==count[x[j]].end()){r=1;break;}//if grtr position not found\n                p=count[x[j]][upper_bound(count[x[j]].begin(),count[x[j]].end(),p)-count[x[j]].begin()];//updating search index\n                }\n            if(r==0)z+=1;\n        }\n        return z;\n    }\n};\n",
        "explanations": "\nThere is a wrong usage (\"/&\" instead of \"&&\") on vector<string> reference declaration.\n"
    },
    {
        "slug": "minimum-impossible-or",
        "description": "You are given a 0-indexed\u00a0integer array nums.\nWe say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums.\nReturn the minimum positive non-zero integer\u00a0that is not expressible from nums.",
        "examples": [
            "Input: nums = [2,1]\nOutput: 4\nExplanation: 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4.",
            "Input: nums = [5,3,2]\nOutput: 1\nExplanation: We can show that 1 is the smallest number that is not expressible."
        ],
        "constraints": "1 <= nums.length <= 105\n1 <= nums[i] <= 109",
        "release_time": 1676738066,
        "oracle_code": "class Solution {\npublic:\n    int minImpossibleOR(vector<int>& nums) {\n        unordered_set<int> s(nums.begin(),nums.end());\n        int temp=1;\n        for(int i=1;i<32;i++){\n            if(s.find(temp)==s.end()) return temp;\n            temp=temp*2;\n        }\n        return temp; \n    }\n};",
        "content": "\\n\\n<!-- Describe your approach to solving the problem. -->\\nIf 1 and 2 are present in the array then all the number from 1 to 3 are expressible.\\n\\nIf 1, 2 and 4 are present in the array then all the number from 1 to 7 are expressible.\\n\\nIf 1, 2, 4 and 8 are present in the array then all the numbers from 1 to 15 are expressible.\\n\\nIf 1, 2, 4, 8 and 16 are present in the array then all the numbers from 1 to 31 are expressible.\\n\\nTherefore we need to find the smallest integer which can be expressed as power of 2 and which is not present in the array.\\n\\n# Complexity\\n- Time complexity:\\n  O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n  O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minImpossibleOR(vector<int>& nums) {\\n        unordered_set<int> s(nums.begin(),nums.end());\\n        int temp=1;\\n        for(int i=1;i<32;i++){\\n            if(s.find(temp)==s.end()) return temp;\\n            temp=temp*2;\\n        }\\n        return temp; \\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int minImpossibleOR(vector<int>& nums) {\n        \n        int temp=1;\n        for(int i=1;i<32;i++){\n            if(s.find(temp)==s.end()) return temp;\n            temp=temp*2;\n        }\n        return temp; \n    }\n};\n",
        "explanations": "\nThe set s is commented out but it is used in the for loop.\n"
    },
    {
        "slug": "reverse-odd-levels-of-binary-tree",
        "description": "Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.\n\nFor example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].\n\nReturn the root of the reversed tree.\nA binary tree is perfect if all parent nodes have two children and all leaves are on the same level.\nThe level of a node is the number of edges along the path between it and the root node.",
        "examples": [
            "Input: root = [2,3,5,8,13,21,34]\nOutput: [2,5,3,8,13,21,34]\nExplanation: \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.",
            "Input: root = [7,13,11]\nOutput: [7,11,13]\nExplanation: \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13.",
            "Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]\nOutput: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]\nExplanation: \nThe odd levels have non-zero values.\nThe nodes at level 1 were 1, 2, and are 2, 1 after the reversal.\nThe nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal."
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 214].\n0 <= Node.val <= 105\nroot is a perfect binary tree.",
        "release_time": 1665040875,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            // cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            for(i = 0; i < n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* reverseOddLevels(TreeNode* root) {\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        int x = 1,n,i,z;\\n        vector<TreeNode*> tmp;\\n        TreeNode* node;\\n        while(!q.empty()){\\n            tmp.clear();\\n            n = q.size();\\n            // cout<<n<<\" \";\\n            while(n--){\\n                node = q.front();q.pop();\\n                // cout<<node->val<<\" \";\\n                if(x==0){\\n                    tmp.push_back(node);\\n                }\\n                if(node->left)\\n                    q.push(node->left);\\n                if(node->right){\\n                    q.push(node->right);\\n                }\\n            }\\n            n = tmp.size();\\n            for(i = 0; i < n/2; i++){\\n                z = tmp[i]->val;\\n                tmp[i]->val = tmp[n-1-i]->val;\\n                tmp[n-1-i]->val = z;\\n            }\\n            x ^= 1;\\n            n = 0;\\n        }\\n        return root;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            / cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            for(i = 0; i < n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};\n",
        "explanations": "\nUsed single slash '/' instead of double '//' for a comment, causing a syntax error.\n"
    },
    {
        "slug": "longest-ideal-subsequence",
        "description": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\nt is a subsequence of the string s.\nThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\n\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.",
        "examples": [
            "Input: s = \"acfgbd\", k = 2\nOutput: 4\nExplanation: The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.",
            "Input: s = \"abcd\", k = 3\nOutput: 4\nExplanation: The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned."
        ],
        "constraints": "1 <= s.length <= 105\n0 <= k <= 25\ns consists of lowercase English letters.",
        "release_time": 1665172616,
        "oracle_code": "class Solution {\n\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};",
        "content": "\\n# Approach\\nWe Have Use Three Different Approaches :\\n1. Recursion + Memoization \\n    TC : O(n^2) , SC : O(n)\\n2. Tabulation Method \\n    TC : O(n^2) , SC : O(n)\\n3.  Tabulatuon With SOace Optimised\\n    TC : O(n^2) , SC : O(1) \\n\\n\\n#Note\\nSC In first two methods is On) and not O(n^2) as size is fixed to 27 for each index hence it is Linear Space ,Similarly for 3rd Method we have optimised to constant space as at any instant we onlt need memory of next 27 blocks  only.\\n\\n#Hope You Liekd It and Upvote are appreciated \\n\\n# Code\\n```\\nclass Solution {\\n\\n\\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\\n   {\\n       if(index == s.length())\\n       return 0;\\n\\n       if(dp[index][prev] != -1)\\n       return dp[index][prev];\\n\\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\\n\\n       int op2 = 0 ;\\n\\n       if(prev == 26)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n       else if(abs(s[index]-\\'a\\' - prev) <= k)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n\\n       return dp[index][prev] = max(op1 , op2);\\n   }\\n\\n   int SolveByTab(string &s , int &k )\\n   {\\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + dp[index+1][prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n\\n               dp[index][prev] = max(op1 , op2);\\n            }\\n        }\\n\\n       return max(dp[0][s[0]-\\'a\\'] , dp[0][26]);\\n   }\\n\\n   int SolveByTabSpaceOptimised(string &s , int &k )\\n   {\\n        vector<int> next(27, 0) ;\\n        vector<int> curr(27, 0);\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + next[prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n\\n               curr[prev] = max(op1 , op2);\\n            }\\n            next = curr;\\n        }\\n\\n       return max(curr[s[0]-\\'a\\'] , curr[26]);\\n   }\\n\\npublic:\\n    int longestIdealString(string s, int k) {\\n        \\n        // 1. Recursion + Memoization || Top Down Approach\\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\\n        // return SolveByMemo(s, k , 0 , 26, dp);\\n\\n        // 2. Tabulation Method || Bottom Up Approach\\n        // return SolveByTab(s, k);\\n\\n        // 3. Space Optimisation using Tabulation\\n        return SolveByTabSpaceOptimised(s , k);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = 1 /*+ SolveByMemo(s, k , index+1 , s[index]-'a' , dp);*/\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};\n",
        "explanations": "\nUsing comment mark ('/*') has made a part of a recursive function call into a comment, causing incorrect results.\n"
    },
    {
        "slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
        "description": "No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.\nGiven an integer n, return a list of two integers [a, b] where:\n\na and b are No-Zero integers.\na + b = n\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.",
        "examples": [
            "Input: n = 2\nOutput: [1,1]\nExplanation: Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.",
            "Input: n = 11\nOutput: [2,9]\nExplanation: Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted."
        ],
        "constraints": "2 <= n <= 104",
        "release_time": 1667535325,
        "oracle_code": "class Solution {\npublic:\n     int containZero(int n){\n        int count = 0;\n        while(n > 0){\n            if(n % 10 == 0) count++;\n            n /= 10;\n        }\n        return count;\n    }\n    \n    vector<int> getNoZeroIntegers(int n) {\n        for(int i = 1; i <= n/2; i++){\n            if((containZero(i) == 0) && (containZero(n-i) == 0)) return {i, n-i};\n        }\n        return {};\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     int containZero(int n){\\n        int count = 0;\\n        while(n > 0){\\n            if(n % 10 == 0) count++;\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n    \\n    vector<int> getNoZeroIntegers(int n) {\\n        for(int i = 1; i <= n/2; i++){\\n            if((containZero(i) == 0) && (containZero(n-i) == 0)) return {i, n-i};\\n        }\\n        return {};\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n     int containZero(int n){\n        int count = 0;\n        while(n > 0){\n            if(n % 10 == 0) count++;\n            n /= 10;\n\n        return count;\n    }\n    \n    vector<int> getNoZeroIntegers(int n) {\n        for(int i = 1; i <= n/2; i++){\n            if((containZero(i) == 0) && (containZero(n-i) == 0)) return {i, n-i};\n        }\n        return {};\n    }\n};\n",
        "explanations": "\nThe while loop in the containZero function is not closed with \"}\", leading to syntax error.\n"
    },
    {
        "slug": "sum-of-digits-of-string-after-convert",
        "description": "You are given a string s consisting of lowercase English letters, and an integer k.\nFirst, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.\nFor example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations:\n\nConvert: \"zbax\" \u279d \"(26)(2)(1)(24)\" \u279d \"262124\" \u279d 262124\nTransform #1: 262124 \u279d 2 + 6 + 2 + 1 + 2 + 4\u00a0\u279d 17\nTransform #2: 17 \u279d 1 + 7 \u279d 8\n\nReturn the resulting integer after performing the operations described above.",
        "examples": [
            "Input: s = \"iiii\", k = 1\nOutput: 36\nExplanation: The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36.",
            "Input: s = \"leetcode\", k = 2\nOutput: 6\nExplanation: The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6.",
            "Input: s = \"zbax\", k = 2\nOutput: 8"
        ],
        "constraints": "1 <= s.length <= 100\n1 <= k <= 10\ns consists of lowercase English letters.",
        "release_time": 1690867082,
        "oracle_code": "class Solution {\npublic:\n    int sumDigits(int num) {\n        int sum = 0;\n        while(num) {\n            sum += num%10;\n            num /= 10;\n        }\n        return sum;\n    }\n    \n    int getLucky(string s, int k) {\n        int sum = 0 ; \n        for(auto it: s){\n            int value = it - 'a' + 1;\n            if(value>=10){\n                sum+= value%10 + value/10; //since digit is two place only and we need all the digits(_ _)\n            }else\n                sum = sum + value; \n        }\n\n        k--;//since I did the sum once;\n        while(k-- && sum>=10){//furthur trasformations starts here\n            sum = sumDigits(sum);\n        } \n        return sum;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. apne ko firstly har ek char se iterate karke unki value nikalni hogi\\n2. value agar double digits me aaya to usko bhi single me tod ke sum me add kar deinge\\n3. since yehi chiz upto k=0 tak karni paregi to ek function bana ke kar leinge aur sum return kara deinge\\nNote: As hamne ek baar wo sum nikal liya hai therefore k--;\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumDigits(int num) {\\n        int sum = 0;\\n        while(num) {\\n            sum += num%10;\\n            num /= 10;\\n        }\\n        return sum;\\n    }\\n    \\n    int getLucky(string s, int k) {\\n        int sum = 0 ; \\n        for(auto it: s){\\n            int value = it - \\'a\\' + 1;\\n            if(value>=10){\\n                sum+= value%10 + value/10; //since digit is two place only and we need all the digits(_ _)\\n            }else\\n                sum = sum + value; \\n        }\\n\\n        k--;//since I did the sum once;\\n        while(k-- && sum>=10){//furthur trasformations starts here\\n            sum = sumDigits(sum);\\n        } \\n        return sum;\\n    }\\n};\\n```\\n\\n\\n![upvote.jpg](https://assets.leetcode.com/users/images/0593cc08-ec64-46b3-bb36-81ecef0ce934_1690867154.0542114.jpeg)\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int sumDigits(int num) {\n        int sum = 0;\n        while(num) {\n            sum += num%10;\n            num /= 10;\n        }\n        return sum;\n    }\n    \n    int getLucky(string s, int k) {\n        int sum = 0 ; \n        for(auto it: s){\n            int value = it - 'a' + 1;\n            \n                sum+= value%10 + value/10; //since digit is two place only and we need all the digits(_ _)\n            \n                sum = sum + value; \n        }\n\n        k--;//since I did the sum once;\n        while(k-- && sum>=10){//furthur trasformations starts here\n            sum = sumDigits(sum);\n        } \n        return sum;\n    }\n};\n",
        "explanations": "\nThe commented if-else logic in the getLucky function inappropriately increases the sum for single digit values.\n"
    },
    {
        "slug": "01-matrix",
        "description": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.",
        "examples": [
            "Input: mat = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: [[0,0,0],[0,1,0],[0,0,0]]",
            "Input: mat = [[0,0,0],[0,1,0],[1,1,1]]\nOutput: [[0,0,0],[0,1,0],[1,2,1]]"
        ],
        "constraints": "m == mat.length\nn == mat[i].length\n1 <= m, n <= 104\n1 <= m * n <= 104\nmat[i][j] is either 0 or 1.\nThere is at least one 0 in mat.",
        "release_time": 1692260053,
        "oracle_code": "class Solution {\npublic:\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        int n=mat.size();\n        int m=mat[0].size();\n        vector<vector<int>>dp(n,vector<int>(m,INT_MAX-2));\n        //normal case so will go for top and left only\n        for (int i=0;i<n;i++){\n            for (int j=0;j<m;j++){\n                if (mat[i][j]==0) dp[i][j]=0;\n                else {\n                    if (i>0) dp[i][j]= min (dp[i][j], dp[i-1][j]+1); //top\n                    if (j>0) dp[i][j]=min (dp[i][j],dp[i][j-1]+1); //left\n                }\n            }\n        }\n\n        //reverse \n             for (int i=n-1;i>=0;i--){\n            for (int j=m-1;j>=0;j--){\n                if (mat[i][j]==0) dp[i][j]=0;\n                else {\n                    if (i<n-1) dp[i][j]= min (dp[i][j], dp[i+1][j]+1); //bottom\n                    if (j<m-1) dp[i][j]=min (dp[i][j],dp[i][j+1]+1); //right\n                }\n            }\n        }\n        return dp;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a 2D vector `dp` of the same size as the input matrix `mat`, where each cell initially has a value of `INT_MAX - 2`.\\n2. Traverse the matrix from top-left to bottom-right:\\n   - If the current cell contains 0, set `dp[i][j]` to 0.\\n   - Otherwise, update `dp[i][j]` with the minimum of its current value and the values from its top and left neighbors, incremented by 1.\\n3. Traverse the matrix in reverse, from bottom-right to top-left:\\n   - Update `dp[i][j]` with the minimum of its current value and the values from its bottom and right neighbors, incremented by 1.\\n4. Return the updated `dp` matrix.\\n\\n**Additional Point:**\\n- The reason for using `INT_MAX - 2` is to avoid integer overflow when adding 1 to `INT_MAX`. By subtracting 2, we ensure that the addition won\\'t exceed the maximum value representable by an `int`. This is a common technique to handle situations where adding a small number to `INT_MAX` might cause unexpected behavior due to overflow.\\n![image.png](https://assets.leetcode.com/users/images/768d89e8-9abb-4604-8189-48ab7753f33f_1692259793.882623.png)\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(n * m) \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n * m)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\\n        int n=mat.size();\\n        int m=mat[0].size();\\n        vector<vector<int>>dp(n,vector<int>(m,INT_MAX-2));\\n        //normal case so will go for top and left only\\n        for (int i=0;i<n;i++){\\n            for (int j=0;j<m;j++){\\n                if (mat[i][j]==0) dp[i][j]=0;\\n                else {\\n                    if (i>0) dp[i][j]= min (dp[i][j], dp[i-1][j]+1); //top\\n                    if (j>0) dp[i][j]=min (dp[i][j],dp[i][j-1]+1); //left\\n                }\\n            }\\n        }\\n\\n        //reverse \\n             for (int i=n-1;i>=0;i--){\\n            for (int j=m-1;j>=0;j--){\\n                if (mat[i][j]==0) dp[i][j]=0;\\n                else {\\n                    if (i<n-1) dp[i][j]= min (dp[i][j], dp[i+1][j]+1); //bottom\\n                    if (j<m-1) dp[i][j]=min (dp[i][j],dp[i][j+1]+1); //right\\n                }\\n            }\\n        }\\n        return dp;\\n    }\\n};\\n```\\n\\nupvote plz \\uD83D\\uDE4F\\uD83C\\uDFFE\\u2B06\\uFE0F\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    /*vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        int n=mat.size();\n        int m=mat[0].size();\n        vector<vector<int>>dp(n,vector<int>(m,INT_MAX-2));\n        //normal case so will go for top and left only\n        for (int i=0;i<n;i++){\n            for (int j=0;j<m;j++){\n                if (mat[i][j]==0) dp[i][j]=0;\n                else {\n                    if (i>0) dp[i][j]= min (dp[i][j], dp[i-1][j]+1); //top\n                    if (j>0) dp[i][j]=min (dp[i][j],dp[i][j-1]+1); //left\n                }\n            }\n        }\n\n        //reverse \n             for (int i=n-1;i>=0;i--){\n            for (int j=m-1;j>=0;j--){\n                if (mat[i][j]==0) dp[i][j]=0;\n                else {\n                    if (i<n-1) dp[i][j]= min (dp[i][j], dp[i+1][j]+1); //bottom\n                    if (j<m-1) dp[i][j]=min (dp[i][j],dp[i][j+1]+1); //right\n                }\n            }\n        }\n        return dp;\n    }\n};*/\n",
        "explanations": "\nA block comment mark is used to comment out the entire code, leading to no code execution.\n"
    },
    {
        "slug": "shortest-path-with-alternating-colors",
        "description": "You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\nYou are given two arrays redEdges and blueEdges where:\n\nredEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and\nblueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.\n\nReturn an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.",
        "examples": [
            "Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []\nOutput: [0,1,-1]",
            "Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]\nOutput: [0,1,-1]"
        ],
        "constraints": "1 <= n <= 100\n0 <= redEdges.length,\u00a0blueEdges.length <= 400\nredEdges[i].length == blueEdges[j].length == 2\n0 <= ai, bi, uj, vj < n",
        "release_time": 1676113078,
        "oracle_code": "class Solution {\npublic:\n    vector<int> shortestAlternatingPaths(int n,vector<vector<int>>&redEdges,vector<vector<int>>& blueEdges) \n    {\n        multiset<int>temp;\n        vector<multiset<int>>redchilds(n,temp),bluechilds(n,temp);\n        for(auto j:redEdges)\n        {\n            redchilds[j[0]].insert(j[1]);\n        }\n        for(auto j:blueEdges)\n        {\n            bluechilds[j[0]].insert(j[1]);\n        }\n        vector<int>ans;\n        for(int i=0;i<n;i++)\n        {\n            //BFS for all\n            vector<multiset<int>>reds=redchilds,blues=bluechilds;\n            queue<pair<char,int>>visit;\n            visit.push({'n',0});//neutral='n'\n            int steps=0;\n            while(!visit.empty())\n            {\n                bool justbreak=false;\n                int n=visit.size();\n                for(int j=0;j<n;j++)\n                {\n                    pair<char,int>x=visit.front();\n                    visit.pop();\n                    if(x.second==i)\n                    {\n                        ans.push_back(steps);\n                        justbreak=true;\n                        break;\n                    }\n                    if(x.first=='n')\n                    {\n                        for(auto j:reds[x.second])\n                        {\n                            visit.push({'r',j});\n                            auto itr1=reds[x.second].find(j);\n                            reds[x.second].erase(itr1);\n                        }\n                        for(auto j:blues[x.second])\n                        {\n                            visit.push({'b',j});//blue='b'\n                            auto itr1=blues[x.second].find(j);\n                            blues[x.second].erase(itr1);\n                        }\n                    }\n                    else if(x.first=='b')\n                    {\n                        for(auto j:reds[x.second])\n                        {\n                            visit.push({'r',j});//red='r'\n                            auto itr1=reds[x.second].find(j);\n                            reds[x.second].erase(itr1);\n                        }\n                    }\n                    else if(x.first=='r')\n                    {\n                        for(auto j:blues[x.second])\n                        {\n                            visit.push({'b',j});\n                            auto itr1=blues[x.second].find(j);\n                            blues[x.second].erase(itr1);\n                        }\n                    }\n                }\n                if(justbreak)\n                {\n                    break;\n                }\n                steps++;\n            }\n            if(i==ans.size())\n            {\n                ans.push_back(-1);\n            }\n        }\n        return ans;\n    }\n};",
        "content": "*E denotes number of Edges*\\n\\n# Complexity\\n- Time complexity:\\nO((N^2)+(N)*(E)*LOG(E))\\n\\n- Space complexity:\\nO(E)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> shortestAlternatingPaths(int n,vector<vector<int>>&redEdges,vector<vector<int>>& blueEdges) \\n    {\\n        multiset<int>temp;\\n        vector<multiset<int>>redchilds(n,temp),bluechilds(n,temp);\\n        for(auto j:redEdges)\\n        {\\n            redchilds[j[0]].insert(j[1]);\\n        }\\n        for(auto j:blueEdges)\\n        {\\n            bluechilds[j[0]].insert(j[1]);\\n        }\\n        vector<int>ans;\\n        for(int i=0;i<n;i++)\\n        {\\n            //BFS for all\\n            vector<multiset<int>>reds=redchilds,blues=bluechilds;\\n            queue<pair<char,int>>visit;\\n            visit.push({\\'n\\',0});//neutral=\\'n\\'\\n            int steps=0;\\n            while(!visit.empty())\\n            {\\n                bool justbreak=false;\\n                int n=visit.size();\\n                for(int j=0;j<n;j++)\\n                {\\n                    pair<char,int>x=visit.front();\\n                    visit.pop();\\n                    if(x.second==i)\\n                    {\\n                        ans.push_back(steps);\\n                        justbreak=true;\\n                        break;\\n                    }\\n                    if(x.first==\\'n\\')\\n                    {\\n                        for(auto j:reds[x.second])\\n                        {\\n                            visit.push({\\'r\\',j});\\n                            auto itr1=reds[x.second].find(j);\\n                            reds[x.second].erase(itr1);\\n                        }\\n                        for(auto j:blues[x.second])\\n                        {\\n                            visit.push({\\'b\\',j});//blue=\\'b\\'\\n                            auto itr1=blues[x.second].find(j);\\n                            blues[x.second].erase(itr1);\\n                        }\\n                    }\\n                    else if(x.first==\\'b\\')\\n                    {\\n                        for(auto j:reds[x.second])\\n                        {\\n                            visit.push({\\'r\\',j});//red=\\'r\\'\\n                            auto itr1=reds[x.second].find(j);\\n                            reds[x.second].erase(itr1);\\n                        }\\n                    }\\n                    else if(x.first==\\'r\\')\\n                    {\\n                        for(auto j:blues[x.second])\\n                        {\\n                            visit.push({\\'b\\',j});\\n                            auto itr1=blues[x.second].find(j);\\n                            blues[x.second].erase(itr1);\\n                        }\\n                    }\\n                }\\n                if(justbreak)\\n                {\\n                    break;\\n                }\\n                steps++;\\n            }\\n            if(i==ans.size())\\n            {\\n                ans.push_back(-1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> shortestAlternatingPaths(int n,vector<vector<int>>&redEdges,vector<vector<int>>& blueEdges) \n    {\n        multiset<int>temp;\n        vector<multiset<int>>redchilds(n,temp),bluechilds(n,temp);\n        for(auto j:redEdges)\n        {\n            redchilds[j[0]].insert(j[1]);\n        }\n        for(auto j:blueEdges)\n        {\n            bluechilds[j[0]].insert(j[1]);\n        }\n        vector<int>ans;\n        for(int i=0;i<n;i++)\n        {\n            //BFS for all\n            vector<multiset<int>>reds=redchilds,blues=bluechilds;\n            queue<pair<char,int>>visit;\n            visit.push({'n',0});//neutral='n'\n            int steps=0;\n            while(!visit.empty())\n            {\n                bool justbreak=false;\n                int n=visit.size();\n                for(int j=0;j<n;j++)\n                {\n                    pair<char,int>x=visit.front();\n                    \n                    if(x.second==i)\n                    {\n                        ans.push_back(steps);\n                        justbreak=true;\n                        break;\n                    }\n                    if(x.first=='n')\n                    {\n                        for(auto j:reds[x.second])\n                        {\n                            visit.push({'r',j});\n                            auto itr1=reds[x.second].find(j);\n                            reds[x.second].erase(itr1);\n                        }\n                        for(auto j:blues[x.second])\n                        {\n                            visit.push({'b',j});//blue='b'\n                            auto itr1=blues[x.second].find(j);\n                            blues[x.second].erase(itr1);\n                        }\n                    }\n                    else if(x.first=='b')\n                    {\n                        for(auto j:reds[x.second])\n                        {\n                            visit.push({'r',j});//red='r'\n                            auto itr1=reds[x.second].find(j);\n                            reds[x.second].erase(itr1);\n                        }\n                    }\n                    else if(x.first=='r')\n                    {\n                        for(auto j:blues[x.second])\n                        {\n                            visit.push({'b',j});\n                            auto itr1=blues[x.second].find(j);\n                            blues[x.second].erase(itr1);\n                        }\n                    }\n                }\n                if(justbreak)\n                {\n                    break;\n                }\n                steps++;\n            }\n            if(i==ans.size())\n            {\n                ans.push_back(-1);\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe visit.pop() operation is commented out, causing an infinite loop in the BFS traversal.\n"
    },
    {
        "slug": "sort-list",
        "description": "Given the head of a linked list, return the list after sorting it in ascending order.",
        "examples": [
            "Input: head = [4,2,1,3]\nOutput: [1,2,3,4]",
            "Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]",
            "Input: head = []\nOutput: []"
        ],
        "constraints": "The number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105",
        "release_time": 1692157711,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        vector<int>vec1;\n    ListNode*temp= head;\n    while(temp!=NULL){\nvec1.push_back(temp->val);\ntemp= temp->next;\n    }\n    sort(vec1.begin(),vec1.end());\n    ListNode*curr= head;\n   for(int i=0;i<vec1.size();i++){\n       curr->val=vec1[i];\n       curr= curr->next;\n   }\n   return head;\n    }\n    \n\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* sortList(ListNode* head) {\\n        vector<int>vec1;\\n    ListNode*temp= head;\\n    while(temp!=NULL){\\nvec1.push_back(temp->val);\\ntemp= temp->next;\\n    }\\n    sort(vec1.begin(),vec1.end());\\n    ListNode*curr= head;\\n   for(int i=0;i<vec1.size();i++){\\n       curr->val=vec1[i];\\n       curr= curr->next;\\n   }\\n   return head;\\n    }\\n    \\n\\n};\\n\\n```",
        "level": "medium",
        "buggy_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        vector<int>vec1;\n    ListNode*temp= head;\n    while(temp!=NULL){\nvec1.push_back(temp->val);\ntemp= temp->next;\n    }\n    sort(vec1.begin(),vec1.end());\n    ListNode*curr= head;\n   \n       curr->val=vec1[i];\n       curr= curr->next;\n   }\n   return head;\n    }\n    \n\n};\n",
        "explanations": "\nThe bug is the wrong comment mark that commented out the for loop, causing an undeclared identifier error.\n"
    },
    {
        "slug": "minimum-total-cost-to-make-arrays-unequal",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\nIn one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\nFind the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\nReturn the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.",
        "examples": [
            "Input: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.",
            "Input: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.",
            "Input: nums1 = [1,2,2], nums2 = [1,2,2]\nOutput: -1\nExplanation: \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1."
        ],
        "constraints": "n == nums1.length == nums2.length\n1 <= n <= 105\n1 <= nums1[i], nums2[i] <= n",
        "release_time": 1670688199,
        "oracle_code": "class Solution {\npublic:\n    long long minimumTotalCost(vector<int>& nums1, vector<int>& nums2) {\n        long long ans = 0;\n        \n        vector<int> counts(100005, 0);\n        int dominantCnt = 0;\n        int dominantNum = -1;\n        int involvedCnt = 0;\n        int n = nums1.size();\n        for (int i = 0; i < n; ++i) {\n            if (nums1[i] == nums2[i]) {\n                ans += i;\n                counts[nums1[i]]++;\n                if (counts[nums1[i]] > dominantCnt) {\n                    dominantCnt = counts[nums1[i]];\n                    dominantNum = nums1[i];\n                }\n                involvedCnt++;\n            }\n        }\n        if (dominantCnt > involvedCnt / 2) {\n            for (int i = 0; i < n; ++i) {\n                if (nums1[i] != nums2[i] && nums1[i] != dominantNum && nums2[i] != dominantNum) {\n                    counts[nums1[i]]++;\n                    involvedCnt++;\n                    ans += i;\n                    if (dominantCnt <= involvedCnt / 2) {\n                        return ans;\n                    }\n                }\n            }\n            return -1;\n        }\n        else {\n            return ans;\n        }\n    }\n};",
        "content": "# Intuition and Approach\\n1. The cost of swapping numbers at idx1 and idx2 is `idx1 + idx2`\\n2. You only need to swap numbers at i that are identical in nums1[i] and nums2[i].\\n- e.g., `nums1 = [1,2,3,4,5]; nums2 = [2,2,3,5,5]` => extract `[2,3,5]`\\n3. Let\\'s consider two cases\\n- The `count of dominant element <= the count of all extracted elements / 2`. See 4\\n- The `count of dominant element > the count of all extracted elements / 2`. See 6\\n4. You can just sum all idx of them. There must be one permutation that can achieve the criteria: no identical number. For example, `[2,3,5]` can be permutated into `[5,2,3]`, and `[2,2,4,4]` can be permuted into `[4,4,2,2]`. \\n5. You might wonder what is the least cost to make such permutation. Consider you want to swap idx `i` to somewhere `j`, you must cost `i` first and then `j`, and if `j=0` the cost is `i`. So any swap of two numbers can be regarded as a process of swapping `i <-> 0 (of the original array) <-> j`. The total cost would be the sum of all idx. For the proof, please see [l_returns\\'s](https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal/solutions/2897969/c-simple-greedy-in-on-with-explanation/comments/1712870) comment.\\n6. If there is case like `[2,2,2,3,3]`, there is no permutation that can achieve the goal. So keep adding other elements from the original array for changing `2`, which is the dominant element in the example. Besides, you should avoid the idx `k` that `nums1[k] == dominant number || nums2[k] == dominant number`.\\n7. If the left numbers are exhausted and you still can not achieve `count of dominant element <= the count of all extract elements / 2`, return -1.\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(The range of the numbers)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long minimumTotalCost(vector<int>& nums1, vector<int>& nums2) {\\n        long long ans = 0;\\n        \\n        vector<int> counts(100005, 0);\\n        int dominantCnt = 0;\\n        int dominantNum = -1;\\n        int involvedCnt = 0;\\n        int n = nums1.size();\\n        for (int i = 0; i < n; ++i) {\\n            if (nums1[i] == nums2[i]) {\\n                ans += i;\\n                counts[nums1[i]]++;\\n                if (counts[nums1[i]] > dominantCnt) {\\n                    dominantCnt = counts[nums1[i]];\\n                    dominantNum = nums1[i];\\n                }\\n                involvedCnt++;\\n            }\\n        }\\n        if (dominantCnt > involvedCnt / 2) {\\n            for (int i = 0; i < n; ++i) {\\n                if (nums1[i] != nums2[i] && nums1[i] != dominantNum && nums2[i] != dominantNum) {\\n                    counts[nums1[i]]++;\\n                    involvedCnt++;\\n                    ans += i;\\n                    if (dominantCnt <= involvedCnt / 2) {\\n                        return ans;\\n                    }\\n                }\\n            }\\n            return -1;\\n        }\\n        else {\\n            return ans;\\n        }\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    long long minimumTotalCost(vector<int>& nums1, vector<int>& nums2) {\n        long long ans = 0;\n        \n        vector<int> counts(100005, 0);\n        int dominantCnt = 0;\n        int dominantNum = -1;\n        int involvedCnt = 0;\n        int n = nums1.size();\n        for (int i = 0; i < n; ++i) /*\n            if (nums1[i] == nums2[i]) {\n                ans += i;\n                counts[nums1[i]]++;\n                if (counts[nums1[i]] > dominantCnt) {\n                    dominantCnt = counts[nums1[i]];\n                    dominantNum = nums1[i];\n                }\n                involvedCnt++;\n            }\n        */\n        if (dominantCnt > involvedCnt / 2) {\n            for (int i = 0; i < n; ++i) {\n                if (nums1[i] != nums2[i] && nums1[i] != dominantNum && nums2[i] != dominantNum) {\n                    counts[nums1[i]]++;\n                    involvedCnt++;\n                    ans += i;\n                    if (dominantCnt <= involvedCnt / 2) {\n                        return ans;\n                    }\n                }\n            }\n            return -1;\n        }\n        else {\n            return ans;\n        }\n    }\n};\n",
        "explanations": "\nThe bug is a multi-line comment that makes part of the code non-executable.\n"
    },
    {
        "slug": "check-knight-tour-configuration",
        "description": "There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.\nYou are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.\nReturn true if grid represents a valid configuration of the knight's movements or false otherwise.\nNote that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.",
        "examples": [
            "Input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\nOutput: true\nExplanation: The above diagram represents the grid. It can be shown that it is a valid configuration.",
            "Input: grid = [[0,3,6],[5,8,1],[2,7,4]]\nOutput: false\nExplanation: The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move."
        ],
        "constraints": "n == grid.length == grid[i].length\n3 <= n <= 7\n0 <= grid[row][col] < n * n\nAll integers in grid are unique.",
        "release_time": 1685738927,
        "oracle_code": "class Solution {\nprivate:\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\n        int n = grid.size();\n        if(num == n*n) return true;\n        int i = row-2;\n        int j = col+1;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row-2;\n        j = col-1;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col - 1;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col + 1;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col + 2;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col + 2;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col - 2;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col - 2;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        return false;\n    }\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        ios::sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        if(grid[0][0] != 0) return false;\n        return helper(grid,0,0,1);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\\n        int n = grid.size();\\n        if(num == n*n) return true;\\n        int i = row-2;\\n        int j = col+1;\\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row-2;\\n        j = col-1;\\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 2;\\n        j = col - 1;\\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 2;\\n        j = col + 1;\\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 1;\\n        j = col + 2;\\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row - 1;\\n        j = col + 2;\\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row - 1;\\n        j = col - 2;\\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 1;\\n        j = col - 2;\\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        return false;\\n    }\\npublic:\\n    bool checkValidGrid(vector<vector<int>>& grid) {\\n        ios::sync_with_stdio(false);\\n        cin.tie(0);\\n        cout.tie(0);\\n        if(grid[0][0] != 0) return false;\\n        return helper(grid,0,0,1);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\nprivate:\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\n        int n \n        if(num == n*n) return true;\n        int i = row-2;\n        int j = col+1;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row-2;\n        j = col-1;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col - 1;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col + 1;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col + 2;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col + 2;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col - 2;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col - 2;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        return false;\n    }\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        ios::sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        if(grid[0][0] != 0) return false;\n        return helper(grid,0,0,1);\n    }\n};\n",
        "explanations": "\nThe variable 'n' is not initialized due to the wrong comment mark, causing undefined behavior.\n"
    },
    {
        "slug": "optimal-partition-of-string",
        "description": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.",
        "examples": [
            "Input: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.",
            "Input: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\")."
        ],
        "constraints": "1 <= s.length <= 105\ns consists of only English lowercase letters.",
        "release_time": 1680585594,
        "oracle_code": "class Solution {\npublic:\n    int partitionString(string s) {\n        set<char>st;\n        int g=1;\n        for(int i=0;i<s.size();i++){\n            if(st.find(s[i])!=st.end()){\n                g++;\n                st.clear();\n                st.insert(s[i]);\n            }\n            else {\n                st.insert(s[i]);\n            }\n        }\n        return g;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int partitionString(string s) {\\n        set<char>st;\\n        int g=1;\\n        for(int i=0;i<s.size();i++){\\n            if(st.find(s[i])!=st.end()){\\n                g++;\\n                st.clear();\\n                st.insert(s[i]);\\n            }\\n            else {\\n                st.insert(s[i]);\\n            }\\n        }\\n        return g;\\n    }\\n};\\n```\\n![upvote (3).jpg](https://assets.leetcode.com/users/images/c842b50a-e025-48ab-8dd8-72272b9952a8_1680585578.8252864.jpeg)\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int partitionString(string s) {\n        set<char>st;\n        int g=1;\n        for(int i=0;i<s.size();i++){\n            if(st.find(s[i])!=st.end()){\n                /*g++;\n                st.clear();\n                st.insert(s[i]);*/\n            }\n            else {\n                st.insert(s[i]);\n            }\n        }\n        return g;\n    }\n};\n",
        "explanations": "\nI enclosed an essential code block within a comment mark which causes an incorrect output.\n"
    },
    {
        "slug": "mean-of-array-after-removing-some-elements",
        "description": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.",
        "examples": [
            "Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.",
            "Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000",
            "Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778"
        ],
        "constraints": "20 <= arr.length <= 1000\narr.length is a multiple of 20.\n0 <= arr[i] <= 105",
        "release_time": 1680188219,
        "oracle_code": "class Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        int i, k;\n        double mean;\n        sort(arr.begin(), arr.end());\n        k = 0.05*arr.size();\n        for(i=0 ; i<k ; i++)\n        {\n            arr.erase(arr.begin()+0);\n            arr.erase(arr.begin()+arr.size()-1);\n        }\n        mean = (double)accumulate(arr.begin(), arr.end(), 0)/arr.size();\n        return mean;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double trimMean(vector<int>& arr) {\\n        int i, k;\\n        double mean;\\n        sort(arr.begin(), arr.end());\\n        k = 0.05*arr.size();\\n        for(i=0 ; i<k ; i++)\\n        {\\n            arr.erase(arr.begin()+0);\\n            arr.erase(arr.begin()+arr.size()-1);\\n        }\\n        mean = (double)accumulate(arr.begin(), arr.end(), 0)/arr.size();\\n        return mean;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        int i, k;\n        double mean;\n        /*sort(arr.begin(), arr.end());\n        k = 0.05*arr.size();\n        for(i=0 ; i<k ; i++)\n        {\n            arr.erase(arr.begin()+0);\n            arr.erase(arr.begin()+arr.size()-1);\n        }\n        mean = (double)accumulate(arr.begin(), arr.end(), 0)/arr.size();*/\n        return mean;\n    }\n};\n",
        "explanations": "\nThe bug is the use of a comment mark (/*) which comments out important code lines.\n"
    },
    {
        "slug": "climbing-stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "examples": [
            "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps",
            "Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        ],
        "constraints": "1 <= n <= 45",
        "release_time": 1676965804,
        "oracle_code": "class Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};",
        "content": "# Intuition\\nUsing Top - Down Approach -> Recursion + Memorization.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are visiting all values of n atleast 1 time.\\n\\n- Space complexity:\\nO(n) + O(n)  - > (Recursive calls + Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int n,vector<int> &dp){\\n        //base case\\n        if(n<=2)\\n          return n;\\n        \\n        if(dp[n]!=-1) \\n          return dp[n]; \\n        \\n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\\n        return dp[n];\\n    }\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        for(int i=0;i<=n;i++)\\n         dp[i]=-1;\\n        \\n        return solve(n,dp);\\n    }\\n};\\n```\\n\\n# Intuition\\nUsing Bottom - up Approach -> Tabulation.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(n) - > (Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        dp[0]=0;\\n        dp[1]=1;\\n        dp[2]=2;\\n        for(int i=3;i<=n;i++)\\n         dp[i]=dp[i-1]+dp[i-2];\\n        \\n        return dp[n];\\n    }\\n};\\n```\\n\\n# Python Code :\\nContributed by : Aarya_R\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(1) \\n```\\ndef climbStairs(self, n):\\n        prev = 1\\n        prev2 = 0\\n        for i in range(1, n+1):\\n            curi = prev + prev2\\n            prev2 = prev\\n            prev = curi\\n        return prev \\n```\\n![upvote.jfif](https://assets.leetcode.com/users/images/995d917b-6ea2-4b6b-8baa-6ce7bc6441fd_1676965776.537627.jpeg)\\n\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        /*base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};\n",
        "explanations": "\nThe comment marks /* and */ are used to comment out the entire solve function unexpectedly.\n"
    },
    {
        "slug": "intervals-between-identical-elements",
        "description": "You are given a 0-indexed array of n integers arr.\nThe interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.\nReturn an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].\nNote: |x| is the absolute value of x.",
        "examples": [
            "Input: arr = [2,1,3,1,2,3,3]\nOutput: [4,2,7,2,4,4,5]\nExplanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5",
            "Input: arr = [10,5,10,10]\nOutput: [5,0,3,4]\nExplanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4"
        ],
        "constraints": "n == arr.length\n1 <= n <= 105\n1 <= arr[i] <= 105",
        "release_time": 1687245473,
        "oracle_code": "class Solution {\npublic:\n    vector<long long> getDistances(vector<int>& arr) {\n        \n        int n = arr.size();\n        vector<long long> ans(n);\n        unordered_map<long long,long long> sum,freq,currfreq,currsum;\n\n        for(int i = 0;i<n;i++)\n        {\n           sum[arr[i]]+=i;\n           freq[arr[i]]++;\n        }\n\n        for(int i = 0;i<n;i++)\n        {\n           currfreq[arr[i]]++;\n           currsum[arr[i]]+=i;\n\n           long long currfrq = currfreq[arr[i]]-1,remfreq = freq[arr[i]]-currfreq[arr[i]];\n           long long currsumval = currsum[arr[i]],remsum = sum[arr[i]]-currsum[arr[i]];\n           ans[i] =  abs(i*currfrq-(currsumval-i))+abs(i*remfreq-remsum);\n        }\n        return ans;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**Approach-1:** Brute Force Approach Using Hash Table Looks Easy but it is not efficient solution it gives TLE.\\n**Approach-2:** to optmize the brute force, Break Dawn the Brute Force into **Current (SUM & FREQUENCY)** and **Remaining (SUM & FREQUENCY**) \\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> getDistances(vector<int>& arr) {\\n        \\n        int n = arr.size();\\n        vector<long long> ans(n);\\n        unordered_map<long long,long long> sum,freq,currfreq,currsum;\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n           sum[arr[i]]+=i;\\n           freq[arr[i]]++;\\n        }\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n           currfreq[arr[i]]++;\\n           currsum[arr[i]]+=i;\\n\\n           long long currfrq = currfreq[arr[i]]-1,remfreq = freq[arr[i]]-currfreq[arr[i]];\\n           long long currsumval = currsum[arr[i]],remsum = sum[arr[i]]-currsum[arr[i]];\\n           ans[i] =  abs(i*currfrq-(currsumval-i))+abs(i*remfreq-remsum);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/ef1866bf-43d6-4c44-877f-d7106d457c67_1687245465.1707878.jpeg)\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<long long> getDistances(vector<int>& arr) {\n        \n        int n = arr.size();\n        vector<long long> ans(n);\n        unordered_map<long long,long long> sum,freq,currfreq,currsum;\n\n        for(int i = 0;i<n;i++)\n        {\n           sum[arr[i]]+=i;\n           freq[arr[i]]++;\n        }\n\n        for(int i = 0;i<n;i++)\n        {\n           currfreq[arr[i]]++;\n           currsum[arr[i]]+=i;\n\n           long long currfrq = currfreq[arr[i]]-1,remfreq = freq[arr[i]]-currfreq[arr[i]];\n           long long currsumval = currsum[arr[i]],remsum = sum[arr[i]]-currsum[arr[i]];\n           \n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nCalculation for ans[i] is commented out, hence all ans[i] values will default to zero.\n"
    },
    {
        "slug": "number-of-black-blocks",
        "description": "You are given two integers m and n representing the dimensions of a\u00a00-indexed\u00a0m x n grid.\nYou are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\nA block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\nReturn a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.",
        "examples": [
            "Input: m = 3, n = 3, coordinates = [[0,0]]\nOutput: [3,1,0,0,0]\nExplanation: The grid looks like this:\n\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. \nThus, we return [3,1,0,0,0].",
            "Input: m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]\nOutput: [0,2,2,0,0]\nExplanation: The grid looks like this:\n\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0]."
        ],
        "constraints": "2 <= m <= 105\n2 <= n <= 105\n0 <= coordinates.length <= 104\ncoordinates[i].length == 2\n0 <= coordinates[i][0] < m\n0 <= coordinates[i][1] < n\nIt is guaranteed that coordinates contains pairwise distinct coordinates.",
        "release_time": 1688884502,
        "oracle_code": "class Solution {\npublic:\nvector<long long> countBlackBlocks(int m, int n, vector<vector<int>>& cds) {\n        vector<long long> ans(5,0);\n        int sz=cds.size();\n        set<pair<int,int>> s,black;\n        for(int i=0;i<sz;++i){\n            black.insert({cds[i][0],cds[i][1]});\n        }\n        for(int i=0;i<sz;++i){\n            int x=cds[i][0],y=cds[i][1];\n            // it can cover four squares\n            // case 1\n            if(x>0&&y>0){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=-1;dx<=0;++dx){\n                    for(int dy=-1;dy<=0;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            } \n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 2\n            if(x<m-1&&y>0){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=0;dx<=1;++dx){\n                    for(int dy=-1;dy<=0;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            }\n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 3\n            if(x>0&&y<n-1){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=-1;dx<=0;++dx){\n                    for(int dy=0;dy<=1;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            } \n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 4\n            if(x<m-1&&y<n-1){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=0;dx<=1;++dx){\n                    for(int dy=0;dy<=1;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            }\n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // put in set\n            s.insert({x,y});\n        }\n        ans[0]=(m-1)*1ll*(n-1)-ans[1]-ans[2]-ans[3]-ans[4];\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor a Black colored coordinate it can cover at max 4 blocks only, so we will see 4 blocks for each coordinate element, while taking care that the block is not previously visited\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) First Put All coordinates in a set named \"black\" and an empty set \"s\", then traverse coordinates\\n2) For each coordinate[x,y], check all 4 blocks(at max) if a block is not previously visited(we use set \"s\" for it) we count number of black coordinate(using set \"black\") in a block then update it in \"ans\"(answer vector)\\n3) For block with 0 black coordinate preset we update \"ans\" at the end. i.e ans[0]=(m-1)*(n-1)-(blocks with 1-4 black coordinate).\\n**As mxn grid has (m-1)*(n-1) => 2x2 blocks\\n\\nNote: We can also use unordered_set but you have to define Hash Function for itbecause by default, C++ doesn\\'t allow us to create an unordered set of pairs directly but one can pass a hash function to the unordered set container. \\n\\n# Complexity\\n- Time complexity:(coordinates.length*log(coordinates.length))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(coordinates.length)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nvector<long long> countBlackBlocks(int m, int n, vector<vector<int>>& cds) {\\n        vector<long long> ans(5,0);\\n        int sz=cds.size();\\n        set<pair<int,int>> s,black;\\n        for(int i=0;i<sz;++i){\\n            black.insert({cds[i][0],cds[i][1]});\\n        }\\n        for(int i=0;i<sz;++i){\\n            int x=cds[i][0],y=cds[i][1];\\n            // it can cover four squares\\n            // case 1\\n            if(x>0&&y>0){\\n                bool flag=true;\\n                int cnt=0;\\n                for(int dx=-1;dx<=0;++dx){\\n                    for(int dy=-1;dy<=0;++dy){\\n                        if(s.find({x+dx,y+dy})==s.end()){\\n                            if(black.find({x+dx,y+dy})!=black.end()){\\n                                cnt++;\\n                            } \\n                        } else{\\n                            flag=false;\\n                            break;\\n                        } \\n                    }\\n                }\\n                if(flag){\\n                    ans[cnt]++;\\n                }\\n            }\\n            // case 2\\n            if(x<m-1&&y>0){\\n                bool flag=true;\\n                int cnt=0;\\n                for(int dx=0;dx<=1;++dx){\\n                    for(int dy=-1;dy<=0;++dy){\\n                        if(s.find({x+dx,y+dy})==s.end()){\\n                            if(black.find({x+dx,y+dy})!=black.end()){\\n                                cnt++;\\n                            }\\n                        } else{\\n                            flag=false;\\n                            break;\\n                        } \\n                    }\\n                }\\n                if(flag){\\n                    ans[cnt]++;\\n                }\\n            }\\n            // case 3\\n            if(x>0&&y<n-1){\\n                bool flag=true;\\n                int cnt=0;\\n                for(int dx=-1;dx<=0;++dx){\\n                    for(int dy=0;dy<=1;++dy){\\n                        if(s.find({x+dx,y+dy})==s.end()){\\n                            if(black.find({x+dx,y+dy})!=black.end()){\\n                                cnt++;\\n                            } \\n                        } else{\\n                            flag=false;\\n                            break;\\n                        } \\n                    }\\n                }\\n                if(flag){\\n                    ans[cnt]++;\\n                }\\n            }\\n            // case 4\\n            if(x<m-1&&y<n-1){\\n                bool flag=true;\\n                int cnt=0;\\n                for(int dx=0;dx<=1;++dx){\\n                    for(int dy=0;dy<=1;++dy){\\n                        if(s.find({x+dx,y+dy})==s.end()){\\n                            if(black.find({x+dx,y+dy})!=black.end()){\\n                                cnt++;\\n                            }\\n                        } else{\\n                            flag=false;\\n                            break;\\n                        } \\n                    }\\n                }\\n                if(flag){\\n                    ans[cnt]++;\\n                }\\n            }\\n            // put in set\\n            s.insert({x,y});\\n        }\\n        ans[0]=(m-1)*1ll*(n-1)-ans[1]-ans[2]-ans[3]-ans[4];\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\nvector<long long> countBlackBlocks(int m, int n, vector<vector<int>>& cds) {\n        vector<long long> ans(5,0);\n        int sz=cds.size();\n        set<pair<int,int>> s,black;\n        for(int i=0;i<sz;++i){\n            black.insert({cds[i][0],cds[i][1]});\n        }\n        for(int i=0;i<sz;++i){\n            int x=cds[i][0],y=cds[i][1];\n            / it can cover four squares\n            // case 1\n            if(x>0&&y>0){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=-1;dx<=0;++dx){\n                    for(int dy=-1;dy<=0;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            } \n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 2\n            if(x<m-1&&y>0){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=0;dx<=1;++dx){\n                    for(int dy=-1;dy<=0;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            }\n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 3\n            if(x>0&&y<n-1){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=-1;dx<=0;++dx){\n                    for(int dy=0;dy<=1;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            } \n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // case 4\n            if(x<m-1&&y<n-1){\n                bool flag=true;\n                int cnt=0;\n                for(int dx=0;dx<=1;++dx){\n                    for(int dy=0;dy<=1;++dy){\n                        if(s.find({x+dx,y+dy})==s.end()){\n                            if(black.find({x+dx,y+dy})!=black.end()){\n                                cnt++;\n                            }\n                        } else{\n                            flag=false;\n                            break;\n                        } \n                    }\n                }\n                if(flag){\n                    ans[cnt]++;\n                }\n            }\n            // put in set\n            s.insert({x,y});\n        }\n        ans[0]=(m-1)*1ll*(n-1)-ans[1]-ans[2]-ans[3]-ans[4];\n        return ans;\n    }\n};\n",
        "explanations": "\nThe incorrect single line comment (/) is causing a syntax error during compilation. \n"
    },
    {
        "slug": "closest-prime-numbers-in-range",
        "description": "Given two positive integers left and right, find the two integers num1 and num2 such that:\n\nleft <= nums1 < nums2 <= right .\nnums1 and nums2 are both prime numbers.\nnums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.\n\nReturn the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.\nA number greater than 1 is called prime if it is only divisible by 1 and itself.",
        "examples": [
            "Input: left = 10, right = 19\nOutput: [11,13]\nExplanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair.",
            "Input: left = 4, right = 6\nOutput: [-1,-1]\nExplanation: There exists only one prime number in the given range, so the conditions cannot be satisfied."
        ],
        "constraints": "1 <= left <= right <= 106",
        "release_time": 1672771904,
        "oracle_code": "class Solution \n{\npublic:\n    vector<int> closestPrimes(int left, int right) \n    {\n        //marks all prime number from 2 to right using sieve algorithm\n        vector<int> nums(right+1, 1);\n        for(int i=2; i*i<=right; i++)\n        {\n            if(nums[i]==1)\n            {\n                for(int j=i*i; j<=right; j+=i)\n                    nums[j]=0;\n            }\n        }\n\n        //storing all prime number between left and right\n        vector<int> prime;\n        for(int i=max(2,left); i<=right; i++)\n        {\n            if(nums[i]==1) prime.push_back(i);\n        }\n\n        //finding pair of prime numbers having minimum difference\n        int n1=-1, n2=-1, mini=1e8, diff;\n        for(int i=1; i<prime.size(); i++)\n        {\n            diff = prime[i]-prime[i-1];\n            if(diff < mini)\n            {\n                mini = diff;\n                n1 = prime[i-1];\n                n2 = prime[i];\n            }\n        }\n        return {n1, n2};\n    }\n};",
        "content": "# Intuition\\nWe need to find all prime numbers between range(left, right) using minimum time complexity. \\n\\n# Approach\\nFor finding prime number between left and right range we use sieve algorithm. It takes O(nlog(logn)) time. Then, we find prime number pairs having minimum difference and return them.\\n\\n# Complexity\\n- Time complexity:\\nO(nlog(logn))\\n\\n- Space complexity:\\nO(n)\\n\\nwhere n=right value\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> closestPrimes(int left, int right) \\n    {\\n        //marks all prime number from 2 to right using sieve algorithm\\n        vector<int> nums(right+1, 1);\\n        for(int i=2; i*i<=right; i++)\\n        {\\n            if(nums[i]==1)\\n            {\\n                for(int j=i*i; j<=right; j+=i)\\n                    nums[j]=0;\\n            }\\n        }\\n\\n        //storing all prime number between left and right\\n        vector<int> prime;\\n        for(int i=max(2,left); i<=right; i++)\\n        {\\n            if(nums[i]==1) prime.push_back(i);\\n        }\\n\\n        //finding pair of prime numbers having minimum difference\\n        int n1=-1, n2=-1, mini=1e8, diff;\\n        for(int i=1; i<prime.size(); i++)\\n        {\\n            diff = prime[i]-prime[i-1];\\n            if(diff < mini)\\n            {\\n                mini = diff;\\n                n1 = prime[i-1];\\n                n2 = prime[i];\\n            }\\n        }\\n        return {n1, n2};\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution \n{\npublic:\n    vector<int> closestPrimes(int left, int right) \n    {\n        //marks all prime number from 2 to right using sieve algorithm\n        vector<int> nums(right+1, 1);\n        for(int i=2; i*i<=right; i++)\n        {\n            if(nums[i]==1)\n            {\n                for(int j=i*i; j<=right; j+=i)\n                    nums[j]=0;\n            }\n        }\n\n        /*storing all prime number between left and right\n        vector<int> prime;\n        for(int i=max(2,left); i<=right; i++)\n        {\n            if(nums[i]==1) prime.push_back(i);\n        }\n\n        //finding pair of prime numbers having minimum difference\n        int n1=-1, n2=-1, mini=1e8, diff;\n        for(int i=1; i<prime.size(); i++)\n        {\n            diff = prime[i]-prime[i-1];\n            if(diff < mini)\n            {\n                mini = diff;\n                n1 = prime[i-1];\n                n2 = prime[i];\n            }\n        }\n        return {n1, n2};\n    }\n};\n",
        "explanations": "\nThe multiline comment /* */ makes half of the function a comment, causing a compilation error.\n"
    },
    {
        "slug": "largest-substring-between-two-equal-characters",
        "description": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.",
        "examples": [
            "Input: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.",
            "Input: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".",
            "Input: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s."
        ],
        "constraints": "1 <= s.length <= 300\ns contains only lowercase English letters.",
        "release_time": 1673405367,
        "oracle_code": "class Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        int v[26];\n        memset(v,-1,sizeof v);\n        int ans=-1;\n        for(int i=0;i<s.size();i++){\n            if(v[s[i]-'a']==-1){\n                v[s[i]-'a']=i;\n            }\n            int res=i-v[s[i]-'a']-1;\n            ans=max(ans,res);\n        }\n        return ans;\n    }\n};",
        "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int v[26];\\n        memset(v,-1,sizeof v);\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1){\\n                v[s[i]-\\'a\\']=i;\\n            }\\n            int res=i-v[s[i]-\\'a\\']-1;\\n            ans=max(ans,res);\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        int v[26];\n        memset(v,-1,sizeof v);\n        int ans=-1;\n        /*for(int i=0;i<s.size();i++){*/\n            if(v[s[i]-'a']==-1){\n                v[s[i]-'a']=i;\n            }\n            int res=i-v[s[i]-'a']-1;\n            ans=max(ans,res);\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe bug was that the for loop provided to iterate through the string is commented out.\n"
    },
    {
        "slug": "loud-and-rich",
        "description": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.",
        "examples": [
            "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.",
            "Input: richer = [], quiet = [0]\nOutput: [0]"
        ],
        "constraints": "n == quiet.length\n1 <= n <= 500\n0 <= quiet[i] < n\nAll the values of quiet are unique.\n0 <= richer.length <= n * (n - 1) / 2\n0 <= ai, bi < n\nai != bi\nAll the pairs of richer are unique.\nThe observations in richer are all logically consistent.",
        "release_time": 1662566148,
        "oracle_code": "class Solution {\npublic:\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\n        \n        vis[i]=1;\n        for(auto ele:edge[i]){\n            if(!vis[ele])dfs(ele,parent,edge,vis,ansc);\n        }\n        \n        if(i!=parent)\n            ansc[i].push_back(parent);\n    }\n    \n    \n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        int n=quiet.size();\n        vector<vector<int>>ansc(n),edge(n);\n        \n        for(auto ele:richer){\n            edge[ele[0]].push_back(ele[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>vis(n);\n            dfs(i,i,edge,vis,ansc);\n        }\n        \n        vector<int>ans(n);\n        for(int i=0;i<n;i++){\n            int mini=quiet[i],a=i;\n            \n            for(auto ele:ansc[i]){\n                if(mini>=quiet[ele]){\n                    a=ele;\n                    mini=quiet[ele];\n                }\n            }\n            \n            ans[i]=a;\n        }\n        \n        return ans;\n    }\n};",
        "content": "**Finding all ansector of given node and than had a check for most quietest anscestor that the current node**\\n```\\nclass Solution {\\npublic:\\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\\n        \\n        vis[i]=1;\\n        for(auto ele:edge[i]){\\n            if(!vis[ele])dfs(ele,parent,edge,vis,ansc);\\n        }\\n        \\n        if(i!=parent)\\n            ansc[i].push_back(parent);\\n    }\\n    \\n    \\n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\\n        int n=quiet.size();\\n        vector<vector<int>>ansc(n),edge(n);\\n        \\n        for(auto ele:richer){\\n            edge[ele[0]].push_back(ele[1]);\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            vector<int>vis(n);\\n            dfs(i,i,edge,vis,ansc);\\n        }\\n        \\n        vector<int>ans(n);\\n        for(int i=0;i<n;i++){\\n            int mini=quiet[i],a=i;\\n            \\n            for(auto ele:ansc[i]){\\n                if(mini>=quiet[ele]){\\n                    a=ele;\\n                    mini=quiet[ele];\\n                }\\n            }\\n            \\n            ans[i]=a;\\n        }\\n        \\n        return ans;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\n        \n        vis[i]=1;\n       /* for(auto ele:edge[i]){\n            if(!vis[ele])dfs(ele,parent,edge,vis,ansc);\n        }\n        \n        if(i!=parent)\n            ansc[i].push_back(parent);\n    }*/\n    \n    \n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        int n=quiet.size();\n        vector<vector<int>>ansc(n),edge(n);\n        \n        for(auto ele:richer){\n            edge[ele[0]].push_back(ele[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>vis(n);\n            dfs(i,i,edge,vis,ansc);\n        }\n        \n        vector<int>ans(n);\n        for(int i=0;i<n;i++){\n            int mini=quiet[i],a=i;\n            \n            for(auto ele:ansc[i]){\n                if(mini>=quiet[ele]){\n                    a=ele;\n                    mini=quiet[ele];\n                }\n            }\n            \n            ans[i]=a;\n        }\n        \n        return ans;\n    }\n};\n",
        "explanations": "\nThe bug is that an entire block of essential program logic is commented out.\n"
    },
    {
        "slug": "unique-paths-iii",
        "description": "You are given an m x n integer array grid where grid[i][j] could be:\n\n1 representing the starting square. There is exactly one starting square.\n2 representing the ending square. There is exactly one ending square.\n0 representing empty squares we can walk over.\n-1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.",
        "examples": [
            "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)",
            "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)",
            "Input: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid."
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 20\n1 <= m * n <= 20\n-1 <= grid[i][j] <= 2\nThere is exactly one starting cell and one ending cell.",
        "release_time": 1692204101,
        "oracle_code": "class Solution {\npublic:\n   int count = 0 ; // Counter to keep track of the number of unique paths\n   int zeroes = 0 ; // Counter to keep track of the number of empty cells\n\n   // This function recursively explores the grid to find unique paths\n   void creator(vector<vector<int>>& grid, int row, int col, int length) {\n       // Base cases: if the current cell is out of bounds or marked as visited, return\n       if (row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || grid[row][col] == 3 || grid[row][col] == -1)\n           return; \n       \n       // If we encounter the destination (value 2) and all empty cells are covered, increment count\n       if (grid[row][col] == 2 && zeroes == length) {\n           count++;\n           return;\n       }\n       \n       int org = grid[row][col]; // Store the original value of the cell\n       grid[row][col] = 3; // Mark the cell as visited\n       \n       // Explore adjacent cells recursively in all four directions\n       creator(grid, row + 1, col, length + 1);\n       creator(grid, row - 1, col, length + 1);\n       creator(grid, row, col + 1, length + 1);\n       creator(grid, row, col - 1, length + 1);\n       \n       grid[row][col] = org; // Restore the original value of the cell\n       return;\n   }\n\n   int uniquePathsIII(vector<vector<int>>& grid) {\n       int row = 0; \n       int col = 0; \n       int free = 0; // Counter to keep track of the number of cells that can be visited\n\n       // Iterate through the grid to find the starting position and count empty cells\n       for (int i = 0; i < grid.size(); i++) {\n           for (int j = 0; j < grid[0].size(); j++) {\n               if (grid[i][j] == 1) {\n                   row = i; \n                   col = j;\n                   free++;\n               } else if (grid[i][j] == 0 || grid[i][j] == 2) {\n                   free++;\n               }\n           }\n       }\n       \n       zeroes = free; // Update the zeroes counter with the total number of empty cells\n       \n       // Start exploring paths from the initial position\n       creator(grid, row, col, 1);\n       \n       return count; // Return the total count of unique paths\n   }\n};",
        "content": "![image.png](https://assets.leetcode.com/users/images/d2a0428c-0b90-4b7f-839f-aa4ab67262ad_1692204076.471525.png)\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int count = 0 ; // Counter to keep track of the number of unique paths\\n   int zeroes = 0 ; // Counter to keep track of the number of empty cells\\n\\n   // This function recursively explores the grid to find unique paths\\n   void creator(vector<vector<int>>& grid, int row, int col, int length) {\\n       // Base cases: if the current cell is out of bounds or marked as visited, return\\n       if (row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || grid[row][col] == 3 || grid[row][col] == -1)\\n           return; \\n       \\n       // If we encounter the destination (value 2) and all empty cells are covered, increment count\\n       if (grid[row][col] == 2 && zeroes == length) {\\n           count++;\\n           return;\\n       }\\n       \\n       int org = grid[row][col]; // Store the original value of the cell\\n       grid[row][col] = 3; // Mark the cell as visited\\n       \\n       // Explore adjacent cells recursively in all four directions\\n       creator(grid, row + 1, col, length + 1);\\n       creator(grid, row - 1, col, length + 1);\\n       creator(grid, row, col + 1, length + 1);\\n       creator(grid, row, col - 1, length + 1);\\n       \\n       grid[row][col] = org; // Restore the original value of the cell\\n       return;\\n   }\\n\\n   int uniquePathsIII(vector<vector<int>>& grid) {\\n       int row = 0; \\n       int col = 0; \\n       int free = 0; // Counter to keep track of the number of cells that can be visited\\n\\n       // Iterate through the grid to find the starting position and count empty cells\\n       for (int i = 0; i < grid.size(); i++) {\\n           for (int j = 0; j < grid[0].size(); j++) {\\n               if (grid[i][j] == 1) {\\n                   row = i; \\n                   col = j;\\n                   free++;\\n               } else if (grid[i][j] == 0 || grid[i][j] == 2) {\\n                   free++;\\n               }\\n           }\\n       }\\n       \\n       zeroes = free; // Update the zeroes counter with the total number of empty cells\\n       \\n       // Start exploring paths from the initial position\\n       creator(grid, row, col, 1);\\n       \\n       return count; // Return the total count of unique paths\\n   }\\n};\\n\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n   int count = 0 \n   int zeroes = 0 \n\n   void creator(vector<vector<int>>& grid, int row, int col, int length) {\n       if (row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || grid[row][col] == 3 || grid[row][col] == -1)\n           return;\n\n       if (grid[row][col] == 2 && zeroes == length) {\n           count++;\n           return;\n       }\n\n       int org = grid[row][col]; \n       grid[row][col] = 3;\n\n       creator(grid, row + 1, col, length + 1);\n       creator(grid, row - 1, col, length + 1);\n       creator(grid, row, col + 1, length + 1);\n       creator(grid, row, col - 1, length + 1);\n\n       grid[row][col] = org; \n       return;\n   }\n\n   int uniquePathsIII(vector<vector<int>>& grid) {\n       int row = 0;\n       int col = 0; \n       int free = 0;\n\n       for (int i = 0; i < grid.size(); i++) {\n           for (int j = 0; j < grid[0].size(); j++) {\n               if (grid[i][j] == 1) {\n                   row = i; \n                   col = j;\n                   free++;\n               } else if (grid[i][j] == 0 || grid[i][j] == 2) {\n                   free++;\n               }\n           }\n       }\n\n       zeroes = free;\n\n       creator(grid, row, col, 1);\n\n       return count; \n   }\n};\n",
        "explanations": "\nThe semicolons are missing after the variable declarations in the public section.\n"
    },
    {
        "slug": "widest-vertical-area-between-two-points-containing-no-points",
        "description": "Given n points on a 2D plane where points[i] = [xi, yi], Return\u00a0the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.",
        "examples": [
            "\u200b\n\nInput: points = [[8,7],[9,9],[7,4],[9,7]]\nOutput: 1\nExplanation: Both the red and the blue area are optimal.",
            "Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\nOutput: 3"
        ],
        "constraints": "n == points.length\n2 <= n <= 105\npoints[i].length == 2\n0 <= xi, yi\u00a0<= 109",
        "release_time": 1666839967,
        "oracle_code": "class Solution {\npublic:\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n    set<int> x;\n    int res = 0;\n    for (auto &p : points)\n        x.insert(p[0]);\n    for (auto it = next(begin(x)); it != end(x); ++it)\n        res = max(res, *it - *prev(it));\n    return res;\n}\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) {\\n    set<int> x;\\n    int res = 0;\\n    for (auto &p : points)\\n        x.insert(p[0]);\\n    for (auto it = next(begin(x)); it != end(x); ++it)\\n        res = max(res, *it - *prev(it));\\n    return res;\\n}\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n  int maxWidthOfVerticalArea(vector<vector<int>>& points) /*\n    set<int> x;\n    int res = 0;\n    for (auto &p : points)\n        x.insert(p[0]);\n    for (auto it = next(begin(x)); it != end(x); ++it)\n        res = max(res, *it - *prev(it));\n    return res;\n}\n*/;\n",
        "explanations": "\nThe wrong comment mark starts and ends at the wrong place, which comments out all the implementation.\n"
    },
    {
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",
        "examples": [
            "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
            "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 107\nroot is a binary search tree.\n1 <= val <= 107",
        "release_time": 1687509988,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* searchBST(TreeNode* root, int val) {\\n       if(root==NULL) \\n       return NULL;\\n       if(root->val==val)\\n       {\\n           return root;\\n       }\\n       if(root->val>val){\\n          return  searchBST(root->left,val);\\n       }\\n        return searchBST(root->right,val);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    /* \n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n    */\n};\n",
        "explanations": "\nThe entire function is commented out, so it doesn't do anything when called.\n"
    },
    {
        "slug": "maximum-strictly-increasing-cells-in-a-matrix",
        "description": "Given a 1-indexed\u00a0m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.",
        "examples": [
            "Input: mat = [[3,1],[3,4]]\nOutput: 2\nExplanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2.",
            "Input: mat = [[1,1],[1,1]]\nOutput: 1\nExplanation: Since the cells must be strictly increasing, we can only visit one cell in this example.",
            "Input: mat = [[3,1,6],[-9,5,7]]\nOutput: 4\nExplanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4."
        ],
        "constraints": "m == mat.length\u00a0\nn == mat[i].length\u00a0\n1 <= m, n <= 105\n1 <= m * n <= 105\n-105\u00a0<= mat[i][j] <= 105",
        "release_time": 1685246618,
        "oracle_code": "class Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        int n = mat.size(), m = mat[0].size();\n        vector<int> row_max(n), col_max(m);\n        \n        map<int, vector<pair<int, int>>, greater<int>> pos;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                pos[mat[i][j]].push_back({i, j});\n            }\n        }\n        \n        int ans = 0;\n        for (auto& [num, cells]: pos) {\n            int k = cells.size();\n            vector<int> next(k);\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                next[i] = max(row_max[r], col_max[c]) + 1;\n                ans = max(ans, next[i]);\n            }\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                row_max[r] = max(row_max[r], next[i]);\n                col_max[c] = max(col_max[c], next[i]);\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\nAt first I thought of a 2d dp. You can iterate through the matrix in order of decreasing cell value, storing the max number of cells reachable from each cell `mat[i][j]` in `dp[i][j]`. However, for each cell you have to look at all reachable cells (its entire row and column), so the time complexity would be $$O(n*m*(n+m))$$, which isn\\u2019t fast enough.\\n\\nThen I realized you don\\u2019t need to store the max for every cell. As you iterate through the matrix in order of decreasing cell value, you always take the maximum path already found starting in the same row or column. This means you can get away with just storing the max for each row and column.\\n\\n# Approach\\nCreate a map of cell values in decreasing order to (r, c) positions in the matrix with those values. Iterate through this map, updating the vectors row_max and col_max, which store the max number of cells reachable starting from somewhere in each row and column. Be careful to only update row_max and col_max after every cell with a given value has been processed.\\n\\n\\n# Complexity\\n- Time complexity\\n$$O(n*m*log(n*m))$$\\n\\n- Space complexity:\\n$$O(n*m)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxIncreasingCells(vector<vector<int>>& mat) {\\n        int n = mat.size(), m = mat[0].size();\\n        vector<int> row_max(n), col_max(m);\\n        \\n        map<int, vector<pair<int, int>>, greater<int>> pos;\\n        for (int i = 0; i < n; ++i) {\\n            for (int j = 0; j < m; ++j) {\\n                pos[mat[i][j]].push_back({i, j});\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for (auto& [num, cells]: pos) {\\n            int k = cells.size();\\n            vector<int> next(k);\\n            for (int i = 0; i < k; ++i) {\\n                int r = cells[i].first, c = cells[i].second;\\n                next[i] = max(row_max[r], col_max[c]) + 1;\\n                ans = max(ans, next[i]);\\n            }\\n            for (int i = 0; i < k; ++i) {\\n                int r = cells[i].first, c = cells[i].second;\\n                row_max[r] = max(row_max[r], next[i]);\\n                col_max[c] = max(col_max[c], next[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        int n = mat.size(), m = mat[0].size();\n        /*vector<int>*/ row_max(n), col_max(m);\n        \n        map<int, vector<pair<int, int>>, greater<int>> pos;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                pos[mat[i][j]].push_back({i, j});\n            }\n        }\n        \n        int ans = 0;\n        for (auto& [num, cells]: pos) {\n            int k = cells.size();\n            vector<int> next(k);\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                next[i] = max(row_max[r], col_max[c]) + 1;\n                ans = max(ans, next[i]);\n            }\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                row_max[r] = max(row_max[r], next[i]);\n                col_max[c] = max(col_max[c], next[i]);\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe comment mark '/* */' is wrongly placed, making 'vector<int>' a comment, leading to compilation errors.\n"
    },
    {
        "slug": "check-if-there-is-a-valid-path-in-a-grid",
        "description": "You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:\n\n1 which means a street connecting the left cell and the right cell.\n2 which means a street connecting the upper cell and the lower cell.\n3 which means a street connecting the left cell and the lower cell.\n4 which means a street connecting the right cell and the lower cell.\n5 which means a street connecting the left cell and the upper cell.\n6 which means a street connecting the right cell and the upper cell.\n\n\nYou will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.",
        "examples": [
            "Input: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
            "Input: grid = [[1,2,1],[1,2,1]]\nOutput: false\nExplanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)",
            "Input: grid = [[1,1,2]]\nOutput: false\nExplanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2)."
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 300\n1 <= grid[i][j] <= 6",
        "release_time": 1686021362,
        "oracle_code": "class DisjointSet{\npublic:\n    vector<int>par,size;\n    DisjointSet(int n){\n        par.resize(n+1);\n        size.resize(n+1,1);\n        for(int i=0; i<=n; i++){\n            par[i] = i;\n        }\n    }\n    int findpar(int u){\n        if(u == par[u]) return u;\n        return par[u] = findpar(par[u]);\n    }\n\n    void unionBySize(int u, int v){\n        u = findpar(u);\n        v = findpar(v);\n\n        if(u == v) return;\n\n        if(size[u] >= size[v]){\n            par[v] = u;\n            size[u] += size[v];\n        }\n        else{\n            par[u] = v;\n            size[v] += size[u];\n        }\n    }\n    \n};\nclass Solution {\npublic:\n    bool hasValidPath(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        DisjointSet ds(n*m);\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                int p = i * m + j;\n                int p1 = (i-1)*m + j;  // 1\n                int p2 = (i+1)*m + j;  // 1\n                int p3 = i*m + (j+1);  // 2\n                int p4 = i*m + (j-1);  // 2\n\n                if(grid[i][j] == 1){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 2){\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                }\n                else if(grid[i][j] == 3){\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 4){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 5){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 6){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                }\n            }\n        }\n        return ds.findpar(0) == ds.findpar(n*m-1);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass DisjointSet{\\npublic:\\n    vector<int>par,size;\\n    DisjointSet(int n){\\n        par.resize(n+1);\\n        size.resize(n+1,1);\\n        for(int i=0; i<=n; i++){\\n            par[i] = i;\\n        }\\n    }\\n    int findpar(int u){\\n        if(u == par[u]) return u;\\n        return par[u] = findpar(par[u]);\\n    }\\n\\n    void unionBySize(int u, int v){\\n        u = findpar(u);\\n        v = findpar(v);\\n\\n        if(u == v) return;\\n\\n        if(size[u] >= size[v]){\\n            par[v] = u;\\n            size[u] += size[v];\\n        }\\n        else{\\n            par[u] = v;\\n            size[v] += size[u];\\n        }\\n    }\\n    \\n};\\nclass Solution {\\npublic:\\n    bool hasValidPath(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        DisjointSet ds(n*m);\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                int p = i * m + j;\\n                int p1 = (i-1)*m + j;  // 1\\n                int p2 = (i+1)*m + j;  // 1\\n                int p3 = i*m + (j+1);  // 2\\n                int p4 = i*m + (j-1);  // 2\\n\\n                if(grid[i][j] == 1){\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                }\\n                else if(grid[i][j] == 2){\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                }\\n                else if(grid[i][j] == 3){\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n                }\\n                else if(grid[i][j] == 4){\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\\n                        ds.unionBySize(p,p2);\\n                    }\\n                }\\n                else if(grid[i][j] == 5){\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\\n                        ds.unionBySize(p,p4);\\n                    }\\n                }\\n                else if(grid[i][j] == 6){\\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\\n                        ds.unionBySize(p,p1);\\n                    }\\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\\n                        ds.unionBySize(p,p3);\\n                    }\\n                }\\n            }\\n        }\\n        return ds.findpar(0) == ds.findpar(n*m-1);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass DisjointSet{\npublic:\n    vector<int>par,size;\n    DisjointSet(int n){\n        par.resize(n+1);\n        size.resize(n+1,1);\n        for(int i=0; i<=n; i++){\n            par[i] = i;\n        }\n    }\n    int findpar(int u){\n        return par[u] = findpar(par[u]); \n    }\n\n    void unionBySize(int u, int v){\n        u = findpar(u);\n        v = findpar(v);\n\n        if(u == v) return;\n\n        if(size[u] >= size[v]){\n            par[v] = u;\n            size[u] += size[v];\n        }\n        else{\n            par[u] = v;\n            size[v] += size[u];\n        }\n    }\n    \n};\nclass Solution {\npublic:\n    bool hasValidPath(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        DisjointSet ds(n*m);\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                int p = i * m + j;\n                int p1 = (i-1)*m + j;  // 1\n                int p2 = (i+1)*m + j;  // 1\n                int p3 = i*m + (j+1);  // 2\n                int p4 = i*m + (j-1);  // 2\n\n                if(grid[i][j] == 1){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 2){\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                }\n                else if(grid[i][j] == 3){\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 4){\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                    if(i+1 < n && (grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6) ){\n                        ds.unionBySize(p,p2);\n                    }\n                }\n                else if(grid[i][j] == 5){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j-1 >= 0 && (grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6) ){\n                        ds.unionBySize(p,p4);\n                    }\n                }\n                else if(grid[i][j] == 6){\n                    if(i-1>=0 && (grid[i-1][j] == 2 || grid[i-1][j] == 3 || grid[i-1][j] == 4)){\n                        ds.unionBySize(p,p1);\n                    }\n                    if(j+1 < m && (grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5) ){\n                        ds.unionBySize(p,p3);\n                    }\n                }\n            }\n        }\n        return ds.findpar(0) == ds.findpar(n*m-1);\n    }\n};\n",
        "explanations": "\nIn the findpar function, base condition to check if u equals par[u] is removed. This results in infinite recursion.\n"
    },
    {
        "slug": "form-smallest-number-from-two-digit-arrays",
        "description": "Given two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.",
        "examples": [
            "Input: nums1 = [4,1,3], nums2 = [5,7]\nOutput: 15\nExplanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.",
            "Input: nums1 = [3,5,2,6], nums2 = [3,1,7]\nOutput: 3\nExplanation: The number 3 contains the digit 3 which exists in both arrays."
        ],
        "constraints": "1 <= nums1.length, nums2.length <= 9\n1 <= nums1[i], nums2[i] <= 9\nAll digits in each array are unique.",
        "release_time": 1680365144,
        "oracle_code": "class Solution {\npublic:\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\n        map<int,int>mp;\n        for(auto x: nums1) mp[x]++;\n        for(auto x: nums2) mp[x]++;\n        int mn1=*min_element(nums1.begin(),nums1.end());\n        int mn2=*min_element(nums2.begin(),nums2.end());\n        for(auto x: mp){\n            if(x.second>1) return x.first;\n        }\n        string s;\n        if(mn1<mn2) s=to_string(mn1)+ to_string(mn2);\n        else s=to_string(mn2)+ to_string(mn1);\n        return stoi(s);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>mp;\\n        for(auto x: nums1) mp[x]++;\\n        for(auto x: nums2) mp[x]++;\\n        int mn1=*min_element(nums1.begin(),nums1.end());\\n        int mn2=*min_element(nums2.begin(),nums2.end());\\n        for(auto x: mp){\\n            if(x.second>1) return x.first;\\n        }\\n        string s;\\n        if(mn1<mn2) s=to_string(mn1)+ to_string(mn2);\\n        else s=to_string(mn2)+ to_string(mn1);\\n        return stoi(s);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\n        map<int,int>mp;\n        for(auto x: nums1) mp[x]++;\n        for(auto x: nums2) mp[x]++;\n        int mn1=*min_element(nums1.begin(),nums1./end()); \n        int mn2=*min_element(nums2.begin(),nums2.end());\n        for(auto x: mp){\n            if(x.second>1) return x.first;\n        }\n        string s;\n        if(mn1<mn2) s=to_string(mn1)+ to_string(mn2);\n        else s=to_string(mn2)+ to_string(mn1);\n        return stoi(s);\n    }\n};\n",
        "explanations": "\nThe comment mark was placed incorrectly and ended the nums1.begin() function early.\n"
    },
    {
        "slug": "prime-in-diagonal",
        "description": "You are given a 0-indexed two-dimensional integer array nums.\nReturn the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0.\nNote that:\n\nAn integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself.\nAn integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.\n\n\nIn the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].",
        "examples": [
            "Input: nums = [[1,2,3],[5,6,7],[9,10,11]]\nOutput: 11\nExplanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.",
            "Input: nums = [[1,2,3],[5,17,7],[9,11,10]]\nOutput: 17\nExplanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17."
        ],
        "constraints": "1 <= nums.length <= 300\nnums.length == numsi.length\n1 <= nums[i][j]\u00a0<= 4*106",
        "release_time": 1683960047,
        "oracle_code": "class Solution {\npublic:\n    bool check(int x){\n        if(x==1)return false;\n        for(int i = 2; i*i<=x; i++){\n            if(x%i==0)return false;\n        }\n        return true;\n    }\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int i,ans=0,n=nums.size();\n        for(i = 0; i < n; i++){\n            if(check(nums[i][i]) && nums[i][i]>ans){\n                ans = nums[i][i];\n            }\n            if(check(nums[i][n-1-i]) && nums[i][n-1-i]>ans){\n                ans = nums[i][n-1-i];\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(int x){\\n        if(x==1)return false;\\n        for(int i = 2; i*i<=x; i++){\\n            if(x%i==0)return false;\\n        }\\n        return true;\\n    }\\n    int diagonalPrime(vector<vector<int>>& nums) {\\n        int i,ans=0,n=nums.size();\\n        for(i = 0; i < n; i++){\\n            if(check(nums[i][i]) && nums[i][i]>ans){\\n                ans = nums[i][i];\\n            }\\n            if(check(nums[i][n-1-i]) && nums[i][n-1-i]>ans){\\n                ans = nums[i][n-1-i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    bool check(int x){\n        if(x==1)return false;\n        for(int i = 2; i*i<=x; i++){\n            if(x%i==0)return false;\n        }\n        / return true;\n    }\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int i,ans=0,n=nums.size();\n        for(i = 0; i < n; i++){\n            if(check(nums[i][i]) && nums[i][i]>ans){\n                ans = nums[i][i];\n            }\n            if(check(nums[i][n-1-i]) && nums[i][n-1-i]>ans){\n                ans = nums[i][n-1-i];\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe return true statement in the check function is commented out leading to a compile error.\n"
    },
    {
        "slug": "maximum-gap",
        "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.",
        "examples": [
            "Input: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
            "Input: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0."
        ],
        "constraints": "1 <= nums.length <= 105\n0 <= nums[i] <= 109",
        "release_time": 1689500719,
        "oracle_code": "class Solution {\npublic:\n\nvector<int> countsort(vector<int> &nums)\n{\n    int n = nums.size();\n    map<int, int> m;\n    for (int i = 0; i < n; i++ )\n        m[nums[i]]++;\n\n    nums.clear();\n    for (auto it : m)\n    {\n        int cnt = it.second;\n        while (cnt--)\n        {\n            nums.push_back(it.first);\n        }\n    }\n    return nums;\n}\n\nint maximumGap(vector<int> &nums)\n{\n    int n = nums.size();\n    if (n < 2)\n        return 0;\n    vector<int> sortednums = countsort(nums);\n\n    int maxgap = INT_MIN;\n    for (int i = 1; i < n; i++)\n    {\n        int currgap = sortednums[i] - sortednums[i - 1];\n        maxgap = max(maxgap, currgap);\n    }\n\n    return maxgap;\n}\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsince it is given in the question that we can use only linear time and space so we can only use a kind of counting sort , where we required a hash map which take an extra o(n) time complexity.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn counting sort first we required an hash map where we store the frequency of each element and after storing the frequency we just need to fill the original array based on there frequency , here we use an map not unordered map because the map is store value in sorted order.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwe are traversing the array once , so  it is O(n) and an extra (logn)\\nfactor comes because of using the map, but still it is better in terms of time from inbuilt sort function..\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n) we are using only an map so the total extra space is equal to the size of map.\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nvector<int> countsort(vector<int> &nums)\\n{\\n    int n = nums.size();\\n    map<int, int> m;\\n    for (int i = 0; i < n; i++ )\\n        m[nums[i]]++;\\n\\n    nums.clear();\\n    for (auto it : m)\\n    {\\n        int cnt = it.second;\\n        while (cnt--)\\n        {\\n            nums.push_back(it.first);\\n        }\\n    }\\n    return nums;\\n}\\n\\nint maximumGap(vector<int> &nums)\\n{\\n    int n = nums.size();\\n    if (n < 2)\\n        return 0;\\n    vector<int> sortednums = countsort(nums);\\n\\n    int maxgap = INT_MIN;\\n    for (int i = 1; i < n; i++)\\n    {\\n        int currgap = sortednums[i] - sortednums[i - 1];\\n        maxgap = max(maxgap, currgap);\\n    }\\n\\n    return maxgap;\\n}\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\nvector<int> countsort(vector<int> &nums)\n{\n    int n = nums.size();\n    map<int, int> m;\n    for (int i = 0; /**/ i /*/ < n; i++ )\n        m[nums[i]]++;\n\n    nums.clear();\n    for (auto it : m)\n    {\n        int cnt = it.second;\n        while (cnt--)\n        {\n            nums.push_back(it.first);\n        }\n    }\n    return nums;\n}\n\nint maximumGap(vector<int> &nums)\n{\n    int n = nums.size();\n    if (n < 2)\n        return 0;\n    vector<int> sortednums = countsort(nums);\n\n    int maxgap = INT_MIN;\n    for (int i = 1; i < n; i++)\n    {\n        int currgap = sortednums[i] - sortednums[i - 1];\n        maxgap = max(maxgap, currgap);\n    }\n\n    return maxgap;\n}\n};\n",
        "explanations": "\nWildcard characters \"/*/\" are used instead of \" <=\" causing a syntax error.\n"
    },
    {
        "slug": "flood-fill",
        "description": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\nYou are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\nReturn the modified image after performing the flood fill.",
        "examples": [
            "Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.",
            "Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\nOutput: [[0,0,0],[0,0,0]]\nExplanation: The starting pixel is already colored 0, so no changes are made to the image."
        ],
        "constraints": "m == image.length\nn == image[i].length\n1 <= m, n <= 50\n0 <= image[i][j], color < 216\n0 <= sr < m\n0 <= sc < n",
        "release_time": 1685971605,
        "oracle_code": "class Solution {\npublic:\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\n    {\n        // it'll ease the work\n        queue<pair<int,int>> q;\n        q.push({row,col});\n        visited[row][col]=1;\n\n        while(!q.empty())\n        {\n            row = q.front().first;\n            col = q.front().second;\n            q.pop();\n\n            // if img is of the starting color.\n            if(image[row][col]==prevcolor) image[row][col]=color;\n\n            // up\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;\n\n            // right\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;\n\n            //down\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;\n\n            // left\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;\n        }\n    }\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n          int prevcolor = image[sr][sc];\n\n          // visiting array.\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\n\n          bfs(prevcolor,sr,sc,color,visited,image);\n\n          return image;\n    }\n};",
        "content": "# Algo\\n\\n1.  Make a visited array of n*m\\n2. store the initial color.\\n3. do the traversal\\n4. Use queue data structure. \\n\\n\\n# Complexity\\n- Time complexity: O(N*M)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N*M)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\\n    {\\n        // it\\'ll ease the work\\n        queue<pair<int,int>> q;\\n        q.push({row,col});\\n        visited[row][col]=1;\\n\\n        while(!q.empty())\\n        {\\n            row = q.front().first;\\n            col = q.front().second;\\n            q.pop();\\n\\n            // if img is of the starting color.\\n            if(image[row][col]==prevcolor) image[row][col]=color;\\n\\n            // up\\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;\\n\\n            // right\\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;\\n\\n            //down\\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;\\n\\n            // left\\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;\\n        }\\n    }\\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\\n          int prevcolor = image[sr][sc];\\n\\n          // visiting array.\\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\\n\\n          bfs(prevcolor,sr,sc,color,visited,image);\\n\\n          return image;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\n    {\n        // it'll ease the work\n        queue<pair<int,int>> q;\n        q.push({row,col});\n        visited[row][col]=1;\n\n        while(!q.empty())\n        {\n            row = q.front().first;\n            col = q.front().second;\n            q.pop();\n\n            /* if img is of the starting color. */\n            if(image[row][col]==prevcolor) image[row][col]=color;\n\n            // up\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;\n\n            // right\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;\n\n            /*down\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;\n\n            // left\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;\n        }\n    }\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n          int prevcolor = image[sr][sc];\n\n          // visiting array.\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\n\n          bfs(prevcolor,sr,sc,color,visited,image);\n\n          return image;\n    }\n};\n",
        "explanations": "\nThe down and left checks are commented out, preventing BFS from exploring down and left.\n"
    },
    {
        "slug": "shortest-path-to-get-all-keys",
        "description": "You are given an m x n grid grid where:\n\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.",
        "examples": [
            "Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.",
            "Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6",
            "Input: grid = [\"@Aa\"]\nOutput: -1"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either an English letter, '.', '#', or '@'.\u00a0\nThere is exactly one\u00a0'@'\u00a0in the grid.\nThe number of keys in the grid is in the range [1, 6].\nEach key in the grid is unique.\nEach key in the grid has a matching lock.",
        "release_time": 1688006204,
        "oracle_code": "class Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1 << (grid[i][j] - 'a');\n                    continue;\n                }\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            }\n        }\n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1 << (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                    int newi = i + dir[d][0];\n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1 << (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\\n\\n    int shortestPathAllKeys(vector<string>& grid) {\\n        \\n        int m = grid.size();\\n        int n = grid[0].size();\\n        queue<pair<pair<int, int>, int>> que;\\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\\n        int target = 0;\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    target |= 1 << (grid[i][j] - \\'a\\');\\n                    continue;\\n                }\\n\\n                if (grid[i][j] == \\'@\\') {\\n                    que.emplace(pair<int, int>(i, j), 0);\\n                    mapKey[i][j] = 1;\\n                }\\n            }\\n        }\\n\\n\\n        int step = 0;\\n        while (!que.empty()) {\\n            int size = que.size();\\n            for (int s = 0; s < size; s++) {\\n                int i = que.front().first.first;\\n                int j = que.front().first.second;\\n                int key = que.front().second;\\n                que.pop();\\n                \\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    key |= 1 << (grid[i][j] - \\'a\\');\\n                    if (key == target)\\n                        return step;\\n\\n                    mapKey[i][j] |= 1l << key;\\n                }\\n\\n                for (int d = 0; d < 4; d++) {\\n                    int newi = i + dir[d][0];\\n                    int newj = j + dir[d][1];\\n                    \\n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\\n                        continue;\\n                        \\n                    int val = grid[newi][newj];\\n                    if (val == \\'#\\')\\n                        continue;\\n                        \\n                    if (\\'A\\' <= val && val <= \\'F\\' && (key & (1 << (val - \\'A\\'))) == 0)\\n                        continue;\\n                        \\n                    if (mapKey[newi][newj] & (1l << key))\\n                        continue;\\n                        \\n                     mapKey[newi][newj] |= 1l << key;\\n                     que.emplace(pair<int, int>(newi, newj), key);\\n                }\\n            }\\n            step++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1 << (grid[i][j] - 'a');\n                    continue;\n                }\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            }\n        }\n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1 << (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                   \n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1 << (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};\n",
        "explanations": "\nThe code defining newi in the for loop is commented out causing compilation error.\n"
    },
    {
        "slug": "factorial-trailing-zeroes",
        "description": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.",
        "examples": [
            "Input: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.",
            "Input: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.",
            "Input: n = 0\nOutput: 0"
        ],
        "constraints": "0 <= n <= 104",
        "release_time": 1682961619,
        "oracle_code": "class Solution {\npublic:\n    unordered_map<long long int,long long int>mp;\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--)\n         fun(i);\n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    unordered_map<long long int,long long int>mp;\\n    int trailingZeroes(int n) {\\n        for(int i=n;i>=1;i--)\\n         fun(i);\\n         \\n\\t\\t return min(mp[2],mp[5]); \\n    }\\n     void fun(int n)\\n    {\\n         for(int i=2;i*i<=n;i++)\\n         {\\n         \\twhile((n%i) == 0)\\n         \\t{\\n         \\t    mp[i]++;\\n\\t\\t\\t\\tn = n / i;\\t\\n\\t\\t\\t}\\n\\t\\t }\\n\\t\\t if(n > 1)\\n\\t\\t mp[n]++;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    unordered_map<long long int,long long int>mp;\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--)\n        \n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};\n",
        "explanations": "\nLines of code containing function calls shouldn't be commented out, it stops function execution.\n"
    },
    {
        "slug": "most-beautiful-item-for-each-query",
        "description": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the jth query.",
        "examples": [
            "Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\nOutput: [2,4,5,5,6,6]\nExplanation:\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.",
            "Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\nOutput: [4]\nExplanation: \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.",
            "Input: items = [[10,1000]], queries = [5]\nOutput: [0]\nExplanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."
        ],
        "constraints": "1 <= items.length, queries.length <= 105\nitems[i].length == 2\n1 <= pricei, beautyi, queries[j] <= 109",
        "release_time": 1664512625,
        "oracle_code": "class Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};",
        "content": "\\n# C++\\n```\\nclass Solution {\\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\\n        int ans = 0, s = 0, e = items.size() - 1;\\n        while(s <= e) {\\n            int m = (s + e) / 2;\\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\\n            else e = m - 1;\\n        }\\n        return ans;\\n    }\\n\\npublic:\\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\\n        sort(items.begin(), items.end());\\n        vector<int> ans, beauty(items.size(), items[0][1]);\\n\\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\\n\\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\\n        return ans;\\n    }\\n};\\n```\\n\\n# Python\\n```\\nclass Solution(object):\\n    def maximumBeauty(self, items, queries):\\n        items.sort()\\n        ans, beauty = [], [items[0][1]] * len(items)\\n        for i in range(1, len(items)): beauty[i] = max(beauty[i - 1], items[i][1])\\n\\n        def bs(t):\\n            ans, s, e = 0, 0, len(items) - 1\\n            while s <= e:\\n                m = (s + e) // 2\\n                if items[m][0] <= t:\\n                    ans = beauty[m]\\n                    s = m + 1\\n                else: e = m - 1\\n            return ans\\n\\n        for i in queries: ans.append(bs(i))\\n        return ans\\n```\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};\n",
        "explanations": "\nThe comment out of calculation of 'm' leads to its undefined value causing unpredictable behavior.\n"
    },
    {
        "slug": "special-binary-string",
        "description": "Special binary strings are binary strings with the following two properties:\n\nThe number of 0's is equal to the number of 1's.\nEvery prefix of the binary string has at least as many 1's as 0's.\n\nYou are given a special binary string s.\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.",
        "examples": [
            "Input: s = \"11011000\"\nOutput: \"11100100\"\nExplanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.",
            "Input: s = \"10\"\nOutput: \"10\""
        ],
        "constraints": "1 <= s.length <= 50\ns[i] is either '0' or '1'.\ns is a special binary string.",
        "release_time": 1672388328,
        "oracle_code": "class Solution {\npublic:\n    string makeLargestSpecial(string s) {\n        \n        if(s.length()==0)\n            return \"\"; //return null string if size is zero\n\n        vector<string> ans; //list to store all current special substrings\n        int count=0,i=0; //keep track of special substring starting index using \"i\" and \n                         //\"count\" to keep the track of special substring is over or not\n\n        for(int j=0;j<s.size();j++){\n            if(s[j] == '1')\n                count++;\n            else\n                count--;\n            \n            if(count==0){\n                //call recursively using mid special substring\n\n                ans.push_back('1' + makeLargestSpecial(s.substr(i+1,j-i-1)) + '0');\n                i = j+1;\n            }\n        }\n        //sort current substring stored list to fulfill the question demand\n\n        sort(ans.begin(),ans.end(),greater<string>());\n        string finalString = \"\";\n        for(i=0;i<ans.size();i++){\n            finalString += ans[i];\n        }\n        return finalString;\n    }\n};",
        "content": "Reminder: Special substring can not start with 0 as the 2nd condition states there should be atleast as many no of ones as zeroes, \\neg: \"01001\" prefix of this string is \"0\" but it does\\'nt contain any 1s with itself\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string makeLargestSpecial(string s) {\\n        \\n        if(s.length()==0)\\n            return \"\"; //return null string if size is zero\\n\\n        vector<string> ans; //list to store all current special substrings\\n        int count=0,i=0; //keep track of special substring starting index using \"i\" and \\n                         //\"count\" to keep the track of special substring is over or not\\n\\n        for(int j=0;j<s.size();j++){\\n            if(s[j] == \\'1\\')\\n                count++;\\n            else\\n                count--;\\n            \\n            if(count==0){\\n                //call recursively using mid special substring\\n\\n                ans.push_back(\\'1\\' + makeLargestSpecial(s.substr(i+1,j-i-1)) + \\'0\\');\\n                i = j+1;\\n            }\\n        }\\n        //sort current substring stored list to fulfill the question demand\\n\\n        sort(ans.begin(),ans.end(),greater<string>());\\n        string finalString = \"\";\\n        for(i=0;i<ans.size();i++){\\n            finalString += ans[i];\\n        }\\n        return finalString;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    string makeLargestSpecial(string s) {\n        \n        if(s.length()==0)\n            return \"\"; /* return null string if size is zero\n\n        vector<string> ans; //list to store all current special substrings\n        int count=0,i=0; //keep track of special substring starting index using \"i\" and \n                         //\"count\" to keep the track of special substring is over or not\n\n        for(int j=0;j<s.size();j++){\n            if(s[j] == '1')\n                count++;\n            else\n                count--;\n            \n            if(count==0){\n                //call recursively using mid special substring\n\n                ans.push_back('1' + makeLargestSpecial(s.substr(i+1,j-i-1)) + '0');\n                i = j+1;\n            }\n        }\n        //sort current substring stored list to fulfill the question demand\n\n        sort(ans.begin(),ans.end(),greater<string>());\n        string finalString = \"\";\n        for(i=0;i<ans.size();i++){\n            finalString += ans[i];\n        }\n        return finalString;\n    }\n};\n",
        "explanations": "\nThe multi-line comment incorrectly contains code, resulting in the omission of code lines.\n"
    },
    {
        "slug": "determine-color-of-a-chessboard-square",
        "description": "You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.",
        "examples": [
            "Input: coordinates = \"a1\"\nOutput: false\nExplanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.",
            "Input: coordinates = \"h3\"\nOutput: true\nExplanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.",
            "Input: coordinates = \"c7\"\nOutput: false"
        ],
        "constraints": "coordinates.length == 2\n'a' <= coordinates[0] <= 'h'\n'1' <= coordinates[1] <= '8'",
        "release_time": 1687862385,
        "oracle_code": "class Solution {\npublic:\n    bool squareIsWhite(string coordinates) {\n        if(coordinates[0]%2==0 && coordinates[1]%2!=0) return true;\n        else if(coordinates[0]%2!=0 && coordinates[1]%2==0) return true;\n        else return false;\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool squareIsWhite(string coordinates) {\\n        if(coordinates[0]%2==0 && coordinates[1]%2!=0) return true;\\n        else if(coordinates[0]%2!=0 && coordinates[1]%2==0) return true;\\n        else return false;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    \n        if(coordinates[0]%2==0 && coordinates[1]%2!=0) return true;\n        else if(coordinates[0]%2!=0 && coordinates[1]%2==0) return true;\n        else return false;\n    \n};\n",
        "explanations": "\nThe method \"squareIsWhite\" is commented which will break the class compilation.\n"
    },
    {
        "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
        "description": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.",
        "examples": [
            "Input: nums = [8,2,4,7], limit = 4\nOutput: 2 \nExplanation: All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.",
            "Input: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4 \nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.",
            "Input: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3"
        ],
        "constraints": "1 <= nums.length <= 105\n1 <= nums[i] <= 109\n0 <= limit <= 109",
        "release_time": 1691818682,
        "oracle_code": "class Solution {\npublic:\n    int longestSubarray(vector<int>& nums, int limit) {\n        int ans=1,l=0,h=1,count=1;\n        map<int,int> mp;\n        mp[nums[l]]++;\n        \n        while(h<nums.size()){\n            mp[nums[h]]++;\n            count++; //counting the number of elements in map\n            \n            if(prev(mp.end())->first - mp.begin()->first <= limit){ // checking the diff \n                ans=max(ans,count); // giving the size of subarray that may make our answer\n            }else{\n                // If diff is more than limit then we'll start deleting the indexes from left side until we get the max and minimum value such that diff is in range\n                while(prev(mp.end())->first - mp.begin()->first > limit && l<h){\n                    if(mp[nums[l]]>1)mp[nums[l]]--;\n                    else mp.erase(nums[l]);\n                    count--;\n                    l++;\n                }\n            }\n            h++;\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1-> We can use window sliding and keep all the values in map that can tell us min and max value in that window.\\n2-> If the range (i.e., max-min) is greater than limit then we need to delete element from the left of window that we can do using map in O(1).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1 -> keep inserting the values in map and keep increasing the size of window, until we found max-min>limit and Keep updating the size of window as answer.\\n2-> If max-min>limit, then we can start deleting the values from map. This can be done by getting the left indexes of window and acces the value at that index and delete it from map.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nsince we are using map here, so complexity for map is O(Nlog(N));\\nand we are traversing the array from 0-N then it\\'ll take O(N);\\n\\nSo overall, **Time complexity: O(Nlog(N))**.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nsince we are using one extra map here, so **space complexity is O(N)**.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubarray(vector<int>& nums, int limit) {\\n        int ans=1,l=0,h=1,count=1;\\n        map<int,int> mp;\\n        mp[nums[l]]++;\\n        \\n        while(h<nums.size()){\\n            mp[nums[h]]++;\\n            count++; //counting the number of elements in map\\n            \\n            if(prev(mp.end())->first - mp.begin()->first <= limit){ // checking the diff \\n                ans=max(ans,count); // giving the size of subarray that may make our answer\\n            }else{\\n                // If diff is more than limit then we\\'ll start deleting the indexes from left side until we get the max and minimum value such that diff is in range\\n                while(prev(mp.end())->first - mp.begin()->first > limit && l<h){\\n                    if(mp[nums[l]]>1)mp[nums[l]]--;\\n                    else mp.erase(nums[l]);\\n                    count--;\\n                    l++;\\n                }\\n            }\\n            h++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestSubarray(vector<int>& nums, int limit) {\n        int ans=1,l=0,h=1,count=1;\n        map<int,int> mp;\n        mp[nums[l]]++;\n        \n        while(h<nums.size()){\n            mp[nums[h]]++;\n            count++ \n            \n            if(prev(mp.end())->first - mp.begin()->first <= limit){ // checking the diff \n                ans=max(ans,count); // giving the size of subarray that may make our answer\n            }else{\n                // If diff is more than limit then we'll start deleting the indexes from left side until we get the max and minimum value such that diff is in range\n                while(prev(mp.end())->first - mp.begin()->first > limit && l<h){\n                    if(mp[nums[l]]>1)mp[nums[l]]--;\n                    else mp.erase(nums[l]);\n                    count--;\n                    l++;\n                }\n            }\n            h++;\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nMissing semicolon after incrementing 'count' results in compilation error.\n"
    },
    {
        "slug": "lru-cache",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.",
        "examples": [
            "Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
        ],
        "constraints": "1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.",
        "release_time": 1689644680,
        "oracle_code": "class LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,value));\n        mpp[_key] = head->next;\n    }\n};",
        "content": "# PLEASE DO UPVOTE!!!!!\\n\\n**CONNECT WITH ME ON LINKEDIN :  https://www.linkedin.com/in/md-kamran-55b98521a/**\\n\\n## INTUITION\\nTo Implement LRU(Least recently used), we need to have a track of the usage of the keys, in the order of there usage, as we have a limited capacity we cant extend our capacity beyond \"capacity\", so we always we will take out those values which has\\'nt been acccess in the recent time.So, we have to think of something that can kind of sort our keys according to usage on the go, the best Data Structure for this purpose is Doubly linked List.\\n                             A Doubly linked list will have a Head node as well as a tail node, and whenever a key is used we will place it just next to the head node,in this fashions, the one\\'s which are closer to head are the most recently used ones, and as we go closer to the tail node, those are the less recently used ones while the node just previous to tail is the \"LEAST RECENTLY USED\". \\nSo whenever we add a key or use a key(get()), we will move it right after the head node, and whenever we call the (put() function), if size if greater we have to delete the LRU node, if key is not present, (if present then too we will delete that node so as to update the value and still move it right after head node), and place new node right after head node.                        \\n\\n\\n**Ask Furthur Doubts in the Comment Section**\\n# Code\\n```\\nclass LRUCache {\\npublic:\\nclass node\\n{\\n  public:\\n  int key;\\n  int val;\\n  node* next;\\n  node* prev;\\n  node(int _key,int _val)\\n  {\\n    key = _key;\\n    val = _val;\\n  }\\n};\\nnode* head = new node(-1,-1);\\nnode* tail = new node(-1,-1);\\n\\nint size;\\nunordered_map<int,node*>mpp;\\n    LRUCache(int capacity) {\\n       size = capacity; \\n       head->next = tail;\\n       tail->prev = head;  \\n    }\\n\\n    void addNode(node* newNode){\\n       \\n       node* temp = head->next;\\n       newNode->next = temp;\\n       newNode->prev = head;\\n       head->next = newNode;\\n       temp->prev = newNode;\\n    }\\n\\n    void deleteNode(node* delNode){\\n         \\n       node* delprev = delNode->prev;\\n       node* delnext = delNode->next;\\n       delprev->next = delnext;\\n       delnext->prev = delprev;\\n    }\\n    \\n    int get(int _key) {\\n        \\n        if(mpp.count(_key))\\n        {\\n          node* nde = mpp[_key];\\n          int curr = nde->val;\\n          mpp.erase(_key);\\n          deleteNode(nde);\\n          addNode(nde);\\n          mpp[_key] = head->next;\\n          return curr;\\n        }\\n        return -1;\\n    }\\n    \\n    void put(int _key, int value) {\\n        \\n        if(mpp.count(_key))\\n        {\\n           node* nde = mpp[_key];\\n           mpp.erase(_key);\\n           deleteNode(nde);\\n        }\\n        if(mpp.size()==size)\\n        {\\n           mpp.erase(tail->prev->key);\\n           deleteNode(tail->prev);\\n        }\\n        addNode(new node(_key,value));\\n        mpp[_key] = head->next;\\n    }\\n};\\n\\n```\\n![b62ab1be-232a-438f-9524-7d8ca4dbd5fe_1675328166.1161866.png](https://assets.leetcode.com/users/images/8d5343b1-0eb4-4111-a914-40ce968fd034_1675389764.2273676.png)",
        "level": "medium",
        "buggy_code": "\nclass LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    /*void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }*/\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,value));\n        mpp[_key] = head->next;\n    }\n};\n",
        "explanations": "\nThe deleteNode function is commented out, which causes errors when the program tries to call it.\n"
    },
    {
        "slug": "find-the-winner-of-the-circular-game",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n\nStart at the 1st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, n, and an integer k, return the winner of the game.",
        "examples": [
            "Input: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
            "Input: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
        ],
        "constraints": "1 <= k <= n <= 500",
        "release_time": 1685857914,
        "oracle_code": "class Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        queue<int> q;\n        for(int i=1;i<=n;i++){\n            q.push(i);\n        }\n        while(q.size()!=1){\n            int temp=k-1;\n            while(temp>0){\n                int t=q.front();\n                q.pop();\n                q.push(t);\n                temp--;\n            }\n            q.pop();\n        }\n        return q.front();\n    }\n};",
        "content": "# Intuition\\nEliminate a person after every k turns until a single person is left.\\nn and k have really small values. Simply simulate the process.\\n\\n# Approach\\n- Create a queue which initially contains numbers from 1 to n.\\n- For k-1 times, shift the first element of the queue to the end of the queue and pop the element from queue at the kth turn.\\n- Do above step until queue have only 1 element left which is the required answer.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*k)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findTheWinner(int n, int k) {\\n        queue<int> q;\\n        for(int i=1;i<=n;i++){\\n            q.push(i);\\n        }\\n        while(q.size()!=1){\\n            int temp=k-1;\\n            while(temp>0){\\n                int t=q.front();\\n                q.pop();\\n                q.push(t);\\n                temp--;\\n            }\\n            q.pop();\\n        }\\n        return q.front();\\n    }\\n};\\n```\\n**Please upvote if it helped. Happy Coding!**",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        queue<int> q;\n        for(int i=1;i/*=*/n;i++){\n            q.push(i);\n        }\n        while(q.size()!=1){\n            int temp=k-1;\n            while(temp>0){\n                int t=q.front();\n                q.pop();\n                q.push(t);\n                temp--;\n            }\n            q.pop();\n        }\n        return q.front();\n    }\n};\n",
        "explanations": "\n'=' operator instead of '<=' in for loop would prevent queue from including the last number.\n"
    },
    {
        "slug": "kth-largest-element-in-a-stream",
        "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.",
        "examples": [
            "Input\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
        ],
        "constraints": "1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.",
        "release_time": 1684824347,
        "oracle_code": "class KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position=k;\n        for(int i=0; i<nums.size(); i++){\n            if(pq.size()<k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top()<nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size()<position){\n            pq.push(val);\n        }\n        else if(pq.top()<val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass KthLargest {\\npublic:\\n    priority_queue<int,vector<int>,greater<int>> pq;\\n    int position;\\n    KthLargest(int k, vector<int>& nums) {\\n        position=k;\\n        for(int i=0; i<nums.size(); i++){\\n            if(pq.size()<k){\\n                pq.push(nums[i]);\\n            }\\n            else if(pq.top()<nums[i]){\\n                pq.pop();\\n                pq.push(nums[i]);\\n            }\\n        }\\n    }\\n    \\n    int add(int val) {\\n        if(pq.size()<position){\\n            pq.push(val);\\n        }\\n        else if(pq.top()<val){\\n            pq.pop();\\n            pq.push(val);\\n        }\\n        return pq.top();\\n    }\\n};\\n\\n/**\\n * Your KthLargest object will be instantiated and called as such:\\n * KthLargest* obj = new KthLargest(k, nums);\\n * int param_1 = obj->add(val);\\n */\\n```",
        "level": "easy",
        "buggy_code": "\nclass KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position=k;\n        /* for(int i=0; i<nums.size(); i++){\n            if(pq.size()<k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top()<nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }*/\n    }\n    \n    int add(int val) {\n        if(pq.size()<position){\n            pq.push(val);\n        }\n        else if(pq.top()<val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n",
        "explanations": "\nThe constructor's loop is improperly commented causing the object unable to initialize properly.\n"
    },
    {
        "slug": "plus-one",
        "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.",
        "examples": [
            "Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].",
            "Input: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].",
            "Input: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."
        ],
        "constraints": "1 <= digits.length <= 100\n0 <= digits[i] <= 9\ndigits does not contain any leading 0's.",
        "release_time": 1691775412,
        "oracle_code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n=digits.size();\n        digits[n-1]++;\n        for(int i=n-1;i>=1;i--)\n        {\n            if(digits[i]>9)\n            {\n                digits[i]%=10;\n                digits[i-1]++;\n            }\n        }\n        if(digits[0]>9)\n        {\n            digits.insert(digits.begin(),1);\n            digits[1]%=10;\n        }\n        return digits;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsimple iterative approach.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIterated all index from the end , then manually checked for 0th index and did the needful.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        digits[n-1]++;\\n        for(int i=n-1;i>=1;i--)\\n        {\\n            if(digits[i]>9)\\n            {\\n                digits[i]%=10;\\n                digits[i-1]++;\\n            }\\n        }\\n        if(digits[0]>9)\\n        {\\n            digits.insert(digits.begin(),1);\\n            digits[1]%=10;\\n        }\\n        return digits;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        /int n=digits.size();\n        digits[n-1]++;\n        for(int i=n-1;i>=1;i--)\n        {\n            if(digits[i]>9)\n            {\n                digits[i]%=10;\n                digits[i-1]++;\n            }\n        }\n        if(digits[0]>9)\n        {\n            digits.insert(digits.begin(),1);\n            digits[1]%=10;\n        }\n        return digits;\n    }\n};\n",
        "explanations": "\nThe initialization of 'n' is erroneously commented out, causing an uninitialized variable error.\n"
    },
    {
        "slug": "knight-probability-in-chessboard",
        "description": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\nReturn the probability that the knight remains on the board after it has stopped moving.",
        "examples": [
            "Input: n = 3, k = 2, row = 0, column = 0\nOutput: 0.06250\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.",
            "Input: n = 1, k = 0, row = 0, column = 0\nOutput: 1.00000"
        ],
        "constraints": "1 <= n <= 25\n0 <= k <= 100\n0 <= row, column <= n - 1",
        "release_time": 1690007879,
        "oracle_code": "class Solution {\npublic:\n    double f(int i,int j,int k,int n,vector<vector<vector<double>>> &dp){\n        if(k==0) return 1.0;\n\n        if(dp[i][j][k]!=-1.0) return dp[i][j][k];\n        int dx[]={-2,-2,-1,1,2,2,1,-1},dy[]={-1,1,2,2,1,-1,-2,-2};\n        double ans = 0.0;\n        for(int t=0;t<8;t++){\n            int nx=i+dx[t],ny=j+dy[t];\n            if(nx>=0 && nx<n && ny>=0 && ny<n){\n                ans += f(nx,ny,k-1,n,dp);\n            }\n        }\n\n        return dp[i][j][k]=ans;\n    }\n    double knightProbability(int n, int k, int row, int column) {\n        vector<vector<vector<double>>> dp(n,vector<vector<double>>(n,vector<double>(k+1,-1.0)));\n        double ct=f(row,column,k,n,dp);\n        for(int i=0;i<k;i++){\n            ct = ct/8;\n        }\n\n        return ct;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*n*k)\\n\\n- Space complexity: O(n*n*k)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double f(int i,int j,int k,int n,vector<vector<vector<double>>> &dp){\\n        if(k==0) return 1.0;\\n\\n        if(dp[i][j][k]!=-1.0) return dp[i][j][k];\\n        int dx[]={-2,-2,-1,1,2,2,1,-1},dy[]={-1,1,2,2,1,-1,-2,-2};\\n        double ans = 0.0;\\n        for(int t=0;t<8;t++){\\n            int nx=i+dx[t],ny=j+dy[t];\\n            if(nx>=0 && nx<n && ny>=0 && ny<n){\\n                ans += f(nx,ny,k-1,n,dp);\\n            }\\n        }\\n\\n        return dp[i][j][k]=ans;\\n    }\\n    double knightProbability(int n, int k, int row, int column) {\\n        vector<vector<vector<double>>> dp(n,vector<vector<double>>(n,vector<double>(k+1,-1.0)));\\n        double ct=f(row,column,k,n,dp);\\n        for(int i=0;i<k;i++){\\n            ct = ct/8;\\n        }\\n\\n        return ct;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    double f(int i,int j,int k,int n,vector<vector<vector<double>>> &dp){\n        if(k==0) return 1.0;\n\n        if(dp[i][j][k]!=-1.0) return dp[i][j][k];\n        int dx[]={-2,-2,-1,1,2,2,1,-1},dy[]={-1,1,2,2,1,-1,-2,-2};\n        double ans = 0.0;\n        for(int t=0;/*t<8;*/t++){\n            int nx=i+dx[t],ny=j+dy[t];\n            if(nx>=0 && nx<n && ny>=0 && ny<n){\n                ans += f(nx,ny,k-1,n,dp);\n            }\n        }\n\n        return dp[i][j][k]=ans;\n    }\n    double knightProbability(int n, int k, int row, int column) {\n        vector<vector<vector<double>>> dp(n,vector<vector<double>>(n,vector<double>(k+1,-1.0)));\n        double ct=f(row,column,k,n,dp);\n        for(int i=0;i<k;i++){\n            ct = ct/8;\n        }\n\n        return ct;\n    }\n};\n",
        "explanations": "\nThe for loop condition 't<8' is commented, causing an infinite loop and program crash.\n"
    }
]