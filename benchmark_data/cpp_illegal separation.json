[
    {
        "slug": "flood-fill",
        "description": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\nYou are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\nReturn the modified image after performing the flood fill.",
        "examples": [
            "Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.",
            "Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\nOutput: [[0,0,0],[0,0,0]]\nExplanation: The starting pixel is already colored 0, so no changes are made to the image."
        ],
        "constraints": "m == image.length\nn == image[i].length\n1 <= m, n <= 50\n0 <= image[i][j], color < 216\n0 <= sr < m\n0 <= sc < n",
        "release_time": 1685971605,
        "oracle_code": "class Solution {\npublic:\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\n    {\n        // it'll ease the work\n        queue<pair<int,int>> q;\n        q.push({row,col});\n        visited[row][col]=1;\n\n        while(!q.empty())\n        {\n            row = q.front().first;\n            col = q.front().second;\n            q.pop();\n\n            // if img is of the starting color.\n            if(image[row][col]==prevcolor) image[row][col]=color;\n\n            // up\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;\n\n            // right\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;\n\n            //down\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;\n\n            // left\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;\n        }\n    }\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n          int prevcolor = image[sr][sc];\n\n          // visiting array.\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\n\n          bfs(prevcolor,sr,sc,color,visited,image);\n\n          return image;\n    }\n};",
        "content": "# Algo\\n\\n1.  Make a visited array of n*m\\n2. store the initial color.\\n3. do the traversal\\n4. Use queue data structure. \\n\\n\\n# Complexity\\n- Time complexity: O(N*M)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N*M)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\\n    {\\n        // it\\'ll ease the work\\n        queue<pair<int,int>> q;\\n        q.push({row,col});\\n        visited[row][col]=1;\\n\\n        while(!q.empty())\\n        {\\n            row = q.front().first;\\n            col = q.front().second;\\n            q.pop();\\n\\n            // if img is of the starting color.\\n            if(image[row][col]==prevcolor) image[row][col]=color;\\n\\n            // up\\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;\\n\\n            // right\\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;\\n\\n            //down\\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;\\n\\n            // left\\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;\\n        }\\n    }\\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\\n          int prevcolor = image[sr][sc];\\n\\n          // visiting array.\\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\\n\\n          bfs(prevcolor,sr,sc,color,visited,image);\\n\\n          return image;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)\n    {\n        // it'll ease the work\n        queue<pair<int,int>> q;\n        q.push({row,col});\n        visited[row][col]=1;\n\n        while(!q.empty())\n        {\n            row = q.front().first;\n            col = q.front().second;\n            q.pop();\n\n            // if img is of the starting color.\n            if(image[row][col]==prevcolor) \n              image[row][col]=color;\n            \n            // up\n            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) \n              q.push({row-1,col});\n              visited[row-1][col]=1;\n              image[row-1][col]=color;\n\n            // right\n            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) \n              q.push({row,col+1});\n              visited[row][col+1]=1;\n              image[row][col+1]=color;\n\n            //down\n            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) \n              q.push({row+1,col});\n              visited[row+1][col]=1; \n              image[row+1][col]=color;\n\n            // left\n            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) \n              q.push({row,col-1});\n              visited[row][col-1]=1;\n              image[row][col-1]=color;\n        }\n    }\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n          int prevcolor = image[sr][sc];\n\n          // visiting array.\n          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));\n\n          bfs(prevcolor,sr,sc,color,visited,image);\n\n          return image;\n    }\n};\n",
        "explanations": "\nThe bug is statement separation. The last 2 statements inside if conditions are not controlled by the conditions.\n"
    },
    {
        "slug": "kth-ancestor-of-a-tree-node",
        "description": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the kth ancestor of a given node.\nThe kth ancestor of a tree node is the kth node in the path from that node to the root node.\nImplement the TreeAncestor class:\n\nTreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the tree and the parent array.\nint getKthAncestor(int node, int k) return the kth ancestor of the given node node. If there is no such ancestor, return -1.",
        "examples": [
            "Input\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\nOutput\n[null, 1, 0, -1]\n\nExplanation\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor"
        ],
        "constraints": "1 <= k <= n <= 5 * 104\nparent.length == n\nparent[0] == -1\n0 <= parent[i] < n for all 0 < i < n\n0 <= node < n\nThere will be at most 5 * 104 queries.",
        "release_time": 1667792667,
        "oracle_code": "class TreeAncestor {\npublic:\n    vector<vector<int>>v;\n    TreeAncestor(int n, vector<int>& parent) {\n        vector<vector<int>> par(n, vector<int>(20));\n        for (int i = 0; i < n; i++) par[i][0] = parent[i];\n        for (int j = 1; j < 20; j++) {\n            for (int i = 0; i < n; i++) {\n                if (par[i][j - 1] == -1) par[i][j] = -1;\n                else par[i][j] = par[par[i][j - 1]][j - 1];\n            }\n        }\n        swap(v, par);\n    }\n    int getKthAncestor(int node, int k) {\n        for (int i = 0; i < 20; i++) {\n            if ((k >> i) & 1) {\n                node = v[node][i];\n                if (node == -1) return -1;\n            }\n        }\n        return node;\n    }\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n * int param_1 = obj->getKthAncestor(node,k);\n */",
        "content": "\\n\\n# Code\\n```\\nclass TreeAncestor {\\npublic:\\n    vector<vector<int>>v;\\n    TreeAncestor(int n, vector<int>& parent) {\\n        vector<vector<int>> par(n, vector<int>(20));\\n        for (int i = 0; i < n; i++) par[i][0] = parent[i];\\n        for (int j = 1; j < 20; j++) {\\n            for (int i = 0; i < n; i++) {\\n                if (par[i][j - 1] == -1) par[i][j] = -1;\\n                else par[i][j] = par[par[i][j - 1]][j - 1];\\n            }\\n        }\\n        swap(v, par);\\n    }\\n    int getKthAncestor(int node, int k) {\\n        for (int i = 0; i < 20; i++) {\\n            if ((k >> i) & 1) {\\n                node = v[node][i];\\n                if (node == -1) return -1;\\n            }\\n        }\\n        return node;\\n    }\\n};\\n\\n/**\\n * Your TreeAncestor object will be instantiated and called as such:\\n * TreeAncestor* obj = new TreeAncestor(n, parent);\\n * int param_1 = obj->getKthAncestor(node,k);\\n */\\n```",
        "level": "hard",
        "buggy_code": "\nclass TreeAncestor {\npublic:\n    vector<vector<int>>v;\n    TreeAncestor(int n, vector<int>& parent) {\n        vector<vector<int>> par(n, vector<int>(20));\n        for (int i = 0; i < n; i++) \n            par[i][0] = parent[i];\n            for (int j = 1; j < 20; j++) {\n            for (int i = 0; i < n; i++) {\n                if (par[i][j - 1] == -1) \n                    par[i][j] = -1;\n                else \n                par[i][j] = par[par[i][j - 1]][j - 1];\n            }\n        }\n        swap(v, par);\n    }\n    int getKthAncestor(int node, int k) {\n        for (int i = 0; i < 20; i++) {\n            if ((k >> i) & 1) {\n                node = v[node][i];\n                if (node == -1) \n                return -1;\n            }\n        return node;\n        }\n    }\n};\n",
        "explanations": "\nA curly brace is missing after the \"for\" loop in the getKthAncestor method, causing unexpected behavior.\n"
    },
    {
        "slug": "most-frequent-even-element",
        "description": "Given an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.",
        "examples": [
            "Input: nums = [0,1,2,2,4,4,1]\nOutput: 2\nExplanation:\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.",
            "Input: nums = [4,4,4,9,2,4]\nOutput: 4\nExplanation: 4 is the even element appears the most.",
            "Input: nums = [29,47,21,41,13,37,25,7]\nOutput: -1\nExplanation: There is no even element."
        ],
        "constraints": "1 <= nums.length <= 2000\n0 <= nums[i] <= 105",
        "release_time": 1673020570,
        "oracle_code": "class Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        int n = nums.size(),i;\n        map<int , int> freq;\n        for(auto x:nums){\n            freq[x]++;\n        }\n        int evefreq=0,ans=-1;\n        for(auto y:freq){\n            if(y.first%2==0 && y.second> evefreq){\n                ans=y.first;\n                evefreq=y.second;\n            }\n        }\n        return ans;\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostFrequentEven(vector<int>& nums) {\\n        int n = nums.size(),i;\\n        map<int , int> freq;\\n        for(auto x:nums){\\n            freq[x]++;\\n        }\\n        int evefreq=0,ans=-1;\\n        for(auto y:freq){\\n            if(y.first%2==0 && y.second> evefreq){\\n                ans=y.first;\\n                evefreq=y.second;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        int n = nums.size(),i;\n        map<int , int> freq;\n        for(auto x:nums)\n            freq[x]++;\n        int evefreq=0,ans=-1;\n        for(auto y:freq)\n            if(y.first%2==0 && y.second> evefreq)\n                ans=y.first;\n                evefreq=y.second;\n        return ans;\n    }\n};\n",
        "explanations": "\nThere's a missing bracket for the if-statement in the second loop causing wrong assignment to evefreq.\n"
    },
    {
        "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
        "description": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.",
        "examples": [
            "Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]\nOutput: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3.",
            "Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nOutput: [[],[0],[0,1],[0,1,2],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3."
        ],
        "constraints": "1 <= n <= 1000\n0 <= edges.length <= min(2000, n * (n - 1) / 2)\nedges[i].length == 2\n0 <= fromi, toi <= n - 1\nfromi != toi\nThere are no duplicate edges.\nThe graph is directed and acyclic.",
        "release_time": 1662523826,
        "oracle_code": "class Solution {\npublic:\n   \n    void dfs(int i,int ansc,vector<vector<int>>&ans,vector<int>&vis,vector<vector<int>>&res){\n             \n        vis[i]=1;\n        \n        for(auto t:ans[i]){\n            if(!vis[t]){\n                dfs(t,ansc,ans,vis,res);\n            }\n        }\n       \n        if(i!=ansc)\n            res[i].push_back(ansc);\n    }\n    \n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n        \n        vector<vector<int>>ans(n),result(n);\n        \n        for(auto a:edges){\n            ans[a[0]].push_back(a[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>visited(n);\n            dfs(i,i,ans,visited,result);\n        }\n      \n        return result;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n   \\n    void dfs(int i,int ansc,vector<vector<int>>&ans,vector<int>&vis,vector<vector<int>>&res){\\n             \\n        vis[i]=1;\\n        \\n        for(auto t:ans[i]){\\n            if(!vis[t]){\\n                dfs(t,ansc,ans,vis,res);\\n            }\\n        }\\n       \\n        if(i!=ansc)\\n            res[i].push_back(ansc);\\n    }\\n    \\n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\\n        \\n        vector<vector<int>>ans(n),result(n);\\n        \\n        for(auto a:edges){\\n            ans[a[0]].push_back(a[1]);\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            vector<int>visited(n);\\n            dfs(i,i,ans,visited,result);\\n        }\\n      \\n        return result;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n   \n    void dfs(int i,int ansc,vector<vector<int>>&ans,vector<int>&vis,vector<vector<int>>&res){\n             \n        vis[i]=1;\n        for(auto t:ans[i]){\n            if(!vis[t])\n                dfs(t,ansc,ans,vis,res)\n        }\n        if(i!=ansc)\n            res[i].push_back(ansc);\n    }\n    \n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n        \n        vector<vector<int>>ans(n),result(n);\n        \n        for(auto a:edges){\n            ans[a[0]].push_back(a[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>visited(n);\n            dfs(i,i,ans,visited,result);\n        }\n      \n        return result;\n    }\n};\n",
        "explanations": "\nI omitted the semicolon at the end of dfs function call resulting in statement separation error.\n"
    },
    {
        "slug": "rotate-array",
        "description": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.",
        "examples": [
            "Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]",
            "Input: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
        ],
        "constraints": "1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n0 <= k <= 105",
        "release_time": 1681732437,
        "oracle_code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<int> temp(nums.size());\n        for(int i=0;i<n;i++){\n            temp[(i+k)%n]=nums[i];\n        }\n        nums=temp;\n    }\n};",
        "content": "# Approach\\nhere i is of loop which starts form (0,1,2...) k is the value how many times you want to rotate and n is the size of first vector ,and after that new indexes will be generated in our temp vector and we have to put values of nums vector at new indexes . . . \\nlike for first  arr[1,2,3,4,5,6,7]  and k=3     so ,\\ntemp[0 + 3 % 7]=nums[i]\\ntemp[3 % 7]=nums[i]\\ntemp[3] = nums[i]\\n[_ , _ , _ , 1 , _ ,_ , _ ]\\nfor next ,\\ntemp[1 + 3 % 7]=nums[i]\\ntemp[4 % 7]=nums[i]\\ntemp[4] = nums[i]\\n[_ , _ , _ , 1 , 2 ,_ , _ ]   and so on \\ni hope you understand ..\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void rotate(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int> temp(nums.size());\\n        for(int i=0;i<n;i++){\\n            temp[(i+k)%n]=nums[i];\\n        }\\n        nums=temp;\\n    }\\n};\\n```\\n![upvote 1.jpeg](https://assets.leetcode.com/users/images/565d5fa5-1370-44d9-a6b6-0cf06d575aae_1681731352.2608747.jpeg)\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) \n    int n=nums.size();\n    vector<int> temp(nums.size());\n    for(int i=0;i<n;i++){\n        temp[(i+k)%n]=nums[i];\n    }\n    nums=temp;\n};\n",
        "explanations": "\nThe opening brace for rotate function is missing, causing compilation error due to incorrect structuring.\n"
    },
    {
        "slug": "maximum-strictly-increasing-cells-in-a-matrix",
        "description": "Given a 1-indexed\u00a0m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.",
        "examples": [
            "Input: mat = [[3,1],[3,4]]\nOutput: 2\nExplanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2.",
            "Input: mat = [[1,1],[1,1]]\nOutput: 1\nExplanation: Since the cells must be strictly increasing, we can only visit one cell in this example.",
            "Input: mat = [[3,1,6],[-9,5,7]]\nOutput: 4\nExplanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4."
        ],
        "constraints": "m == mat.length\u00a0\nn == mat[i].length\u00a0\n1 <= m, n <= 105\n1 <= m * n <= 105\n-105\u00a0<= mat[i][j] <= 105",
        "release_time": 1685246618,
        "oracle_code": "class Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        int n = mat.size(), m = mat[0].size();\n        vector<int> row_max(n), col_max(m);\n        \n        map<int, vector<pair<int, int>>, greater<int>> pos;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                pos[mat[i][j]].push_back({i, j});\n            }\n        }\n        \n        int ans = 0;\n        for (auto& [num, cells]: pos) {\n            int k = cells.size();\n            vector<int> next(k);\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                next[i] = max(row_max[r], col_max[c]) + 1;\n                ans = max(ans, next[i]);\n            }\n            for (int i = 0; i < k; ++i) {\n                int r = cells[i].first, c = cells[i].second;\n                row_max[r] = max(row_max[r], next[i]);\n                col_max[c] = max(col_max[c], next[i]);\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\nAt first I thought of a 2d dp. You can iterate through the matrix in order of decreasing cell value, storing the max number of cells reachable from each cell `mat[i][j]` in `dp[i][j]`. However, for each cell you have to look at all reachable cells (its entire row and column), so the time complexity would be $$O(n*m*(n+m))$$, which isn\\u2019t fast enough.\\n\\nThen I realized you don\\u2019t need to store the max for every cell. As you iterate through the matrix in order of decreasing cell value, you always take the maximum path already found starting in the same row or column. This means you can get away with just storing the max for each row and column.\\n\\n# Approach\\nCreate a map of cell values in decreasing order to (r, c) positions in the matrix with those values. Iterate through this map, updating the vectors row_max and col_max, which store the max number of cells reachable starting from somewhere in each row and column. Be careful to only update row_max and col_max after every cell with a given value has been processed.\\n\\n\\n# Complexity\\n- Time complexity\\n$$O(n*m*log(n*m))$$\\n\\n- Space complexity:\\n$$O(n*m)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxIncreasingCells(vector<vector<int>>& mat) {\\n        int n = mat.size(), m = mat[0].size();\\n        vector<int> row_max(n), col_max(m);\\n        \\n        map<int, vector<pair<int, int>>, greater<int>> pos;\\n        for (int i = 0; i < n; ++i) {\\n            for (int j = 0; j < m; ++j) {\\n                pos[mat[i][j]].push_back({i, j});\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for (auto& [num, cells]: pos) {\\n            int k = cells.size();\\n            vector<int> next(k);\\n            for (int i = 0; i < k; ++i) {\\n                int r = cells[i].first, c = cells[i].second;\\n                next[i] = max(row_max[r], col_max[c]) + 1;\\n                ans = max(ans, next[i]);\\n            }\\n            for (int i = 0; i < k; ++i) {\\n                int r = cells[i].first, c = cells[i].second;\\n                row_max[r] = max(row_max[r], next[i]);\\n                col_max[c] = max(col_max[c], next[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        int n = mat.size(), m = mat[0].size();\n        vector<int> row_max(n), col_max(m);\n        map<int, vector<pair<int, int>>, greater<int>> pos;\n        \n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j) \n            pos[mat[i][j]].push_back({i, j});\n        \n        int ans = 0;\n        for (auto& [num, cells]: pos) \n        int k = cells.size();\n        vector<int> next(k);\n        for (int i = 0; i < k; ++i) {\n            int r = cells[i].first, c = cells[i].second;\n            next[i] = max(row_max[r], col_max[c]) + 1;\n            ans = max(ans, next[i]);\n        }\n        for (int i = 0; i < k; ++i) {\n            int r = cells[i].first, c = cells[i].second;\n            row_max[r] = max(row_max[r], next[i]);\n            col_max[c] = max(col_max[c], next[i]);\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nRemoved braces after \"for\" loop statements, causing only next line to be executed in the loop.\n"
    },
    {
        "slug": "valid-anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "examples": [
            "Input: s = \"anagram\", t = \"nagaram\"\nOutput: true",
            "Input: s = \"rat\", t = \"car\"\nOutput: false"
        ],
        "constraints": "1 <= s.length, t.length <= 5 * 104\ns and t consist of lowercase English letters.",
        "release_time": 1679637788,
        "oracle_code": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.length()!=t.length())\n            return false;\n        vector<int> freq(26, 0);\n        for(int i =0; i<s.length(); i++){\n            freq[s[i]-'a']++;\n            freq[t[i]-'a']--;\n        }\n        for(int i =0; i<freq.size(); i++){\n            if(freq[i]!=0)\n                return false;\n        }\n        return true;\n    }\n};",
        "content": "# Intuition\\nTo solve this problem we will count occurence of each character in both strings and if they are same then both strings are anagram of each other.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nWe can use vector of length 26 to track the occurences of character. \\nIf the size of both string is different then they can\\'t be anagram of each other, so we are checking this first.We loop through each character in both strings and increment the frequency of the corresponding letter in s and decrement the frequency of the corresponding letter in t.\\nThen we loop through freq array if all the elements are 0, if all the elements are 0 this means the two strings are anagram and if not then these things are not anagram of each othe.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n), n is the size of s or t string.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isAnagram(string s, string t) {\\n        if(s.length()!=t.length())\\n            return false;\\n        vector<int> freq(26, 0);\\n        for(int i =0; i<s.length(); i++){\\n            freq[s[i]-\\'a\\']++;\\n            freq[t[i]-\\'a\\']--;\\n        }\\n        for(int i =0; i<freq.size(); i++){\\n            if(freq[i]!=0)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.length()!=t.length())\n            return false;\n        vector<int> freq(26, 0);\n        for(int i =0; i<s.length(); i++)\n            freq[s[i]-'a']++;\n            freq[t[i]-'a']--;\n        for(int i =0; i<freq.size(); i++)\n            if(freq[i]!=0)\n                return false;\n\n        return true;\n    }\n};\n",
        "explanations": "\nThe for loop's body is not properly bracketed, causing incorrect element decrements in the vector.\n"
    },
    {
        "slug": "reverse-odd-levels-of-binary-tree",
        "description": "Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.\n\nFor example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].\n\nReturn the root of the reversed tree.\nA binary tree is perfect if all parent nodes have two children and all leaves are on the same level.\nThe level of a node is the number of edges along the path between it and the root node.",
        "examples": [
            "Input: root = [2,3,5,8,13,21,34]\nOutput: [2,5,3,8,13,21,34]\nExplanation: \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.",
            "Input: root = [7,13,11]\nOutput: [7,11,13]\nExplanation: \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13.",
            "Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]\nOutput: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]\nExplanation: \nThe odd levels have non-zero values.\nThe nodes at level 1 were 1, 2, and are 2, 1 after the reversal.\nThe nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal."
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 214].\n0 <= Node.val <= 105\nroot is a perfect binary tree.",
        "release_time": 1665040875,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            // cout<<n<<\" \";\n            while(n--){\n                node = q.front();q.pop();\n                // cout<<node->val<<\" \";\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            }\n            n = tmp.size();\n            for(i = 0; i < n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* reverseOddLevels(TreeNode* root) {\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        int x = 1,n,i,z;\\n        vector<TreeNode*> tmp;\\n        TreeNode* node;\\n        while(!q.empty()){\\n            tmp.clear();\\n            n = q.size();\\n            // cout<<n<<\" \";\\n            while(n--){\\n                node = q.front();q.pop();\\n                // cout<<node->val<<\" \";\\n                if(x==0){\\n                    tmp.push_back(node);\\n                }\\n                if(node->left)\\n                    q.push(node->left);\\n                if(node->right){\\n                    q.push(node->right);\\n                }\\n            }\\n            n = tmp.size();\\n            for(i = 0; i < n/2; i++){\\n                z = tmp[i]->val;\\n                tmp[i]->val = tmp[n-1-i]->val;\\n                tmp[n-1-i]->val = z;\\n            }\\n            x ^= 1;\\n            n = 0;\\n        }\\n        return root;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int x = 1,n,i,z;\n        vector<TreeNode*> tmp;\n        TreeNode* node;\n        while(!q.empty()){\n            tmp.clear();\n            n = q.size();\n            while(n--)node = q.front();q.pop();\n                if(x==0){\n                    tmp.push_back(node);\n                }\n                if(node->left)\n                    q.push(node->left);\n                if(node->right){\n                    q.push(node->right);\n                }\n            n = tmp.size();\n            for(i = 0; i < n/2; i++){\n                z = tmp[i]->val;\n                tmp[i]->val = tmp[n-1-i]->val;\n                tmp[n-1-i]->val = z;\n            }\n            x ^= 1;\n            n = 0;\n        }\n        return root;\n    }\n};\n",
        "explanations": "\nRemoved braces from inner while loop, causing pop, condition checking and pushing to queue not executed properly.\n"
    },
    {
        "slug": "pascals-triangle-ii",
        "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
        "examples": [
            "Input: rowIndex = 3\nOutput: [1,3,3,1]",
            "Input: rowIndex = 0\nOutput: [1]",
            "Input: rowIndex = 1\nOutput: [1,1]"
        ],
        "constraints": "0 <= rowIndex <= 33",
        "release_time": 1692420205,
        "oracle_code": "class Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        vector<vector<int>>v;\n        vector<int>e;\n    for (int i=0;i<=rowIndex;i++)\n    {\n        vector<int>a;\n        for (int j=0;j<=i;j++)\n        {\n            if (j==0 || j==i){a.push_back(1);}\n            else\n            {\n                a.push_back(v[i-1][j]+v[i-1][j-1]);\n            }\n        }\n        if (i==rowIndex){return a;}\n        v.push_back(a);\n    }\n    return e;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> getRow(int rowIndex) {\\n        vector<vector<int>>v;\\n        vector<int>e;\\n    for (int i=0;i<=rowIndex;i++)\\n    {\\n        vector<int>a;\\n        for (int j=0;j<=i;j++)\\n        {\\n            if (j==0 || j==i){a.push_back(1);}\\n            else\\n            {\\n                a.push_back(v[i-1][j]+v[i-1][j-1]);\\n            }\\n        }\\n        if (i==rowIndex){return a;}\\n        v.push_back(a);\\n    }\\n    return e;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        vector<vector<int>>v;\n        vector<int>e;\n    for (int i=0;i<=rowIndex;i++)\n    {\n        vector<int>a;\n        for (int j=0;j<=i;j++)\n        {\n            if (j==0 || j==i)\n                a.push_back(1);\n            else\n                a.push_back(v[i-1][j]+v[i-1][j-1]);\n        }\n        if (i==rowIndex) return a\n        v.push_back(a);\n    }\n    return e;\n    }\n};\n",
        "explanations": "\nI missed a semicolon after \"return a\" causing a statement separation bug in the code.\n"
    },
    {
        "slug": "spiral-matrix-ii",
        "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
        "examples": [
            "Input: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]",
            "Input: n = 1\nOutput: [[1]]"
        ],
        "constraints": "1 <= n <= 20",
        "release_time": 1683691003,
        "oracle_code": "class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> mat(n,vector<int>(n,0));\n\n        int startingRow=0;\n        int endingRow=n-1;\n        int startingCol=0;\n        int endingCol=n-1;\n        int k=1;\n        int last=n*n;\n    while(k<=last){\n        for(int i=startingCol;k<=last,i<=endingCol;i++){\n            mat[startingRow][i]=k++;\n        }\n        startingRow++;\n        for(int i=startingRow;k<=last,i<=endingRow;i++){\n            mat[i][endingCol]=k++;\n        }\n\n        endingCol--;\n        for(int i=endingCol;k<=last,i>=startingCol;i--){\n            mat[endingRow][i]=k++;\n        }\n        endingRow--;\n        for(int i=endingRow;k<=last, i>=startingRow;i--){\n            mat[i][startingCol]=k++;\n        }\n        startingCol++;\n     }\n     return mat;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to generate a square matrix of size n with elements from 1 to n^2 in spiral order. To generate the matrix in spiral order, we can start by filling in the top row from left to right, then the right column from top to bottom, then the bottom row from right to left, and finally the left column from bottom to top. We can repeat this process until all the elements of the matrix have been filled in.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.Create an n x n matrix with all elements initialized to 0.\\n2.Initialize variables startingRow, endingRow, startingCol, and endingCol to keep track of the current boundaries of the matrix.\\n3.Initialize k to 1, which represents the current element to be filled in the matrix.\\n4.Use a while loop to iterate over the matrix until all elements have been filled.\\n5.Within the while loop, use four for loops to fill in the elements of the matrix in spiral order:\\n6.The first loop fills in the top row of the matrix from left to right.\\n7.The second loop fills in the right column of the matrix from top to bottom.\\n8.The third loop fills in the bottom row of the matrix from right to left.\\n9.The fourth loop fills in the left column of the matrix from bottom to top.\\n10.After each loop, update the boundaries of the matrix by incrementing or decrementing the appropriate variables.\\n11.Increment k after each element is filled in the matrix.\\n12.Return the resulting matrix.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the given code is O(n^2) because the while loop iterates over all n^2 elements of the matrix, and each element is filled in exactly once.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the given code is O(n^2) because we create an n x n matrix to store the resulting elements.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> generateMatrix(int n) {\\n        vector<vector<int>> mat(n,vector<int>(n,0));\\n\\n        int startingRow=0;\\n        int endingRow=n-1;\\n        int startingCol=0;\\n        int endingCol=n-1;\\n        int k=1;\\n        int last=n*n;\\n    while(k<=last){\\n        for(int i=startingCol;k<=last,i<=endingCol;i++){\\n            mat[startingRow][i]=k++;\\n        }\\n        startingRow++;\\n        for(int i=startingRow;k<=last,i<=endingRow;i++){\\n            mat[i][endingCol]=k++;\\n        }\\n\\n        endingCol--;\\n        for(int i=endingCol;k<=last,i>=startingCol;i--){\\n            mat[endingRow][i]=k++;\\n        }\\n        endingRow--;\\n        for(int i=endingRow;k<=last, i>=startingRow;i--){\\n            mat[i][startingCol]=k++;\\n        }\\n        startingCol++;\\n     }\\n     return mat;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> mat(n,vector<int>(n,0));\n\n        int startingRow=0;\n        int endingRow=n-1;\n        int startingCol=0;\n        int endingCol=n-1;\n        int k=1;\n        int last=n*n;\n    while(k<=last)\n        for(int i=startingCol;k<=last,i<=endingCol;i++)\n            mat[startingRow][i]=k++;\n        startingRow++;\n        for(int i=startingRow;k<=last,i<=endingRow;i++)\n            mat[i][endingCol]=k++;\n\n        endingCol--;\n        for(int i=endingCol;k<=last,i>=startingCol;i--)\n            mat[endingRow][i]=k++;\n        endingRow--;\n        for(int i=endingRow;k<=last, i>=startingRow;i--)\n            mat[i][startingCol]=k++;\n        startingCol++;\n     return mat;\n    }\n};\n",
        "explanations": "\nThe first for-loop is included in the while-loop scope, but not the rest, due to misplaced braces.\n"
    },
    {
        "slug": "shortest-path-to-get-all-keys",
        "description": "You are given an m x n grid grid where:\n\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.",
        "examples": [
            "Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.",
            "Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6",
            "Input: grid = [\"@Aa\"]\nOutput: -1"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either an English letter, '.', '#', or '@'.\u00a0\nThere is exactly one\u00a0'@'\u00a0in the grid.\nThe number of keys in the grid is in the range [1, 6].\nEach key in the grid is unique.\nEach key in the grid has a matching lock.",
        "release_time": 1688006204,
        "oracle_code": "class Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1 << (grid[i][j] - 'a');\n                    continue;\n                }\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            }\n        }\n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1 << (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                    int newi = i + dir[d][0];\n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1 << (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\\n\\n    int shortestPathAllKeys(vector<string>& grid) {\\n        \\n        int m = grid.size();\\n        int n = grid[0].size();\\n        queue<pair<pair<int, int>, int>> que;\\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\\n        int target = 0;\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    target |= 1 << (grid[i][j] - \\'a\\');\\n                    continue;\\n                }\\n\\n                if (grid[i][j] == \\'@\\') {\\n                    que.emplace(pair<int, int>(i, j), 0);\\n                    mapKey[i][j] = 1;\\n                }\\n            }\\n        }\\n\\n\\n        int step = 0;\\n        while (!que.empty()) {\\n            int size = que.size();\\n            for (int s = 0; s < size; s++) {\\n                int i = que.front().first.first;\\n                int j = que.front().first.second;\\n                int key = que.front().second;\\n                que.pop();\\n                \\n                if (\\'a\\' <= grid[i][j] && grid[i][j] <= \\'f\\') {\\n                    key |= 1 << (grid[i][j] - \\'a\\');\\n                    if (key == target)\\n                        return step;\\n\\n                    mapKey[i][j] |= 1l << key;\\n                }\\n\\n                for (int d = 0; d < 4; d++) {\\n                    int newi = i + dir[d][0];\\n                    int newj = j + dir[d][1];\\n                    \\n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\\n                        continue;\\n                        \\n                    int val = grid[newi][newj];\\n                    if (val == \\'#\\')\\n                        continue;\\n                        \\n                    if (\\'A\\' <= val && val <= \\'F\\' && (key & (1 << (val - \\'A\\'))) == 0)\\n                        continue;\\n                        \\n                    if (mapKey[newi][newj] & (1l << key))\\n                        continue;\\n                        \\n                     mapKey[newi][newj] |= 1l << key;\\n                     que.emplace(pair<int, int>(newi, newj), key);\\n                }\\n            }\\n            step++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n\n    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        queue<pair<pair<int, int>, int>> que;\n        vector<vector<unsigned long>> mapKey(m, vector<unsigned long>(n, 0));\n        int target = 0;\n        for (int i = 0; i < m; i++) \n            for (int j = 0; j < n; j++) \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    target |= 1 << (grid[i][j] - 'a');\n                    continue;\n\n                if (grid[i][j] == '@') {\n                    que.emplace(pair<int, int>(i, j), 0);\n                    mapKey[i][j] = 1;\n                }\n            \n\n\n        int step = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int s = 0; s < size; s++) {\n                int i = que.front().first.first;\n                int j = que.front().first.second;\n                int key = que.front().second;\n                que.pop();\n                \n                if ('a' <= grid[i][j] && grid[i][j] <= 'f') {\n                    key |= 1 << (grid[i][j] - 'a');\n                    if (key == target)\n                        return step;\n\n                    mapKey[i][j] |= 1l << key;\n                }\n\n                for (int d = 0; d < 4; d++) {\n                    int newi = i + dir[d][0];\n                    int newj = j + dir[d][1];\n                    \n                    if (!(0 <= newi && newi < m && 0 <= newj && newj < n))\n                        continue;\n                        \n                    int val = grid[newi][newj];\n                    if (val == '#')\n                        continue;\n                        \n                    if ('A' <= val && val <= 'F' && (key & (1 << (val - 'A'))) == 0)\n                        continue;\n                        \n                    if (mapKey[newi][newj] & (1l << key))\n                        continue;\n                        \n                     mapKey[newi][newj] |= 1l << key;\n                     que.emplace(pair<int, int>(newi, newj), key);\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n};\n",
        "explanations": "\nRemoved the braces around for loop resulting in incorrect logic flow.\n"
    },
    {
        "slug": "add-binary",
        "description": "Given two binary strings a and b, return their sum as a binary string.",
        "examples": [
            "Input: a = \"11\", b = \"1\"\nOutput: \"100\"",
            "Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\""
        ],
        "constraints": "1 <= a.length, b.length <= 104\na and b consist\u00a0only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.",
        "release_time": 1676392785,
        "oracle_code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int c=0;\n        string s=\"\";\n        int i=0;\n        while(i<a.length() || i<b.length() || c!=0){\n            int x=0;\n            if(i<a.length() && a[a.length()-i-1]=='1')\n                x=1;\n            int y=0;\n            if(i<b.length() && b[b.length()-1-i]=='1')\n                y=1;\n            s=to_string((x+y+c)%2)+s;\n            c=(x+y+c)/2;\n            i++;\n        }\n        return s;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int c=0;\\n        string s=\"\";\\n        int i=0;\\n        while(i<a.length() || i<b.length() || c!=0){\\n            int x=0;\\n            if(i<a.length() && a[a.length()-i-1]==\\'1\\')\\n                x=1;\\n            int y=0;\\n            if(i<b.length() && b[b.length()-1-i]==\\'1\\')\\n                y=1;\\n            s=to_string((x+y+c)%2)+s;\\n            c=(x+y+c)/2;\\n            i++;\\n        }\\n        return s;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        int c=0;\n        string s=\"\";\n        int i=0;\n        while(i<a.length() || i<b.length() || c!=0)\n            int x=0;\n            if(i<a.length() && a[a.length()-i-1]=='1')\n                x=1;\n            int y=0;\n            if(i<b.length() && b[b.length()-1-i]=='1')\n                y=1;\n            s=to_string((x+y+c)%2)+s;\n            c=(x+y+c)/2;\n            i++;\n        return s;\n    }\n};\n",
        "explanations": "\nMissing curly braces after the while statement causing only the next line to loop.\n"
    },
    {
        "slug": "longest-common-prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
        "examples": [
            "Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"",
            "Input: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings."
        ],
        "constraints": "1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
        "release_time": 1692119515,
        "oracle_code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& str) \n    {\n        sort(str.begin(), str.end()); //sorting the array\n        string ans=\"\"; //creating a new empty string to store the common prefixes\n        for(int i=0;i<str[0].length();i++) // max iterations = length of the first string\n        {\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\n                break;\n            ans+=str[0][i]; // concatinate if the characters are matching\n        }\n        return ans;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhen you sort an array, it is enough to check for the common characters of the the first & last string of the sorted vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string longestCommonPrefix(vector<string>& str) \\n    {\\n        sort(str.begin(), str.end()); //sorting the array\\n        string ans=\"\"; //creating a new empty string to store the common prefixes\\n        for(int i=0;i<str[0].length();i++) // max iterations = length of the first string\\n        {\\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\\n                break;\\n            ans+=str[0][i]; // concatinate if the characters are matching\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& str) \n    {\n        sort(str.begin(), str.end()); //sorting the array\n        string ans=\"\"; //creating a new empty string to store the common prefixes\n        for(int i=0;i<str[0].length();i++) // max iterations = length of the first string\n            if(str[0][i]!=str[str.size()-1][i]) // checking the characters of the first and last string\n                break;\n        ans+=str[0][i]; \n        return ans;\n    }\n};\n",
        "explanations": "\nThe statement 'ans+=str[0][i];' is outside the for loop, causing wrong prefix calculation.\n"
    },
    {
        "slug": "shortest-bridge",
        "description": "You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\nYou may change 0's to 1's to connect the two islands to form one island.\nReturn the smallest number of 0's you must flip to connect the two islands.",
        "examples": [
            "Input: grid = [[0,1],[1,0]]\nOutput: 1",
            "Input: grid = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2",
            "Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\nOutput: 1"
        ],
        "constraints": "n == grid.length == grid[i].length\n2 <= n <= 100\ngrid[i][j] is either 0 or 1.\nThere are exactly two islands in grid.",
        "release_time": 1684673230,
        "oracle_code": "class Solution {\npublic:\n\nint r[4] = {-1 , 0, 1, 0};\nint c[4] = {0 ,1 , 0 , -1};\n\nvoid dfs(int row ,int col , vector<pair<int,int>> &v,vector<vector<int>>&vis,vector<vector<int>>&grid)\n{\n    int n = vis[0].size();\n    vis[row][col] = 1;\n    v.push_back({row , col});\n    for(int i=0; i<4; i++)\n    {\n        int nrow = row + r[i];\n        int ncol = col + c[i];\n\n        if(nrow>=0 and ncol>=0 and nrow<n and ncol<n and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1)\n        {\n            dfs(nrow , ncol , v , vis , grid);\n        }\n    }\n\n}\n\n    int shortestBridge(vector<vector<int>>& grid) {\n        \n        vector<pair<int,int>> v;\n        vector<pair<int,int>> v1;\n        vector<pair<int,int>> v2;\n        int n = grid.size();\n        vector<vector<int>> vis(n , vector<int>(n , 0));\n        bool flag = 0;\n        for(int i=0; i<n; i++)\n        {\n            for(int j=0; j<n; j++)\n            {\n                if(grid[i][j] == 1 and vis[i][j] == 0)\n                {\n                    dfs(i , j , v , vis, grid);\n                    if(flag == 0)\n                    {\n                        v1 = v;\n                        flag = 1;\n                        v.clear();\n                    }\n                    else\n                    {\n                        v2 = v;\n                    }\n                }\n            \n            }\n           \n        }\n        //printed just to check the co-ordinates****\n        //for(auto it: v1)\n        //{\n        //    cout<<it.first<<\" \"<<it.second<<endl;\n        //}\n        //for(auto it: v2)\n        //{\n        //    cout<<it.first<<\" \"<<it.second<<endl;\n        //}\n        int ans = 1e9;\n\n\n        for(auto it: v1)\n        {\n            int row1 = it.first;\n            int col1 = it.second;\n\n            for(auto itt: v2)\n            {\n                int row2 = itt.first;\n                int col2 = itt.second;\n\n                int dist = abs(row1 - row2) + abs(col1 - col2);\n                dist--;\n                ans = min(ans , dist);\n            }\n        }\n    \n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsimple push all the co-ordinates of the first and second island in two vectors by using dfs and then just calculate the distance between each point to every other point in both the vectors and since n is very small we will not get tle and this solution is accepted.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**1.Push all the co-ordinates of the first and second island in two vectors\\n2.then calculate the distance between each point to every point \\n3.take the minimum distance \\n4.return the minimum distance**\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\ncomment time complexity in comments \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\ncomment space complexity in comments \\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nint r[4] = {-1 , 0, 1, 0};\\nint c[4] = {0 ,1 , 0 , -1};\\n\\nvoid dfs(int row ,int col , vector<pair<int,int>> &v,vector<vector<int>>&vis,vector<vector<int>>&grid)\\n{\\n    int n = vis[0].size();\\n    vis[row][col] = 1;\\n    v.push_back({row , col});\\n    for(int i=0; i<4; i++)\\n    {\\n        int nrow = row + r[i];\\n        int ncol = col + c[i];\\n\\n        if(nrow>=0 and ncol>=0 and nrow<n and ncol<n and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1)\\n        {\\n            dfs(nrow , ncol , v , vis , grid);\\n        }\\n    }\\n\\n}\\n\\n    int shortestBridge(vector<vector<int>>& grid) {\\n        \\n        vector<pair<int,int>> v;\\n        vector<pair<int,int>> v1;\\n        vector<pair<int,int>> v2;\\n        int n = grid.size();\\n        vector<vector<int>> vis(n , vector<int>(n , 0));\\n        bool flag = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            for(int j=0; j<n; j++)\\n            {\\n                if(grid[i][j] == 1 and vis[i][j] == 0)\\n                {\\n                    dfs(i , j , v , vis, grid);\\n                    if(flag == 0)\\n                    {\\n                        v1 = v;\\n                        flag = 1;\\n                        v.clear();\\n                    }\\n                    else\\n                    {\\n                        v2 = v;\\n                    }\\n                }\\n            \\n            }\\n           \\n        }\\n        //printed just to check the co-ordinates****\\n        //for(auto it: v1)\\n        //{\\n        //    cout<<it.first<<\" \"<<it.second<<endl;\\n        //}\\n        //for(auto it: v2)\\n        //{\\n        //    cout<<it.first<<\" \"<<it.second<<endl;\\n        //}\\n        int ans = 1e9;\\n\\n\\n        for(auto it: v1)\\n        {\\n            int row1 = it.first;\\n            int col1 = it.second;\\n\\n            for(auto itt: v2)\\n            {\\n                int row2 = itt.first;\\n                int col2 = itt.second;\\n\\n                int dist = abs(row1 - row2) + abs(col1 - col2);\\n                dist--;\\n                ans = min(ans , dist);\\n            }\\n        }\\n    \\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\nint r[4] = {-1 , 0, 1, 0};\nint c[4] = {0 ,1 , 0 , -1};\n\nvoid dfs(int row ,int col , vector<pair<int,int>> &v,vector<vector<int>>&vis,vector<vector<int>>&grid)\n{\n    int n = vis[0].size();\n    vis[row][col] = 1;\n    v.push_back({row , col});\n    for(int i=0; i<4; i++)\n    {\n        int nrow = row + r[i];\n        int ncol = col + c[i];\n\n        if(nrow>=0 and ncol>=0 and nrow<n and ncol<n and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1);\n        {\n            dfs(nrow , ncol , v , vis , grid);\n        }\n    }\n\n}\n\n    int shortestBridge(vector<vector<int>>& grid) {\n        \n        vector<pair<int,int>> v;\n        vector<pair<int,int>> v1;\n        vector<pair<int,int>> v2;\n        int n = grid.size();\n        vector<vector<int>> vis(n , vector<int>(n , 0));\n        bool flag = 0;\n        for(int i=0; i<n; i++)\n        {\n            for(int j=0; j<n; j++)\n            {\n                if(grid[i][j] == 1 and vis[i][j] == 0)\n                {\n                    dfs(i , j , v , vis, grid);\n                    if(flag == 0)\n                    {\n                        v1 = v;\n                        flag = 1;\n                        v.clear();\n                    }\n                    else\n                    {\n                        v2 = v;\n                    }\n                }\n            \n            }\n           \n        }\n        int ans = 1e9;\n\n\n        for(auto it: v1)\n        {\n            int row1 = it.first;\n            int col1 = it.second;\n\n            for(auto itt: v2)\n            {\n                int row2 = itt.first;\n                int col2 = itt.second;\n\n                int dist = abs(row1 - row2) + abs(col1 - col2);\n                dist--;\n                ans = min(ans , dist);\n            }\n        }\n    \n        return ans;\n    }\n};\n",
        "explanations": "\nAdding a semicolon after the 'if' condition in the 'dfs' function causes unexpected, recursive calls.\n"
    },
    {
        "slug": "domino-and-tromino-tiling",
        "description": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\n\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.",
        "examples": [
            "Input: n = 3\nOutput: 5\nExplanation: The five different ways are show above.",
            "Input: n = 1\nOutput: 1"
        ],
        "constraints": "1 <= n <= 1000",
        "release_time": 1671865863,
        "oracle_code": "class Solution {\npublic:\n    int mod=1e9+7;\n    long helper(int n, vector<long>& dp){\n        if(n==1) return 1;\n        if(n==2) return 2;\n        if(n==3) return 5;\n\n        if(dp[n]!=-1) return dp[n]%mod;\n\n        long smallAns1=0, smallAns2=0;\n        smallAns1=helper(n-1,dp)%mod;\n        smallAns2=helper(n-3,dp)%mod;\n\n        dp[n]=(smallAns1*2+smallAns2)%mod;\n        return dp[n]%mod;\n    }\n    \n    int numTilings(int n) {\n        vector<long> dp(n+1,-1);\n        long ans=helper(n,dp)%mod;\n        return (int)ans;        \n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfor n , we want answer for n-1 and n-3\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n) + Recurisve Stack Space \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mod=1e9+7;\\n    long helper(int n, vector<long>& dp){\\n        if(n==1) return 1;\\n        if(n==2) return 2;\\n        if(n==3) return 5;\\n\\n        if(dp[n]!=-1) return dp[n]%mod;\\n\\n        long smallAns1=0, smallAns2=0;\\n        smallAns1=helper(n-1,dp)%mod;\\n        smallAns2=helper(n-3,dp)%mod;\\n\\n        dp[n]=(smallAns1*2+smallAns2)%mod;\\n        return dp[n]%mod;\\n    }\\n    \\n    int numTilings(int n) {\\n        vector<long> dp(n+1,-1);\\n        long ans=helper(n,dp)%mod;\\n        return (int)ans;        \\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int mod=1e9+7;\n    long helper(int n, vector<long>& dp){\n        if(n==1) return 1;\n        if(n==2) return 2;\n        if(n==3) return 5;\n\n        if(dp[n]!=-1) return dp[n]%mod;\n\n        long smallAns1=0, smallAns2=0;\n        smallAns1=helper(n-1,dp)%mod\n        smallAns2=helper(n-3,dp)%mod;\n\n        dp[n]=(smallAns1*2+smallAns2)%mod;\n        return dp[n]%mod;\n    }\n    \n    int numTilings(int n) {\n        vector<long> dp(n+1,-1);\n        long ans=helper(n,dp)%mod;\n        return (int)ans;        \n    }\n};\n",
        "explanations": "\nThe missing semicolon after smallAns1 calculation causes a syntax error, disrupting the program execution.\n"
    },
    {
        "slug": "factorial-trailing-zeroes",
        "description": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.",
        "examples": [
            "Input: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.",
            "Input: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.",
            "Input: n = 0\nOutput: 0"
        ],
        "constraints": "0 <= n <= 104",
        "release_time": 1682961619,
        "oracle_code": "class Solution {\npublic:\n    unordered_map<long long int,long long int>mp;\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--)\n         fun(i);\n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    unordered_map<long long int,long long int>mp;\\n    int trailingZeroes(int n) {\\n        for(int i=n;i>=1;i--)\\n         fun(i);\\n         \\n\\t\\t return min(mp[2],mp[5]); \\n    }\\n     void fun(int n)\\n    {\\n         for(int i=2;i*i<=n;i++)\\n         {\\n         \\twhile((n%i) == 0)\\n         \\t{\\n         \\t    mp[i]++;\\n\\t\\t\\t\\tn = n / i;\\t\\n\\t\\t\\t}\\n\\t\\t }\\n\\t\\t if(n > 1)\\n\\t\\t mp[n]++;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    unordered_map<long long int,long long int>mp;\n    int trailingZeroes(int n) {\n        for(int i=n;i>=1;i--);\n         fun(i);\n         \n\t\t return min(mp[2],mp[5]); \n    }\n     void fun(int n)\n    {\n         for(int i=2;i*i<=n;i++)\n         {\n         \twhile((n%i) == 0)\n         \t{\n         \t    mp[i]++;\n\t\t\t\tn = n / i;\t\n\t\t\t}\n\t\t }\n\t\t if(n > 1)\n\t\t mp[n]++;\n    }\n};\n",
        "explanations": "\nIn the for loop calculating fun(i), the statement separator (;) ends loop prematurely.\n"
    },
    {
        "slug": "longest-well-performing-interval",
        "description": "We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.",
        "examples": [
            "Input: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].",
            "Input: hours = [6,6,6]\nOutput: 0"
        ],
        "constraints": "1 <= hours.length <= 104\n0 <= hours[i] <= 16",
        "release_time": 1688530675,
        "oracle_code": "class Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n    map<int,int> mp;\n    int k=0,ans=0;\n    for(int i=0;i<hours.size();i++)\n    {\n        if(hours[i]>8)  k++; else   k--;\n        if(k>0)\n        {\n        ans=max(ans,i+1);\n        } else{\n            if(mp.find(k-1)!=mp.end()){\n                ans=max(ans,i-mp[k-1]);\n            }\n             if(mp.find(k)==mp.end()){\n                mp[k]=i;\n            }\n        }\n       \n    }    \n    return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestWPI(vector<int>& hours) {\\n    map<int,int> mp;\\n    int k=0,ans=0;\\n    for(int i=0;i<hours.size();i++)\\n    {\\n        if(hours[i]>8)  k++; else   k--;\\n        if(k>0)\\n        {\\n        ans=max(ans,i+1);\\n        } else{\\n            if(mp.find(k-1)!=mp.end()){\\n                ans=max(ans,i-mp[k-1]);\\n            }\\n             if(mp.find(k)==mp.end()){\\n                mp[k]=i;\\n            }\\n        }\\n       \\n    }    \\n    return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n    map<int,int> mp;\n    int k=0,ans=0;\n    for(int i=0;i<hours.size();i++)\n    {\n        if(hours[i]>8)  k++; else   k--;\n        if(k>0)\n        {\n        ans=max(ans,i+1)\n        } else{\n            if(mp.find(k-1)!=mp.end()){\n                ans=max(ans,i-mp[k-1]);\n            }\n             if(mp.find(k)==mp.end()){\n                mp[k]=i;\n            }  \n        }     \n    }    \n    return ans;\n    }\n};\n",
        "explanations": "\nThe semicolon is missing at the end of the \"ans = max(ans, i+1)\" statement.\n"
    },
    {
        "slug": "construct-the-longest-new-string",
        "description": "You are given three integers x, y, and z.\nYou have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concactenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring.\nReturn the maximum possible length of the new string.\nA substring is a contiguous non-empty sequence of characters within a string.",
        "examples": [
            "Input: x = 2, y = 5, z = 1\nOutput: 12\nExplanation: We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.",
            "Input: x = 3, y = 2, z = 2\nOutput: 14\nExplanation: We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length."
        ],
        "constraints": "1 <= x, y, z <= 50",
        "release_time": 1687623013,
        "oracle_code": "class Solution {\npublic:\n    int longestString(int x, int y, int z) {\n        int mn=min(x,y);\n        int cnt=0;\n        if(x!=y)cnt=1;\n        return (mn+mn+cnt+z)*2;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe have to check only x and y value\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestString(int x, int y, int z) {\\n        int mn=min(x,y);\\n        int cnt=0;\\n        if(x!=y)cnt=1;\\n        return (mn+mn+cnt+z)*2;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestString(int x, int y, int z) {\n        int mn=min(x,y)\n        int cnt=0;\n        if(x!=y)cnt=1;\n        return (mn+mn+cnt+z)*2;\n    }\n};\n",
        "explanations": "\nThe semicolon is missing after the statement 'int mn=min(x,y)', causing a compiler error.\n"
    },
    {
        "slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
        "description": "Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.\nReturn the length of the shortest subarray to remove.\nA subarray is a contiguous subsequence of the array.",
        "examples": [
            "Input: arr = [1,2,3,10,4,2,3,5]\nOutput: 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].",
            "Input: arr = [5,4,3,2,1]\nOutput: 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].",
            "Input: arr = [1,2,3]\nOutput: 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements."
        ],
        "constraints": "1 <= arr.length <= 105\n0 <= arr[i] <= 109",
        "release_time": 1678913689,
        "oracle_code": "class Solution {\npublic:\n    int findLengthOfShortestSubarray(vector<int>& arr) {\n\n        int n =(int) arr.size();\n        int h = n-1 , l=0 ;\n        \n        \n        \n        for(int i=h;i>=1;i--)  \n        {\n            if(arr[i]>=arr[i-1] && h>0)\n            {\n                h--;\n            }\n            else break;\n        }\n\n        int res=h;\n\n       for( l=0 ; l<h && (l==0 || arr[l-1]<=arr[l])  ;l++)\n       {\n             \n             while(h<n && arr[l]>arr[h])\n              {\n                 h++;\n              }\n\n\n           res = min(res,h-l-1);\n\n        \n           \n       }\n      return res;\n\n        \n        \n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int findLengthOfShortestSubarray(vector<int>& arr) {\\n\\n        int n =(int) arr.size();\\n        int h = n-1 , l=0 ;\\n        \\n        \\n        \\n        for(int i=h;i>=1;i--)  \\n        {\\n            if(arr[i]>=arr[i-1] && h>0)\\n            {\\n                h--;\\n            }\\n            else break;\\n        }\\n\\n        int res=h;\\n\\n       for( l=0 ; l<h && (l==0 || arr[l-1]<=arr[l])  ;l++)\\n       {\\n             \\n             while(h<n && arr[l]>arr[h])\\n              {\\n                 h++;\\n              }\\n\\n\\n           res = min(res,h-l-1);\\n\\n        \\n           \\n       }\\n      return res;\\n\\n        \\n        \\n    }\\n};\\n```\\n\\n```\\n\\n\\nclass Solution {\\npublic:\\n\\n    bool checker(vector<int> &arr,vector<int> &pref ,vector<int> &suff , int lo,int mid)\\n    {\\n        int n= (int)arr.size();\\n        bool ff =true;\\n        int hi = lo+mid-1;\\n        if(lo-1>=0 && pref[lo-1]==0) return false;\\n        if(hi+1<n && suff[hi+1]==0) return false;\\n        if(lo-1>=0 && hi+1<n && arr[lo-1]>arr[hi+1] ) return false;\\n        return true;\\n    }\\n    int findLengthOfShortestSubarray(vector<int>& arr) {\\n    \\n       int n = (int)arr.size();\\n       int ans=n;\\n       vector<int> pref(n,0),suff(n,0);\\n       pref[0]=1,suff[n-1]=1;\\n       for(int i=1;i<n;i++)\\n       {\\n           if(arr[i]>=arr[i-1] && pref[i-1]==1) pref[i]=1;\\n       }\\n\\n       for(int i=n-2;i>=0;i--)\\n       {\\n           if(arr[i]<=arr[i+1] && suff[i+1]==1) suff[i]=1;\\n       }\\n\\n       for(int i=0;i<n;i++)\\n       {\\n           int lo=0,hi=n;\\n           while(lo<=hi)\\n           {\\n               int mid = (lo+hi)/2;\\n               if(checker(arr,pref,suff,i,mid))\\n               {\\n                   ans = min(ans,mid);\\n                   hi =mid-1;\\n               }\\n               else lo = mid+1;\\n           }\\n       }\\n\\n       return ans;\\n    }\\n};\\n```\\n![4of9h0.jpg](https://assets.leetcode.com/users/images/d5a48e00-497f-4da5-b25d-ca6650410462_1678915207.8747983.jpeg)\\n\\n\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findLengthOfShortestSubarray(vector<int>& arr) {\n\n        int n =(int) arr.size();\n        int h = n-1, l=0;\n        \n        for(int i=h;i>=1;i--)  \n        {\n            if(arr[i]>=arr[i-1] && h>0)\n            {\n                h--; break;\n            }\n            else break;\n        }\n\n        int res=h;\n\n        for(l=0 ; l<h && (l==0 || arr[l-1]<=arr[l]); l++)\n        {\n            while(h<n && arr[l]>arr[h])\n            {\n                h++;\n            }\n\n            res = min(res,h-l-1);\n       }\n       return res;\n    }\n};\n",
        "explanations": "\nAdded 'break' after 'h--'. This breaks the for loop prematurely leading to incorrect results.\n"
    },
    {
        "slug": "the-number-of-beautiful-subsets",
        "description": "You are given an array nums of positive integers and a positive integer k.\nA subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.\nReturn the number of non-empty beautiful subsets of the array nums.\nA subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.",
        "examples": [
            "Input: nums = [2,4,6], k = 2\nOutput: 4\nExplanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6].",
            "Input: nums = [1], k = 1\nOutput: 1\nExplanation: The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1]."
        ],
        "constraints": "1 <= nums.length <= 20\n1 <= nums[i], k <= 1000",
        "release_time": 1679198543,
        "oracle_code": "class Solution {\npublic:\n    int beautifulSubsets(vector<int>& nums, int k) {\n        vector<int> cur;\n        return helper(nums, k, cur, 0);\n    }\n    private:\n    int helper(vector<int>& nums, int k, vector<int>& cur, int start) {\n        int cnt = 0;\n        for (int i = start; i < nums.size(); ++i) {\n            if (!test(cur, nums[i], k))\n                continue;\n            cur.push_back(nums[i]);\n            cnt++;\n            cnt += helper(nums, k, cur, i + 1);\n            cur.pop_back();\n        }\n        return cnt;\n    }\n    bool test(vector<int>& cur, int num, int k) {\n        for (auto &c : cur)\n            if (abs(num - c) == k)\n                return false;\n        return true;\n    }\n};",
        "content": "\\n# Solution 1\\n```\\nclass Solution {\\npublic:\\n    int beautifulSubsets(vector<int>& nums, int k) {\\n        vector<int> cur;\\n        return helper(nums, k, cur, 0);\\n    }\\n    private:\\n    int helper(vector<int>& nums, int k, vector<int>& cur, int start) {\\n        int cnt = 0;\\n        for (int i = start; i < nums.size(); ++i) {\\n            if (!test(cur, nums[i], k))\\n                continue;\\n            cur.push_back(nums[i]);\\n            cnt++;\\n            cnt += helper(nums, k, cur, i + 1);\\n            cur.pop_back();\\n        }\\n        return cnt;\\n    }\\n    bool test(vector<int>& cur, int num, int k) {\\n        for (auto &c : cur)\\n            if (abs(num - c) == k)\\n                return false;\\n        return true;\\n    }\\n};\\n```\\n\\n# Solution2 : HashMap cur frequency\\n```\\nclass Solution {\\npublic:\\n    int beautifulSubsets(vector<int>& nums, int k) {\\n        unordered_map<int, int> cur;\\n        return helper(nums, k, cur, 0);\\n    }\\nprivate:\\n    int helper(vector<int>& nums, int k, unordered_map<int, int>& cur, int start) {\\n        int cnt = 0;\\n        for (int i = start; i < nums.size(); ++i) {\\n            if (cur[nums[i] - k] || cur[nums[i] + k])\\n                continue;\\n            cur[nums[i]]++;\\n            cnt += 1 + helper(nums, k, cur, i + 1);\\n            cur[nums[i]]--;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int beautifulSubsets(vector<int>& nums, int k) {\n        vector<int> cur;\n        return helper(nums, k, cur, 0);\n    }\n    private:\n    int helper(vector<int>& nums, int k, vector<int>& cur, int start) {\n        int cnt = 0;\n        for (int i = start; i < nums.size(); ++i) {\n            if (!test(cur, nums[i], k))\n                continue\n            cur.push_back(nums[i]);\n            cnt++;\n            cnt += helper(nums, k, cur, i + 1);\n            cur.pop_back();\n        }\n        return cnt;\n    }\n    bool test(vector<int>& cur, int num, int k) {\n        for (auto &c : cur)\n            if (abs(num - c) == k)\n                return false;\n        return true;\n    }\n};\n",
        "explanations": "\nThe semicolon missing at the end of the 'continue' statement will cause a syntax error.\n"
    },
    {
        "slug": "largest-substring-between-two-equal-characters",
        "description": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.",
        "examples": [
            "Input: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.",
            "Input: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".",
            "Input: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s."
        ],
        "constraints": "1 <= s.length <= 300\ns contains only lowercase English letters.",
        "release_time": 1673405367,
        "oracle_code": "class Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        int v[26];\n        memset(v,-1,sizeof v);\n        int ans=-1;\n        for(int i=0;i<s.size();i++){\n            if(v[s[i]-'a']==-1){\n                v[s[i]-'a']=i;\n            }\n            int res=i-v[s[i]-'a']-1;\n            ans=max(ans,res);\n        }\n        return ans;\n    }\n};",
        "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int v[26];\\n        memset(v,-1,sizeof v);\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1){\\n                v[s[i]-\\'a\\']=i;\\n            }\\n            int res=i-v[s[i]-\\'a\\']-1;\\n            ans=max(ans,res);\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        int v[26];\n        memset(v,-1,sizeof v);\n        int ans=-1;\n        for(int i=0;i<s.size();i++)\n            if(v[s[i]-'a']==-1)\n                v[s[i]-'a']=i;\n            int res=i-v[s[i]-'a']-1;\n            ans=max(ans,res);\n        return ans;\n    }\n};\n",
        "explanations": "\nLack of braces after 'for' to encapsulate the logic leads to wrong association of lines.\n"
    },
    {
        "slug": "merge-two-binary-trees",
        "description": "You are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.",
        "examples": [
            "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]",
            "Input: root1 = [1], root2 = [1,2]\nOutput: [2,2]"
        ],
        "constraints": "The number of nodes in both trees is in the range [0, 2000].\n-104 <= Node.val <= 104",
        "release_time": 1673784101,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if ( t1 && t2 ) {\n            TreeNode * root = new TreeNode(t1->val + t2->val);\n            root->left = mergeTrees(t1->left, t2->left);\n            root->right = mergeTrees(t1->right, t2->right);\n            return root;\n        } else {\n            return t1 ? t1 : t2;\n        }\n    }\n};",
        "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
        "level": "easy",
        "buggy_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) \n    {\n        if ( t1 && t2 ) \n        {\n            TreeNode * root = new TreeNode(t1->val + t2->val);\n            root->left = mergeTrees(t1->left, t2->left)\n            root->right = mergeTrees(t1->right, t2->right);\n            return root;\n        } else {\n            return t1 ? t1 : t2;\n        }\n    }\n};\n",
        "explanations": "\nThe semicolon is missing after the statement where root->left is assigned, causing a syntax error.\n"
    },
    {
        "slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
        "description": "You are given an integer array nums.\nIn one move, you can choose one element of nums and change it to any value.\nReturn the minimum difference between the largest and smallest value of nums after performing at most three moves.",
        "examples": [
            "Input: nums = [5,3,2,4]\nOutput: 0\nExplanation: We can make at most 3 moves.\nIn the first move, change 2 to 3. nums becomes [5,3,3,4].\nIn the second move, change 4 to 3. nums becomes [5,3,3,3].\nIn the third move, change 5 to 3. nums becomes [3,3,3,3].\nAfter performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0.",
            "Input: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: We can make at most 3 moves.\nIn the first move, change 5 to 0. nums becomes [1,0,0,10,14].\nIn the second move, change 10 to 0. nums becomes [1,0,0,0,14].\nIn the third move, change 14 to 1. nums becomes [1,0,0,0,1].\nAfter performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1.\nIt can be shown that there is no way to make the difference 0 in 3 moves.",
            "Input: nums = [3,100,20]\nOutput: 0\nExplanation: We can make at most 3 moves.\nIn the first move, change 100 to 7. nums becomes [3,7,20].\nIn the second move, change 20 to 7. nums becomes [3,7,7].\nIn the third move, change 3 to 7. nums becomes [7,7,7].\nAfter performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0."
        ],
        "constraints": "1 <= nums.length <= 105\n-109 <= nums[i] <= 109",
        "release_time": 1676910148,
        "oracle_code": "class Solution {\npublic:\n    int minDifference(vector<int>& nums) {\n        if(nums.size() <= 4) return 0;\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        return min({nums[n - 4] - nums[0], nums[n - 1] - nums[3], nums[n - 3] - nums[1], nums[n - 2] - nums[2]});\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    int minDifference(vector<int>& nums) {\\n        if(nums.size() <= 4) return 0;\\n        sort(nums.begin(), nums.end());\\n        int n = nums.size();\\n        return min({nums[n - 4] - nums[0], nums[n - 1] - nums[3], nums[n - 3] - nums[1], nums[n - 2] - nums[2]});\\n    }\\n};\\n\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int minDifference(vector<int>& nums) {\n        if(nums.size() <= 4) return 0;\n        sort(nums.begin(), nums.end());\n        int n = nums.size()\n        return min({nums[n - 4] - nums[0], nums[n - 1] - nums[3], nums[n - 3] - nums[1], nums[n - 2] - nums[2]});\n    }\n};\n",
        "explanations": "\nThe statement \"int n = nums.size()\" is lacking a semicolon at the end.\n"
    },
    {
        "slug": "minimum-changes-to-make-alternating-binary-string",
        "description": "You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.\nThe string is called alternating if no two adjacent characters are equal. For example, the string \"010\" is alternating, while the string \"0100\" is not.\nReturn the minimum number of operations needed to make s alternating.",
        "examples": [
            "Input: s = \"0100\"\nOutput: 1\nExplanation: If you change the last character to '1', s will be \"0101\", which is alternating.",
            "Input: s = \"10\"\nOutput: 0\nExplanation: s is already alternating.",
            "Input: s = \"1111\"\nOutput: 2\nExplanation: You need two operations to reach \"0101\" or \"1010\"."
        ],
        "constraints": "1 <= s.length <= 104\ns[i] is either '0' or '1'.",
        "release_time": 1674806782,
        "oracle_code": "class Solution {\npublic:\n    int minOperations(string s) {\n        int n=s.size(), ans=0;\n        for(int i=0;i<n;i++)\n        {\n            if(s[i]-'0' != i%2)\n            ans++;\n        }\n        return min(ans, n-ans);\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minOperations(string s) {\\n        int n=s.size(), ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]-\\'0\\' != i%2)\\n            ans++;\\n        }\\n        return min(ans, n-ans);\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int minOperations(string s) {\n        int n=s.size(), ans=0;\n        for(int i=0;i<n;i++);\n        {\n            if(s[i]-'0' != i%2)\n            ans++;\n        }\n        return min(ans, n-ans);\n    }\n};\n",
        "explanations": "\nThe bug is the semicolon after the for loop, which ends the loop immediately without executing the intended block of code.\n"
    },
    {
        "slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
        "description": "Given the array restaurants where \u00a0restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true)\u00a0or false\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0maxPrice and maxDistance\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.",
        "examples": [
            "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5] \nExplanation: \nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).",
            "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\nOutput: [4,3,2,1,5]\nExplanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.",
            "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\nOutput: [4,5]"
        ],
        "constraints": "1 <=\u00a0restaurants.length <= 10^4\nrestaurants[i].length == 5\n1 <=\u00a0idi, ratingi, pricei, distancei <= 10^5\n1 <=\u00a0maxPrice,\u00a0maxDistance <= 10^5\nveganFriendlyi and\u00a0veganFriendly\u00a0are\u00a00 or 1.\nAll idi are distinct.",
        "release_time": 1692446889,
        "oracle_code": "class Solution {\npublic:\n    vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        if(veganFriendly == 1){\n            for(int i = 0; i<restaurants.size(); i++){\n                if(restaurants[i][2] != veganFriendly){\n                    restaurants[i][0] = -1;\n                }\n            }\n        }\n\n        for(int i = 0; i<restaurants.size(); i++){\n            if(restaurants[i][3] > maxPrice){   \n                restaurants[i][0] = -1;\n            }\n            if(restaurants[i][4] > maxDistance){  \n                restaurants[i][0]=-1;\n            }\n        }\n\n        vector<int> id;\n        vector<int>rating;\n        for(int i=0; i<restaurants.size(); i++){\n            if(restaurants[i][0]>0){\n                id.push_back(restaurants[i][0]);\n                rating.push_back(restaurants[i][1]);\n            }\n            \n        }\n\n        for(int i=0; i<rating.size(); i++){\n            for(int j=i+1; j<rating.size(); j++){\n                if(rating[i] < rating[j]){\n                    swap(rating[i], rating[j]);\n                    swap(id[i], id[j]);\n                }\n            }\n        }\n\n        for(int i=0; i<rating.size(); i++){\n            for(int j=i+1; j<rating.size(); j++){\n                if(rating[i] == rating[j] && id[i] < id[j]){\n                    swap(id[i], id[j]);\n                }\n            }\n        }\n\n        return id;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {\\n        if(veganFriendly == 1){\\n            for(int i = 0; i<restaurants.size(); i++){\\n                if(restaurants[i][2] != veganFriendly){\\n                    restaurants[i][0] = -1;\\n                }\\n            }\\n        }\\n\\n        for(int i = 0; i<restaurants.size(); i++){\\n            if(restaurants[i][3] > maxPrice){   \\n                restaurants[i][0] = -1;\\n            }\\n            if(restaurants[i][4] > maxDistance){  \\n                restaurants[i][0]=-1;\\n            }\\n        }\\n\\n        vector<int> id;\\n        vector<int>rating;\\n        for(int i=0; i<restaurants.size(); i++){\\n            if(restaurants[i][0]>0){\\n                id.push_back(restaurants[i][0]);\\n                rating.push_back(restaurants[i][1]);\\n            }\\n            \\n        }\\n\\n        for(int i=0; i<rating.size(); i++){\\n            for(int j=i+1; j<rating.size(); j++){\\n                if(rating[i] < rating[j]){\\n                    swap(rating[i], rating[j]);\\n                    swap(id[i], id[j]);\\n                }\\n            }\\n        }\\n\\n        for(int i=0; i<rating.size(); i++){\\n            for(int j=i+1; j<rating.size(); j++){\\n                if(rating[i] == rating[j] && id[i] < id[j]){\\n                    swap(id[i], id[j]);\\n                }\\n            }\\n        }\\n\\n        return id;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        if(veganFriendly == 1);\n            for(int i = 0; i<restaurants.size(); i++){\n                if(restaurants[i][2] != veganFriendly){\n                    restaurants[i][0] = -1;\n                }\n            }\n\n        for(int i = 0; i<restaurants.size(); i++){\n            if(restaurants[i][3] > maxPrice){   \n                restaurants[i][0] = -1;\n            }\n            \n            if(restaurants[i][4] > maxDistance){  \n                restaurants[i][0]=-1;\n            }\n        }\n\n        vector<int> id;\n        for(int i=0; i<restaurants.size(); i++){\n            if(restaurants[i][0]>0){\n                id.push_back(restaurants[i][0]);\n            }\n            \n        }\n\n        vector<int>rating;\n        for(int i=0; i<restaurants.size(); i++){\n            if(restaurants[i][0]>0){\n                rating.push_back(restaurants[i][1]);\n            }\n            \n        }\n\n        for(int i=0; i<rating.size(); i++){\n            for(int j=i+1; j<rating.size(); j++){\n                if(rating[i] < rating[j]){\n                    swap(rating[i], rating[j]);\n                    swap(id[i], id[j]);\n                }\n            }\n        }\n\n        for(int i=0; i<rating.size(); i++){\n            for(int j=i+1; j<rating.size(); j++){\n                if(rating[i] == rating[j] && id[i] < id[j]){\n                    swap(id[i], id[j]);\n                }\n            }\n        }\n\n        return id;\n    }\n};\n",
        "explanations": "\nSemicolon after the if statement causes the loop to always run despite the if condition.\n"
    },
    {
        "slug": "length-of-the-longest-valid-substring",
        "description": "You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.",
        "examples": [
            "Input: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\"and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring.",
            "Input: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring."
        ],
        "constraints": "1 <= word.length <= 105\nword consists only of lowercase English letters.\n1 <= forbidden.length <= 105\n1 <= forbidden[i].length <= 10\nforbidden[i] consists only of lowercase English letters.",
        "release_time": 1689480311,
        "oracle_code": "class Solution {\npublic:\n    int longestValidSubstring(string word, vector<string>& forbidden) {\n        vector<int> ends(word.size() , -1);\n        unordered_map<string, int> forbidden_word;\n        for(auto it : forbidden)forbidden_word[it] = 1;\n        int n = word.size();\n        for(int i = 0; i<n; i++){\n            string temp = \"\";\n            for(int j = i; j<i+10 && j<n; j++){\n                temp += word[j];\n                if(forbidden_word.find(temp) != forbidden_word.end()) {\n                    ends[j] = i;\n                }\n            }\n        }\n        \n        int i = 0, j = 0;\n        int ans = INT_MIN;\n        while(j < n){\n            \n            if(ends[j] != -1){\n                int st = ends[j];\n                if(st < i){\n                    ans = max(ans, j-i+1);\n                }\n                else{\n                    i = st+1;\n                    ans = max(ans, j-i+1);\n                }\n            }\n            else ans = max(ans,j-i+1);\n            j++;\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\nWe can use sliding window + Vector.\\n\\n# Approach\\n\\nWe will initialize a vector end of size word with -1.Than we know the forbidden[i].size() is <= 10, so we can find all the index of the forbidden[i] in word string. we just need to find the ending points of each forbidden[i] in the word string and store it in ends vector with value of the starting index.\\n\\nNow we will use Sliding Window.\\n- we check for each right pointer j in our vector that is, is it a end point? if yes than we need to find the starting point of the substring and let it be \"st\" using our vector of end points. than we check if st < i (our left pointer) if yes than it means our window is safe because it doesnt contain starting index of the particular forbidden word ending at j.\\n\\nif st >= i(our left pointer) that means the starting point of forbidden word ending with right pointer j is in our window so we have to remove it by movig left pointer i = st+1.\\n\\nif our right pointer j is not a end point than the window is valid and we can store the ans of it.\\n\\n# Complexity\\n- Time complexity:\\n- O(N)\\n\\n- Space complexity:\\n- O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestValidSubstring(string word, vector<string>& forbidden) {\\n        vector<int> ends(word.size() , -1);\\n        unordered_map<string, int> forbidden_word;\\n        for(auto it : forbidden)forbidden_word[it] = 1;\\n        int n = word.size();\\n        for(int i = 0; i<n; i++){\\n            string temp = \"\";\\n            for(int j = i; j<i+10 && j<n; j++){\\n                temp += word[j];\\n                if(forbidden_word.find(temp) != forbidden_word.end()) {\\n                    ends[j] = i;\\n                }\\n            }\\n        }\\n        \\n        int i = 0, j = 0;\\n        int ans = INT_MIN;\\n        while(j < n){\\n            \\n            if(ends[j] != -1){\\n                int st = ends[j];\\n                if(st < i){\\n                    ans = max(ans, j-i+1);\\n                }\\n                else{\\n                    i = st+1;\\n                    ans = max(ans, j-i+1);\\n                }\\n            }\\n            else ans = max(ans,j-i+1);\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestValidSubstring(string word, vector<string>& forbidden) {\n        vector<int> ends(word.size() , -1);\n        unordered_map<string, int> forbidden_word;\n        for(auto it : forbidden)forbidden_word[it] = 1;\n        int n = word.size();\n        for(int i = 0; i<n; i++)\n        {\n            string temp = \"\";\n            for(int j = i; j<i+10 && j<n; j++){\n                temp += word[j];\n                if(forbidden_word.find(temp) != forbidden_word.end())\n                    ends[j] = i;\n                }\n            }\n            \n        int i = 0, j = 0;\n        int ans = INT_MIN;\n        while(j < n)\n        {\n            if(ends[j] != -1)\n                int st = ends[j];\n                if(st < i){\n                    ans = max(ans, j-i+1);\n                }\n                else{\n                    i = st+1;\n                    ans = max(ans, j-i+1);\n                }\n            else ans = max(ans, j-i+1);\n            j++;\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe bug is that I have removed the braces after the if condition, changing its scope. \n"
    },
    {
        "slug": "string-to-integer-atoi",
        "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\n\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\n\nNote:\n\nOnly the space character ' ' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.",
        "examples": [
            "Input: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.",
            "Input: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.",
            "Input: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193."
        ],
        "constraints": "0 <= s.length <= 200\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.",
        "release_time": 1689150590,
        "oracle_code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        long long res = 0; // stores our integer value\n        bool neg = 0; // checks whether integer will be -ve or +ve\n        bool leading = true; // true if theres leading spaces \n        \n        int n = s.size();\n\n        for (int i = 0; i<n; i++) {\n            if (s[i] == ' ') { // checks for leading spaces\n                if (leading) continue;\n                else break;\n            }\n            else if (s[i] == '-') { // checks -ve \n                if (i+1 < n && isdigit(s[i+1])) neg = 1;\n                else break; // break if next char is non-digit\n            }\n            else if (s[i] == '+') { // checks for +ve\n                if (i+1 < n && isdigit(s[i+1])) neg = 0;\n                else break; // break if next char is non-digit\n            }\n            else if (!isdigit(s[i])) break; // break on encoutring non-digit\n            else { // storing our integer value to res\n                if (res < 1e11) {\n                    res = res*10 + (s[i]-'0');\n                    if (i+1 < n && !isdigit(s[i+1])) \n                        break;// break if next char is non-digit\n                }\n                else break;\n                leading = false; // tells that integer has been encoutered\n            }\n        }\n\n        if (res > INT_MAX && neg) return INT_MIN;\n        if (res > INT_MAX) return INT_MAX;\n\n        return neg ? -1*res : res;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long res = 0; // stores our integer value\\n        bool neg = 0; // checks whether integer will be -ve or +ve\\n        bool leading = true; // true if theres leading spaces \\n        \\n        int n = s.size();\\n\\n        for (int i = 0; i<n; i++) {\\n            if (s[i] == \\' \\') { // checks for leading spaces\\n                if (leading) continue;\\n                else break;\\n            }\\n            else if (s[i] == \\'-\\') { // checks -ve \\n                if (i+1 < n && isdigit(s[i+1])) neg = 1;\\n                else break; // break if next char is non-digit\\n            }\\n            else if (s[i] == \\'+\\') { // checks for +ve\\n                if (i+1 < n && isdigit(s[i+1])) neg = 0;\\n                else break; // break if next char is non-digit\\n            }\\n            else if (!isdigit(s[i])) break; // break on encoutring non-digit\\n            else { // storing our integer value to res\\n                if (res < 1e11) {\\n                    res = res*10 + (s[i]-\\'0\\');\\n                    if (i+1 < n && !isdigit(s[i+1])) \\n                        break;// break if next char is non-digit\\n                }\\n                else break;\\n                leading = false; // tells that integer has been encoutered\\n            }\\n        }\\n\\n        if (res > INT_MAX && neg) return INT_MIN;\\n        if (res > INT_MAX) return INT_MAX;\\n\\n        return neg ? -1*res : res;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        long long res = 0; bool neg = 0; bool leading = true; \n        int n = s.size();\n        for (int i = 0; i<n; i++) {\n            if (s[i] == ' ') {\n                if (leading) continue;\n                else break;\n            }\n            else if (s[i] == '-') {\n                if (i+1 < n && isdigit(s[i+1])) neg = 1;\n                else break; \n            }\n            else if (s[i] == '+') {\n                if (i+1 < n && isdigit(s[i+1])) neg = 0;\n                else break; \n            }\n            else if (!isdigit(s[i])) break; \n            else {\n                if (res < 1e11) {\n                    res = res*10 + (s[i]-'0');\n                    if (i+1 < n && !isdigit(s[i+1])){}\n                        break;\n                }\n                else break;\n                leading = false; \n            }\n        }\n\n        if (res > INT_MAX && neg) return INT_MIN;\n        if (res > INT_MAX) return INT_MAX;\n        return neg ? -1*res : res;\n    }\n};\n",
        "explanations": "\nPlacing the break statement after empty curly braces creates a statement separation bug.\n"
    },
    {
        "slug": "extra-characters-in-a-string",
        "description": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.",
        "examples": [
            "Input: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\nOutput: 1\nExplanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.",
            "Input: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\nOutput: 3\nExplanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3."
        ],
        "constraints": "1 <= s.length <= 50\n1 <= dictionary.length <= 50\n1 <= dictionary[i].length <= 50\ndictionary[i]\u00a0and s consists of only lowercase English letters\ndictionary contains distinct words",
        "release_time": 1690885964,
        "oracle_code": "class Solution {\npublic:\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\n    {\n        if (ind==s.size()) return 0;\n        if (dp[ind]!=-1) return dp[ind];\n        int ans=s.size()-ind;\n        for (int i=ind;i<s.size();i++)\n        {\n           string temp=s.substr(ind,i-ind+1);\n           if (st.find(temp)!=st.end())\n           {\n              ans=min(ans,rec(i+1,s,st,dp));\n           }\n        }\n        ans=min(ans,1+rec(ind+1,s,st,dp));\n        return dp[ind]=ans;\n    }\n    int minExtraChar(string s, vector<string>& dictionary) \n    {\n        set<string>st;\n        int n=s.size();\n        vector<int>dp(n,-1);\n        for (auto it:dictionary)\n        {\n            st.insert(it);\n        }\n        return rec(0,s,st,dp);\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\\n    {\\n        if (ind==s.size()) return 0;\\n        if (dp[ind]!=-1) return dp[ind];\\n        int ans=s.size()-ind;\\n        for (int i=ind;i<s.size();i++)\\n        {\\n           string temp=s.substr(ind,i-ind+1);\\n           if (st.find(temp)!=st.end())\\n           {\\n              ans=min(ans,rec(i+1,s,st,dp));\\n           }\\n        }\\n        ans=min(ans,1+rec(ind+1,s,st,dp));\\n        return dp[ind]=ans;\\n    }\\n    int minExtraChar(string s, vector<string>& dictionary) \\n    {\\n        set<string>st;\\n        int n=s.size();\\n        vector<int>dp(n,-1);\\n        for (auto it:dictionary)\\n        {\\n            st.insert(it);\\n        }\\n        return rec(0,s,st,dp);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int rec(int ind,string &s,set<string>&st,vector<int>&dp)\n    {\n        if (ind==s.size()) return 0;\n        if (dp[ind]!=-1) return dp[ind];\n        int ans=s.size()-ind;\n        for (int i=ind;i<s.size();i++)\n        {\n           string temp=s.substr(ind,i-ind+1);\n           if (st.find(temp)!=st.end())\n              ans=min(ans,rec(i+1,s,st,dp));\n           }\n\n        ans=min(ans,1+rec(ind+1,s,st,dp))\n        return dp[ind]=ans;\n    }\n    int minExtraChar(string s, vector<string>& dictionary) \n    {\n        set<string>st;\n        int n=s.size();\n        vector<int>dp(n,-1);\n        for (auto it:dictionary)\n        {\n            st.insert(it);\n        }\n        return rec(0,s,st,dp);\n    }\n};\n",
        "explanations": "\nThe code above does not end the statement with semicolon after updating the `ans` variable.\n"
    },
    {
        "slug": "group-anagrams",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "examples": [
            "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
            "Input: strs = [\"\"]\nOutput: [[\"\"]]",
            "Input: strs = [\"a\"]\nOutput: [[\"a\"]]"
        ],
        "constraints": "1 <= strs.length <= 104\n0 <= strs[i].length <= 100\nstrs[i] consists of lowercase English letters.",
        "release_time": 1690927060,
        "oracle_code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string,int> m;\n        vector<vector<string>> ans;\n        for(int i=0; i<strs.size(); i++) {\n            string str = strs[i];\n            sort(str.begin(),str.end());\n\n            if(m.find(str) != m.end()) {\n                ans[m[str]].push_back(strs[i]);\n            }\n            else {\n                m[str] = ans.size(); \n                ans.push_back({strs[i]});\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\\n        unordered_map<string,int> m;\\n        vector<vector<string>> ans;\\n        for(int i=0; i<strs.size(); i++) {\\n            string str = strs[i];\\n            sort(str.begin(),str.end());\\n\\n            if(m.find(str) != m.end()) {\\n                ans[m[str]].push_back(strs[i]);\\n            }\\n            else {\\n                m[str] = ans.size(); \\n                ans.push_back({strs[i]});\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string,int> m;\n        vector<vector<string>> ans;\n        for(int i=0; i<strs.size(); i++) \n            string str = strs[i];\n            sort(str.begin(),str.end());\n\n            if(m.find(str) != m.end()) {\n                ans[m[str]].push_back(strs[i]);\n            }\n            else {\n                m[str] = ans.size(); \n                ans.push_back({strs[i]});\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe opening bracket after the for loop statement is missing, breaking the defined scope.\n"
    },
    {
        "slug": "add-two-numbers",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "examples": [
            "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
            "Input: l1 = [0], l2 = [0]\nOutput: [0]",
            "Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]"
        ],
        "constraints": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
        "release_time": 1691909288,
        "oracle_code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        //initializing tem and temp so that l1 and l2 reamins preserved,\n        //though this isn't needed but it a good practice\n        ListNode* temp=l1;\n        ListNode* tem=l2;\n        ListNode *ans;\n        ListNode *head;\n        int carry=0;\n        int valu;\n        //initiallize the first node of answer\n        int sum=tem->val+temp->val+carry;\n        valu=sum%10;\n        carry=sum/10;\n        ListNode* node =new ListNode(valu);\n        ans=node;\n        head=ans;\n        tem=tem->next;\n        temp=temp->next;\n        while(tem!=NULL && temp!=NULL)\n        {\n            sum=tem->val+temp->val+carry;\n            valu=sum%10;\n            carry=sum/10;\n            ListNode* node =new ListNode(valu);\n            ans->next=node;\n            ans=ans->next;\n            temp=temp->next;\n            tem=tem->next;\n        }\n        //if l1 gets over and there are still some elements in l2\n        if(tem==NULL && temp!=NULL)\n        {\n            while(temp!=NULL)\n            {\n                sum=temp->val+carry;\n                valu=sum%10;\n                carry=sum/10;\n                ListNode* node =new ListNode(valu);\n                ans->next=node;\n                ans=ans->next;\n                temp=temp->next;\n            }\n        }\n        //if l2 gets over and there are still some elements in l1\n        if(tem!=NULL && temp==NULL)\n        {\n            while(tem!=NULL)\n            {\n                sum=tem->val+carry;\n                valu=sum%10;\n                carry=sum/10;\n                ListNode* node =new ListNode(valu);\n                ans->next=node;\n                ans=ans->next;\n                tem=tem->next;\n            }\n        }\n        //if there is still a carry left\n        if(carry!=0)\n        {\n            ListNode* node =new ListNode(carry);\n            ans->next=node;\n        }\n        return head;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code might seem really complex for the first time, but this only because i have specified every corner case differently, cmon i will give u a walk through my code.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are just using a variable for the value we want as node\\'s vale and a carry, rest the operation is as simple as we add two numbers.\\n\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        //initializing tem and temp so that l1 and l2 reamins preserved,\\n        //though this isn\\'t needed but it a good practice\\n        ListNode* temp=l1;\\n        ListNode* tem=l2;\\n        ListNode *ans;\\n        ListNode *head;\\n        int carry=0;\\n        int valu;\\n        //initiallize the first node of answer\\n        int sum=tem->val+temp->val+carry;\\n        valu=sum%10;\\n        carry=sum/10;\\n        ListNode* node =new ListNode(valu);\\n        ans=node;\\n        head=ans;\\n        tem=tem->next;\\n        temp=temp->next;\\n        while(tem!=NULL && temp!=NULL)\\n        {\\n            sum=tem->val+temp->val+carry;\\n            valu=sum%10;\\n            carry=sum/10;\\n            ListNode* node =new ListNode(valu);\\n            ans->next=node;\\n            ans=ans->next;\\n            temp=temp->next;\\n            tem=tem->next;\\n        }\\n        //if l1 gets over and there are still some elements in l2\\n        if(tem==NULL && temp!=NULL)\\n        {\\n            while(temp!=NULL)\\n            {\\n                sum=temp->val+carry;\\n                valu=sum%10;\\n                carry=sum/10;\\n                ListNode* node =new ListNode(valu);\\n                ans->next=node;\\n                ans=ans->next;\\n                temp=temp->next;\\n            }\\n        }\\n        //if l2 gets over and there are still some elements in l1\\n        if(tem!=NULL && temp==NULL)\\n        {\\n            while(tem!=NULL)\\n            {\\n                sum=tem->val+carry;\\n                valu=sum%10;\\n                carry=sum/10;\\n                ListNode* node =new ListNode(valu);\\n                ans->next=node;\\n                ans=ans->next;\\n                tem=tem->next;\\n            }\\n        }\\n        //if there is still a carry left\\n        if(carry!=0)\\n        {\\n            ListNode* node =new ListNode(carry);\\n            ans->next=node;\\n        }\\n        return head;\\n    }\\n};\\n\\n```",
        "level": "medium",
        "buggy_code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        //initializing tem and temp so that l1 and l2 reamins preserved,\n        //though this isn't needed but it a good practice\n        ListNode* temp=l1;\n        ListNode* tem=l2;\n        ListNode *ans;\n        ListNode *head;\n        int carry=0;\n        int valu;\n        //initiallize the first node of answer\n        int sum=tem->val+temp->val+carry;\n        valu=sum%10;\n        carry=sum/10;\n        ListNode* node =new ListNode(valu);\n        ans=node;\n        head=ans\n        tem=tem->next;\n        temp=temp->next;\n        while(tem!=NULL && temp!=NULL)\n        {\n            sum=tem->val+temp->val+carry;\n            valu=sum%10;\n            carry=sum/10;\n            ListNode* node =new ListNode(valu);\n            ans->next=node;\n            ans=ans->next;\n            temp=temp->next;\n            tem=tem->next;\n        }\n        //if l1 gets over and there are still some elements in l2\n        if(tem==NULL && temp!=NULL)\n        {\n            while(temp!=NULL)\n            {\n                sum=temp->val+carry;\n                valu=sum%10;\n                carry=sum/10;\n                ListNode* node =new ListNode(valu);\n                ans->next=node;\n                ans=ans->next;\n                temp=temp->next;\n            }\n        }\n        //if l2 gets over and there are still some elements in l1\n        if(tem!=NULL && temp==NULL)\n        {\n            while(tem!=NULL)\n            {\n                sum=tem->val+carry;\n                valu=sum%10;\n                carry=sum/10;\n                ListNode* node =new ListNode(valu);\n                ans->next=node;\n                ans=ans->next;\n                tem=tem->next;\n            }\n        }\n        //if there is still a carry left\n        if(carry!=0)\n        {\n            ListNode* node =new ListNode(carry);\n            ans->next=node;\n        }\n        return head;\n    }\n};\n",
        "explanations": "\nMissing semicolon after head=ans leads to syntax error, causing the program to fail.\n"
    },
    {
        "slug": "calculate-money-in-leetcode-bank",
        "description": "Hercy wants to save money for his first car. He puts money in the Leetcode\u00a0bank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday. \nGiven n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.",
        "examples": [
            "Input: n = 4\nOutput: 10\nExplanation:\u00a0After the 4th day, the total is 1 + 2 + 3 + 4 = 10.",
            "Input: n = 10\nOutput: 37\nExplanation:\u00a0After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.",
            "Input: n = 20\nOutput: 96\nExplanation:\u00a0After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
        ],
        "constraints": "1 <= n <= 1000",
        "release_time": 1677320292,
        "oracle_code": "class Solution {\npublic:\n    int Rem(int a)\n    {\n        return (a * (a+1) )/2;\n    }\n    int totalMoney(int n) {\n        int ans = 0,dif=28;\n        int a = 0;\n\n        a = n/7;\n        \n        for(int i=0;i<a;i++)\n        {\n            ans+=dif;\n            dif+=7;\n        }\n\n        int b = n%7;\n        int ad = Rem(b);\n        ad+= a*b;\n\n        ans+=ad;\n\n\n        return ans;\n    }\n};",
        "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBasically This Question Try to Test Pattern Finding Skill.\\nThis Problem has 2 things two Consider.\\n1) Firstly We Divide n by 7 ( as Week is of  Days ) So that We get Value Which Indicates that Total Number of Weeks need to Consider in Final Answer.\\n\\n2) Now We Do n%7 which gives answer between 0 to 6 which indicates Remaining Days after Step 1. So We need To calculate Sum of Savings for That n%7 days Separately.\\n\\nAs Sum of\\n \\nWeek 1 : 28\\nWeek 2 : 35\\nWeek 3 : 42\\nWeek 4 : 49\\nWeek 5 : 56\\nand so on...\\n Indicates Pattern that We only need How many Whole Week Need to Consider in answer and that We got in Step 1.\\nSo add 28+35+.. upto n/7 terms\\n\\n\\nNow , In Step 2 , We need to consider Saving For Remainig Days which is n%7.\\nSuppose Rem Day is B then B*(B+1)/2 Will be Saving at B day of Week 1.We know that we have n/7 week so n/7*b will be added to B*(B+1)/2\\n.This is Final answer of Step 2.\\n\\n3) Add Both answer of Step 1 and Step 2.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int Rem(int a)\\n    {\\n        return (a * (a+1) )/2;\\n    }\\n    int totalMoney(int n) {\\n        int ans = 0,dif=28;\\n        int a = 0;\\n\\n        a = n/7;\\n        \\n        for(int i=0;i<a;i++)\\n        {\\n            ans+=dif;\\n            dif+=7;\\n        }\\n\\n        int b = n%7;\\n        int ad = Rem(b);\\n        ad+= a*b;\\n\\n        ans+=ad;\\n\\n\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int Rem(int a)\n    {\n        return (a * (a+1)) /2;\n    }\n    int totalMoney(int n) {\n        int ans = 0,dif=28;\n        int a = 0;\n\n        a = n/7;\n\n        for(int i=0;i<a;i++); \n        {\n            ans+=dif;\n            dif+=7;\n        }\n\n        int b = n%7;\n        int ad = Rem(b);\n        ad+= a*b;\n\n        ans+=ad;\n\n\n        return ans;\n    }\n};\n",
        "explanations": "\nThe bug is that the semicolon at the end of the for loop makes the loop empty.\n"
    },
    {
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",
        "examples": [
            "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
            "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 107\nroot is a binary search tree.\n1 <= val <= 107",
        "release_time": 1687509988,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* searchBST(TreeNode* root, int val) {\\n       if(root==NULL) \\n       return NULL;\\n       if(root->val==val)\\n       {\\n           return root;\\n       }\\n       if(root->val>val){\\n          return  searchBST(root->left,val);\\n       }\\n        return searchBST(root->right,val);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val);\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};\n",
        "explanations": "\nThe semicolon after the second 'if' condition causes the method to always return root.\n"
    },
    {
        "slug": "find-the-losers-of-the-circular-game",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n1st friend receives the ball.\n\nAfter that, 1st friend passes it to the friend who is k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth.\n\nIn other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction.\nThe game is finished when some friend receives the ball for the second time.\nThe losers of the game are friends who did not receive the ball in the entire game.\nGiven the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.",
        "examples": [
            "Input: n = 5, k = 2\nOutput: [4,5]\nExplanation: The game goes as follows:\n1) Start at 1st\u00a0friend and pass the ball to the friend who is 2 steps away from them - 3rd\u00a0friend.\n2) 3rd\u00a0friend passes the ball to the friend who is 4 steps away from them - 2nd\u00a0friend.\n3) 2nd\u00a0friend passes the ball to the friend who is 6 steps away from them  - 3rd\u00a0friend.\n4) The game ends as 3rd\u00a0friend receives the ball for the second time.",
            "Input: n = 4, k = 4\nOutput: [2,3,4]\nExplanation: The game goes as follows:\n1) Start at the 1st\u00a0friend and pass the ball to the friend who is 4 steps away from them - 1st\u00a0friend.\n2) The game ends as 1st\u00a0friend receives the ball for the second time."
        ],
        "constraints": "1 <= k <= n <= 50",
        "release_time": 1684039583,
        "oracle_code": "class Solution {\npublic:\n    vector<int> circularGameLosers(int n, int k) {\n       vector<int>frq(n+1,0);\n        vector<int>ans;\n        int i = 0;\n        int round = 1;\n       while(true){\n           frq[i]++;\n           if(frq[i] >= 2) break;\n            i = (i + ( round++ * k))%n;\n       }\n        for(int  i = 0 ; i<n ; i++)\n            if( frq[i] == 0) ans.push_back(i+1);\n\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> circularGameLosers(int n, int k) {\\n       vector<int>frq(n+1,0);\\n        vector<int>ans;\\n        int i = 0;\\n        int round = 1;\\n       while(true){\\n           frq[i]++;\\n           if(frq[i] >= 2) break;\\n            i = (i + ( round++ * k))%n;\\n       }\\n        for(int  i = 0 ; i<n ; i++)\\n            if( frq[i] == 0) ans.push_back(i+1);\\n\\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> circularGameLosers(int n, int k) {\n       vector<int>frq(n+1,0);\n        vector<int>ans;\n        int i = 0;\n        int round = 1;\n       while(true)\n           frq[i]++;\n           if(frq[i] >= 2) break;\n            i = (i + ( round++ * k))%n;\n       {\n        for(int  i = 0 ; i<n ; i++)\n            if( frq[i] == 0) ans.push_back(i+1);\n\n        return ans;\n    }\n};\n",
        "explanations": "\nThe curly braces for while loop are misplaced letting it run only one statement.\n"
    },
    {
        "slug": "bitwise-and-of-numbers-range",
        "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",
        "examples": [
            "Input: left = 5, right = 7\nOutput: 4",
            "Input: left = 0, right = 0\nOutput: 0",
            "Input: left = 1, right = 2147483647\nOutput: 0"
        ],
        "constraints": "0 <= left <= right <= 231 - 1",
        "release_time": 1689346823,
        "oracle_code": "class Solution {\npublic:\n    int solve(int left , int right){\n        if(left == 0)return 0;\n        int bit1 = log2(left);\n        int bit2 = log2(right);\n        if(bit1 < bit2)return 0;\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \n    }\n    int rangeBitwiseAnd(int left, int right) {\n         return solve(left , right);\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int left , int right){\\n        if(left == 0)return 0;\\n        int bit1 = log2(left);\\n        int bit2 = log2(right);\\n        if(bit1 < bit2)return 0;\\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \\n    }\\n    int rangeBitwiseAnd(int left, int right) {\\n         return solve(left , right);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int solve(int left , int right){\n        if(left == 0)return 0;\n        int bit1 = log2(left)\n        int bit2 = log2(right);\n        if(bit1 < bit2)return 0;\n        return (1<<bit1) | solve((left^(1<<bit1)) , (right^(1<<bit1))); \n    }\n    int rangeBitwiseAnd(int left, int right) {\n         return solve(left , right);\n    }\n};\n",
        "explanations": "\nThe statement \"int bit1 = log2(left)\" is not terminated with a semicolon, causing a syntax error.\n"
    },
    {
        "slug": "hamming-distance",
        "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.",
        "examples": [
            "Input: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.",
            "Input: x = 3, y = 1\nOutput: 1"
        ],
        "constraints": "0 <=\u00a0x, y <= 231 - 1",
        "release_time": 1692183390,
        "oracle_code": "class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int ans=0;\n        while(x || y){\n            int mask=x&1;\n            int mask2=y&1;\n            if(mask!=mask2){\n                ans++;\n            }\n            x>>=1;\n            y>>=1;\n        }\n        return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe just have to check the number of bits that are different.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor this approach we follow these steps.\\n1.Run a loop until both the numbers are zero.\\n2.Get the last bit of the two numbers and compare them.\\n3.If the two bits didn\\'t match increase the count.\\n4.After each iteration right shift both the numbers by 1.\\n5.At last return the count.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hammingDistance(int x, int y) {\\n        int ans=0;\\n        while(x || y){\\n            int mask=x&1;\\n            int mask2=y&1;\\n            if(mask!=mask2){\\n                ans++;\\n            }\\n            x>>=1;\\n            y>>=1;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# **PLEASE DO UPVOTE!!!\\uD83E\\uDD79**",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int ans=0;\n        while(x || y)\n            int mask=x&1;\n            int mask2=y&1;\n            if(mask!=mask2){\n                ans++;\n            }\n            x>>=1;\n            y>>=1;\n        return ans;\n    }\n};\n",
        "explanations": "\nForgotten braces after the while loop creates a single-statement loop, remaining code executes once.\n"
    },
    {
        "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "description": "A critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any\u00a0two distinct critical points and maxDistance is the maximum distance between any\u00a0two distinct critical points. If there are fewer than two critical points, return [-1, -1].",
        "examples": [
            "Input: head = [3,1]\nOutput: [-1,-1]\nExplanation: There are no critical points in [3,1].",
            "Input: head = [5,3,1,2,5,1,2]\nOutput: [1,3]\nExplanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.",
            "Input: head = [1,3,2,2,3,2,2,2,7]\nOutput: [3,3]\nExplanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."
        ],
        "constraints": "The number of nodes in the list is in the range [2, 105].\n1 <= Node.val <= 105",
        "release_time": 1685534792,
        "oracle_code": "class Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n        vector<int> ans={-1,-1};\n        ListNode* prev=head;\n        if(!prev) return ans;\n        ListNode* curr=prev->next;\n        if(!curr) return ans;\n        ListNode* next=curr->next;\n        if(!next) return ans;\n\n        int first=-1;\n        int last=-1;\n        int mind=INT_MAX;\n        int i=1;\n        while(next){\n            bool iscp=((curr->val>prev->val && curr->val>next->val)||(curr->val<prev->val&&curr->val<next->val))?true:false;\n            if(iscp&&first==-1){\n                first=i;\n                last=i;\n            }\n            else if(iscp){\n                mind=min(mind,i-last);\n                last=i;\n            }\n            i++;\n            prev=curr;\n            curr=next;\n            next=next->next;\n        }\n        if(first==last)\n         return ans;\n         else\n         {\n             ans[0]=mind;\n             ans[1]=last-first;\n         }\n         return ans;\n    }\n};",
        "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\\n        vector<int> ans={-1,-1};\\n        ListNode* prev=head;\\n        if(!prev) return ans;\\n        ListNode* curr=prev->next;\\n        if(!curr) return ans;\\n        ListNode* next=curr->next;\\n        if(!next) return ans;\\n\\n        int first=-1;\\n        int last=-1;\\n        int mind=INT_MAX;\\n        int i=1;\\n        while(next){\\n            bool iscp=((curr->val>prev->val && curr->val>next->val)||(curr->val<prev->val&&curr->val<next->val))?true:false;\\n            if(iscp&&first==-1){\\n                first=i;\\n                last=i;\\n            }\\n            else if(iscp){\\n                mind=min(mind,i-last);\\n                last=i;\\n            }\\n            i++;\\n            prev=curr;\\n            curr=next;\\n            next=next->next;\\n        }\\n        if(first==last)\\n         return ans;\\n         else\\n         {\\n             ans[0]=mind;\\n             ans[1]=last-first;\\n         }\\n         return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n        vector<int> ans={-1,-1};\n        ListNode* prev=head;\n        if(!prev) return ans;\n        ListNode* curr=prev->next;\n        if(!curr) return ans;\n        ListNode* next=curr->next;\n        if(!next) return ans;\n\n        int first=-1;\n        int last=-1;\n        int mind=INT_MAX;\n        int i=1;\n        while(next){\n            bool iscp=((curr->val>prev->val && curr->val>next->val)||(curr->val<prev->val&&curr->val<next->val))?true:false;\n            if(iscp&&first==-1){\n                first=i;\n                last=i;\n            }\n            else if(iscp){\n                mind=min(mind,i-last);\n                last=i;\n            }\n            i++;\n            prev=curr;\n            curr=next\n            next=next->next;\n        }\n        if(first==last)\n         return ans;\n         else\n         {\n             ans[0]=mind;\n             ans[1]=last-first;\n         }\n         return ans;\n    }\n};\n",
        "explanations": "\nIn the while loop, the missing semicolon after 'curr=next' changes the statement structure.\n"
    },
    {
        "slug": "integer-to-roman",
        "description": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two one's added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\u00a0\nX can be placed before L (50) and C (100) to make 40 and 90.\u00a0\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.",
        "examples": [
            "Input: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.",
            "Input: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.",
            "Input: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4."
        ],
        "constraints": "1 <= num <= 3999",
        "release_time": 1672226407,
        "oracle_code": "class Solution {\npublic:\n    string intToRoman(int num) {\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"};\n        \n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string intToRoman(int num) {\\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"};\\n        \\n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\\n    }\\n};\\n```\\n\\n# ***Please Upvote if it helps \\u2764\\uFE0F***",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"}\n        \n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n    }\n};\n",
        "explanations": "\nMissing semicolon at the end of the array declaration might cause compilation failure.\n"
    }
]